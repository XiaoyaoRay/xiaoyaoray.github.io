<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>修改Alpine Docker容器时区</title>
    <url>/articles/555453948.html</url>
    <content><![CDATA[<h1 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h1><ul>
<li><p>使用 Alpine Linux 发行版的 Docker 镜像容器。</p>
</li>
<li><p>仅仅适用于<strong>没有</strong>安装<code>uclibc</code>的系统。</p>
</li>
</ul>
<h1 id="修改Dockerfile"><a href="#修改Dockerfile" class="headerlink" title="修改Dockerfile"></a>修改Dockerfile</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add -U tzdata &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del tzdata</span></span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="直接在容器内修改"><a href="#直接在容器内修改" class="headerlink" title="直接在容器内修改"></a>直接在容器内修改</h1><ul>
<li><p>进入容器命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃ docker <span class="built_in">exec</span> -it container_name /bin/sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 timezone 数据包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃ apk add -U tzdata</span><br><span class="line">＃ ls /usr/share/zoneinfo</span><br></pre></td></tr></table></figure>

<p>为了防止添加失败，加上<code>-U</code>参数，更新仓储缓存。<br>列出安装的时区文件，验证是否下载成功。</p>
</li>
<li><p>拷贝需要的时区文件到<code>localtime</code>，国内需要的是<code>Asia/Shanghai</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃ date</span><br><span class="line">Tue Jan  9 22:53:46 CST 2018</span><br></pre></td></tr></table></figure>

<p><code>CST</code> 即为 <code>中国标准时间</code>。</p>
</li>
<li><p>移除时区文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃ apk del tzdata</span><br></pre></td></tr></table></figure>

<p>为了保证容器的精简和轻量，移除下载的时区文件。</p>
</li>
</ul>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fwiki.alpinelinux.org%2Fwiki%2FSetting_the_timezone" target="_blank" rel="noopener external nofollow noreferrer">https://wiki.alpinelinux.org/wiki/Setting_the_timezone</a></p>
<p><a href="https://www.jianshu.com/p/cd1636c94f9f" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/cd1636c94f9f</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Apline</tag>
      </tags>
  </entry>
  <entry>
    <title>Apline Linux 系统简介</title>
    <url>/articles/1634017428.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Alpine Linux 是围绕 musl libc 和 busybox 构建的。这使得它比传统的GNU/Linux发行版更小、更节省资源。一个Alpine容器大小不超过8MB，而一个最小的传统GNU/Linux安装到磁盘上的需要130MB左右的存储空间。Alpine LInux不仅是一个完整的Linux环境，还可以从版本库中获得大量的软件包。</p>
<p>系统的二进制包被更好的精简和分割，使得对安装的而今之宝有了更多的控制权，这反过来又让你的环境尽可能地保持了小而高效。</p>
<p>Alpine Linux在设计时就考虑到了安全问题。所有的userland二进制文件都被编译为位置独立可执行文件（PIE），并带有堆栈粉碎保护。这些安全特性可以防止被zero-day漏洞和其他漏洞利用。</p>
<a id="more"></a>

<h2 id="Apline-Linux包管理"><a href="#Apline-Linux包管理" class="headerlink" title="Apline Linux包管理"></a>Apline Linux包管理</h2><p>Apline Linux使用apk进行包管理，通过apk –help命令查看完整的管理命令，下面列举常用的命令：</p>
<h4 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk update  <span class="comment"># 更新最新本地镜像源</span></span><br><span class="line">apk upgrade <span class="comment"># 升级软件</span></span><br><span class="line">apk add --upgrade busybox <span class="comment"># 指定升级部分软件包</span></span><br></pre></td></tr></table></figure>

<h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add openssh vim</span><br><span class="line">apk add --no-cache mysql-clinet</span><br><span class="line">apk add docker --update-cache --repository http://mirrors.ustc.edu.cn/alpine/v3.4/main/ --allow-untrusted</span><br></pre></td></tr></table></figure>

<h4 id="卸载删除包"><a href="#卸载删除包" class="headerlink" title="卸载删除包"></a>卸载删除包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk del xxx</span><br></pre></td></tr></table></figure>

<h4 id="search搜索可用的包"><a href="#search搜索可用的包" class="headerlink" title="search搜索可用的包"></a>search搜索可用的包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk search </span><br><span class="line">apk search -v <span class="string">'acf*'</span> <span class="comment"># 通过包名搜索</span></span><br><span class="line">apk search -v -d <span class="string">'docker'</span> <span class="comment"># 通过描述文件搜索</span></span><br></pre></td></tr></table></figure>

<h4 id="info显示包信息"><a href="#info显示包信息" class="headerlink" title="info显示包信息"></a>info显示包信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk info <span class="comment"># 列出所有已安装的包</span></span><br><span class="line">apk info -a zlib <span class="comment"># 显示完整的软件包信息</span></span><br><span class="line">apk info --who-owns /sbin/lbu <span class="comment"># 显示指定文件属于的包</span></span><br></pre></td></tr></table></figure>

<h2 id="Apline镜像源"><a href="#Apline镜像源" class="headerlink" title="Apline镜像源"></a>Apline镜像源</h2><h4 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">清华TUNA镜像源：https://mirror.tuna.tsinghua.edu.cn/alpine/</span><br><span class="line">中科大镜像源：http://mirrors.ustc.edu.cn/alpine/</span><br><span class="line">阿里云镜像源：http://mirrors.aliyun.com/alpine/</span><br></pre></td></tr></table></figure>

<h4 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h4><p>以阿里云镜像源为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s|http://dl-cdn.alpinelinux.org|https://mirrors.aliyun.com|g"</span> /etc/apk/repositories</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://link.jianshu.com?t=https://wiki.alpinelinux.org/wiki/Alpine_Linux_Init_System" target="_blank" rel="noopener external nofollow noreferrer">https://wiki.alpinelinux.org/wiki/Alpine_Linux_Init_System</a></p>
<p><a href="https://alpinelinux.org/about/" target="_blank" rel="noopener external nofollow noreferrer">https://alpinelinux.org/about/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apline</tag>
      </tags>
  </entry>
  <entry>
    <title>AuthPoint添加ADFS</title>
    <url>/articles/1631318906.html</url>
    <content><![CDATA[<h2 id="WatchGuard-Cloud添加ADFS-Resource"><a href="#WatchGuard-Cloud添加ADFS-Resource" class="headerlink" title="WatchGuard Cloud添加ADFS Resource"></a>WatchGuard Cloud添加ADFS Resource</h2><h3 id="进入到AuthPoint配置界面"><a href="#进入到AuthPoint配置界面" class="headerlink" title="进入到AuthPoint配置界面"></a>进入到AuthPoint配置界面</h3><p>在<code>Configure</code>中选择<code>AuthPoint</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/881466b773319a7f8192b4e18b0ea8f4.jpg" alt="image-20190624102156098"></p>
<a id="more"></a>

<h3 id="添加ADFS-Resource"><a href="#添加ADFS-Resource" class="headerlink" title="添加ADFS Resource"></a>添加ADFS Resource</h3><ul>
<li><p>在AuthPoint界面选择<code>Resource</code>， 选择<code>ADFS</code>并添加</p>
<p><img src="https://image.ritboy.com/markdown/202004/59b518ca47099cd8bc99d08bd523e8d8.jpg" alt="image-20190624102456597"></p>
</li>
<li><p>配置<code>ADFS</code>的名称，点击<code>SAVE</code>按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/4c39266acd8d7fc27a2b778d6562c004.jpg" alt="image-20190624102609496"></p>
</li>
<li><p>在Gateway中添加<code>ADFS</code> Resource，并点击<code>SAVE</code>按钮保存</p>
<p><img src="https://image.ritboy.com/markdown/202004/18cd7f7ab05100e8b5a63cf862299046.jpg" alt="image-20190624103440130"></p>
</li>
<li><p>下载<code>ADFS Agent</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/fefecc25f898d684e365c2ddc9556580.jpg" alt="image-20190624103836616"></p>
</li>
</ul>
<h2 id="Windows系统中安装并配置ADFS-Agent"><a href="#Windows系统中安装并配置ADFS-Agent" class="headerlink" title="Windows系统中安装并配置ADFS Agent"></a>Windows系统中安装并配置ADFS Agent</h2><p>Windwos 系统中已经安装了<code>ADFS</code>服务，如果ADFS服务与Gateway在不同的系统中，<strong>请关闭<code>Gateway</code>所在系统的防火墙</strong>，否则ADFS Agent会安装失败。</p>
<p><strong>以下所有操作均在Windows Server 2016 64bit中</strong></p>
<h3 id="ADFS-Agent安装"><a href="#ADFS-Agent安装" class="headerlink" title="ADFS Agent安装"></a>ADFS Agent安装</h3><p>把ADFS Agent安装程序与配置文件放在<strong>同一个目录</strong>下，运行安装程序。然后点击<code>Next</code>一直等待安装完成</p>
<p>  <img src="https://image.ritboy.com/markdown/202004/8fcf9d0b53956d6b4e8d43535d786832.jpg" alt="image-20190624110318848"></p>
<h3 id="配置ADFS"><a href="#配置ADFS" class="headerlink" title="配置ADFS"></a>配置ADFS</h3><ul>
<li><p>打开ADFS 控制台</p>
<p> <img src="https://image.ritboy.com/markdown/202004/eb2e116dbbbd23f9665a856cc26fad42.jpg" alt="image-20190624111810048"></p>
</li>
</ul>
<h4 id="添加WatchGuard认证"><a href="#添加WatchGuard认证" class="headerlink" title="添加WatchGuard认证"></a>添加WatchGuard认证</h4><ul>
<li><p>编辑<code>Multi-factor Authentication</code>， 对<code>Service</code>下<code>Authentication Methods</code>选项右键</p>
<p> <img src="https://image.ritboy.com/markdown/202004/9115bbd5c27ad7dbbde991a5cfb83189.jpg" alt="image-20190624112301990"></p>
</li>
<li><p>选择<code>WatchGuard Multi Factor Authentication</code>，点击<code>OK</code>按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/15ed1ed50556f4b1fef4bb6b34123c3d.jpg" alt="image-20190624112501457"></p>
</li>
</ul>
<h4 id="添加Access-Control-Policy"><a href="#添加Access-Control-Policy" class="headerlink" title="添加Access Control Policy"></a>添加Access Control Policy</h4><ul>
<li><p>选择<code>Access Control Policies</code>，右键添加<code>Policy</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/726258f5c2ee9a0ec6f512e621a94480.jpg" alt="image-20190624114321871"></p>
</li>
<li><p>添加Rule</p>
<p> <img src="https://image.ritboy.com/markdown/202004/807a356c856c6744ad8a40fd98adc509.jpg" alt="image-20190624152209222"></p>
</li>
</ul>
<h4 id="应用已有Access-Control-Policy"><a href="#应用已有Access-Control-Policy" class="headerlink" title="应用已有Access Control Policy"></a>应用已有Access Control Policy</h4><ul>
<li><p>在ADFS管理界面点击<code>Relying Party Trusts</code>，右键已有的<code>Relying Party Trusts</code>（如果没有请添加）选择<code>Edit Access Control Policy ...</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/e78f56bc5209555e4a272201a4121f56.jpg" alt="image-20190624153326502"></p>
</li>
<li><p>在编辑界面添加已有的Access Control Policy (New Access Control Policy)，点击<code>OK</code>按钮</p>
<p> <img src="https://image.ritboy.com/markdown/202004/7e19e079f5a6405dfd3f4fdf041b1ae4.jpg" alt="image-20190624154157961"></p>
</li>
<li><p>重启ADFS服务</p>
<p> <img src="https://image.ritboy.com/markdown/202004/489b3c9fadf7b28f33f4a7018ff99283.jpg" alt="image-20190624161537667"></p>
</li>
</ul>
<h3 id="访问ADFS页面"><a href="#访问ADFS页面" class="headerlink" title="访问ADFS页面"></a>访问ADFS页面</h3><ul>
<li><p><code>https://&lt; domain &gt;/adfs/ls/idpinitiatedsignon.aspx</code> (ADFS服务所在的域名）或者<code>https://127.0.0.1/adfs/ls/idpinitiatedsignon.aspx</code>，<strong>注意：选择MFA的Relying Party Trusts</strong></p>
<p> <img src="https://image.ritboy.com/markdown/202004/fa78047105e590e2a99220840099e015.jpg" alt="image-20190624163658668"></p>
</li>
<li><p>输入用户名和密码登录</p>
<p> <img src="https://image.ritboy.com/markdown/202004/aa627a58224e5e2789b98e71a202545b.jpg" alt="image-20190624163448547"></p>
</li>
<li><p>MFA认证</p>
<p><img src="https://image.ritboy.com/markdown/202004/37a150d28540a8bff61de3927e51c00b.jpg" alt="image-20190624164040464"></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://confluence.watchguard.com/display/WGQA/ADFS+agent" target="_blank" rel="noopener external nofollow noreferrer">https://confluence.watchguard.com/display/WGQA/ADFS+agent</a></p>
]]></content>
      <categories>
        <category>WatchGuard</category>
        <category>ADFS</category>
      </categories>
      <tags>
        <tag>WatchGuard</tag>
      </tags>
  </entry>
  <entry>
    <title>AuthPoint添加SAML</title>
    <url>/articles/4078729915.html</url>
    <content><![CDATA[<h2 id="FireBox-Web-UI配置"><a href="#FireBox-Web-UI配置" class="headerlink" title="FireBox Web UI配置"></a>FireBox Web UI配置</h2><h3 id="WatchGuard-Cloud-UI上获取METADAT-URL"><a href="#WatchGuard-Cloud-UI上获取METADAT-URL" class="headerlink" title="WatchGuard Cloud UI上获取METADAT URL"></a>WatchGuard Cloud UI上获取<code>METADAT URL</code></h3><p>打开WatchGuard Cloud UI(比如：<a href="https://staging.cloud.watchguard.com/" target="_blank" rel="noopener external nofollow noreferrer">https://staging.cloud.watchguard.com</a>)，然后通过账户密码登录并进入到AuthPoint界面。</p>
<ul>
<li>在<code>Resources</code>界面新建<strong>Certificate</strong></li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/70bfbce4f4280d5bcf95a73261411e1b.jpg" alt="image-20190423144332795"></p>
<a id="more"></a>

<ul>
<li><p>在<code>CERTIFICATE</code>界面上复制<code>METADATA URL</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/a2b14d83585d6a8383452c189c861d40.jpg" alt="image-20190423144453467"></p>
</li>
</ul>
<h3 id="登录FireBox-UI"><a href="#登录FireBox-UI" class="headerlink" title="登录FireBox UI"></a>登录FireBox UI</h3><p>登录到FireBox Web UI(比如：https://&lt; firebox ip &gt;:8080)，然后通过账号和密码登录进入FireBox。</p>
<h3 id="FireBox-Web-UI配置Access-Portal"><a href="#FireBox-Web-UI配置Access-Portal" class="headerlink" title="FireBox Web UI配置Access Portal"></a>FireBox Web UI配置Access Portal</h3><p>在FireBox Web UI上选择<strong>Subscription Services –&gt; Access Portal</strong>.可能需要先点击🔓</p>
<p> <img src="https://image.ritboy.com/markdown/202004/3435d7eab366308cb11af1fa2d9d3e75.jpg" alt="image-20190422175756919"></p>
<h4 id="添加Applications"><a href="#添加Applications" class="headerlink" title="添加Applications"></a>添加Applications</h4><ul>
<li><p>在<strong>Applications中ADD按钮</strong>添加SP(Service Provider)，比如：Web Application</p>
<p><img src="https://image.ritboy.com/markdown/202004/5bb25872385fb9070dca5516fe23673e.jpg" alt="image-20190422180250765"></p>
</li>
<li><p>配置Application的信息</p>
<p><img src="https://image.ritboy.com/markdown/202004/b038560fd9cdc40261860fd8796d778f.jpg" alt="image-20190422180750195"></p>
</li>
</ul>
<h4 id="配置SAML"><a href="#配置SAML" class="headerlink" title="配置SAML"></a>配置SAML</h4><p>在Access Portal页面选择<code>SAML</code>页面</p>
<p><img src="https://image.ritboy.com/markdown/202004/cba23577b74ed78b45c57ff6b56891f8.jpg" alt="image-20190422181014843"></p>
<ul>
<li>勾选<code>Enable Accesss Portal</code></li>
<li>勾选<code>Enable SAML</code></li>
<li>配置<code>Idp Name</code>，内容自定义。配置后再SAML登录界面会看到该信息</li>
<li>配置<code>Host Name</code>，内容自定义。注意：需要在本地的<code>hosts文件</code>把<code>FireBox</code>的IP地址与该Host Name对应(macOS中的<code>/etc/hosts</code>文件)</li>
<li>配置<code>Idp Metadata URL</code>，内容为从<strong>WatchGuard Cloud UI</strong>上复制到的<code>METADATA URL</code>数据(操作请见：<strong>WatchGuard Cloud UI上获取<code>METADAT URL</code></strong>)</li>
<li>最后点击<code>SAVE</code>按钮</li>
</ul>
<h3 id="FireBox-Web-UI配置Users-and-Groups"><a href="#FireBox-Web-UI配置Users-and-Groups" class="headerlink" title="FireBox Web UI配置Users and Groups"></a>FireBox Web UI配置Users and Groups</h3><p>进入到<code>Users and Groups</code>界面，可能需要先点击下🔓</p>
<p> <img src="https://image.ritboy.com/markdown/202004/6c04a3f1fccd39ba8973249d0cbb7e35.jpg" alt="image-20190422183117703"></p>
<h4 id="点击ADD按钮"><a href="#点击ADD按钮" class="headerlink" title="点击ADD按钮"></a>点击ADD按钮</h4><p> <img src="https://image.ritboy.com/markdown/202004/c9c329bf3bd2315235a481b6d6340c0e.jpg" alt="image-20190423094359746"></p>
<h4 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h4><ul>
<li><p>type：选择<code>User</code></p>
</li>
<li><p>Name：自定义，注意需要在WatchGuard Cloud中有相应的用户才能正常使用</p>
</li>
<li><p>Authentication Server：选择<code>AuthPoint</code></p>
</li>
<li><p>其余的为默认值</p>
</li>
<li><p>点击<code>OK</code>保存</p>
<p><img src="https://image.ritboy.com/markdown/202004/c4ad6b7e87b3903cd543948848daa07a.jpg" alt="image-20190423094542736"></p>
</li>
</ul>
<h3 id="获取EntityID，Assertion-Consumer-Service-ACS-URL，Certificate"><a href="#获取EntityID，Assertion-Consumer-Service-ACS-URL，Certificate" class="headerlink" title="获取EntityID，Assertion Consumer Service(ACS) URL，Certificate"></a>获取EntityID，Assertion Consumer Service(ACS) URL，Certificate</h3><p>在浏览器中打开地址：https://&lt; your Host Name &gt;/auth/saml，其中<code>Host Name</code>为配置<strong>SAML</strong>时填的，并且该域名需要在<code>hosts文件</code>中配置</p>
<p> <img src="https://image.ritboy.com/markdown/202004/3fe816337e0dbe77db5b46069278acb2.jpg" alt="image-20190423095313020"></p>
<h2 id="WatchGuard-Cloud-Web-UI配置AuthPoint"><a href="#WatchGuard-Cloud-Web-UI配置AuthPoint" class="headerlink" title="WatchGuard Cloud Web UI配置AuthPoint"></a>WatchGuard Cloud Web UI配置AuthPoint</h2><h3 id="进入到Resource界面"><a href="#进入到Resource界面" class="headerlink" title="进入到Resource界面"></a>进入到Resource界面</h3><ul>
<li><p>打开WatchGuard Cloud UI(比如：<a href="https://staging.cloud.watchguard.com/" target="_blank" rel="noopener external nofollow noreferrer">https://staging.cloud.watchguard.com</a>)，并使用账户密码登录</p>
<p><img src="https://image.ritboy.com/markdown/202004/943b6e117fff84befee9a9fbe86ad7d9.jpg" alt="image-20190422172127535"></p>
</li>
<li><p>进入到AuthPoint界面</p>
<p><img src="https://image.ritboy.com/markdown/202004/5350d262716b3cc8fa6e1eb65ee4f11e.jpg" alt="image-20190422172345367"></p>
</li>
<li><p>进入到Resource界面</p>
<p><img src="https://image.ritboy.com/markdown/202004/7c074ffd360fedb3a4f5172a86bbc602.jpg" alt="image-20190423100444852"></p>
</li>
</ul>
<h3 id="添加SAML-Resource"><a href="#添加SAML-Resource" class="headerlink" title="添加SAML Resource"></a>添加SAML Resource</h3><h4 id="选择SAML-并点击Add-Resource按钮"><a href="#选择SAML-并点击Add-Resource按钮" class="headerlink" title="选择SAML,并点击Add Resource按钮"></a>选择SAML,并点击<code>Add Resource</code>按钮</h4><p> <img src="https://image.ritboy.com/markdown/202004/c6d1781673fdc5efc7442201ec7d1b6c.jpg" alt="image-20190423100721545"></p>
<h4 id="配置添加SAML信息"><a href="#配置添加SAML信息" class="headerlink" title="配置添加SAML信息"></a>配置添加SAML信息</h4><ul>
<li><p><strong>Name</strong>：自定义</p>
</li>
<li><p><strong>Application Type</strong>: 选择Firebox Access Portal</p>
</li>
<li><p><strong>Service Provider Entity ID</strong> : 粘贴从<code>https://&lt; your Host Name &gt;/auth/saml</code>网页上复制的EntityID</p>
</li>
<li><p><strong>Assertion Consumer Service</strong>：粘贴从<code>https://&lt; your Host Name &gt;/auth/saml</code>网页上复制的Assertion Consumer Service URL</p>
</li>
<li><p><strong>Choose File</strong>：选择从<code>https://&lt; your Host Name &gt;/auth/saml</code>下载的证书</p>
</li>
<li><p>点击<strong>SAVE</strong>按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/0e87c9b03ae3c4db3e24a075de8d4f8c.jpg" alt="image-20190423100846010"></p>
</li>
</ul>
<h3 id="添加Group和User"><a href="#添加Group和User" class="headerlink" title="添加Group和User"></a>添加Group和User</h3><h4 id="添加Group"><a href="#添加Group" class="headerlink" title="添加Group"></a>添加Group</h4><ul>
<li><p>点击Add Group按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/cb0682aefc9389c79ab6342850ade600.jpg" alt="image-20190423103410439"></p>
</li>
<li><p>添加Policy, 选择<code>SAML</code> Resource</p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/13a4710ecc37412287b4bd05a413a2b9.jpg" alt="image-20190423103457822"></p>
<ul>
<li>点击<strong>SAVE</strong>按钮</li>
</ul>
<h4 id="添加User"><a href="#添加User" class="headerlink" title="添加User"></a>添加User</h4><ul>
<li><p>点击Add User按钮<img src="https://image.ritboy.com/markdown/202004/1ce3109e6e35fa63b9950066a87b5a2e.jpg" alt="image-20190423103605963"></p>
</li>
<li><p>配置新用户信息，邮箱地址需要真实用户激活</p>
<p><img src="https://image.ritboy.com/markdown/202004/e717f9cc095b807a629e05128c7950ce.jpg" alt="image-20190423103630457"></p>
</li>
</ul>
<h4 id="激活用户"><a href="#激活用户" class="headerlink" title="激活用户"></a>激活用户</h4><p>使用添加用户的的邮箱，设置密码并用手机App扫邮件中二维码激活该该账户</p>
<h3 id="登录用户"><a href="#登录用户" class="headerlink" title="登录用户"></a>登录用户</h3><ul>
<li>SAML AuthPoint登录地址：http://&lt; firebox ip &gt;</li>
<li>登录界面输入用户</li>
<li>登录界面输入密码</li>
<li>手机App确认登录</li>
</ul>
]]></content>
      <categories>
        <category>WatchGuard</category>
        <category>SAML</category>
      </categories>
      <tags>
        <tag>SAML</tag>
      </tags>
  </entry>
  <entry>
    <title>AuthPoint添加RADIUS</title>
    <url>/articles/1930033449.html</url>
    <content><![CDATA[<h2 id="Windows上安装Gateway"><a href="#Windows上安装Gateway" class="headerlink" title="Windows上安装Gateway"></a>Windows上安装Gateway</h2><h3 id="下载Gateway软件"><a href="#下载Gateway软件" class="headerlink" title="下载Gateway软件"></a>下载Gateway软件</h3><p>下载完成后复制到Gateway的Windows主机上</p>
<p>地址： <a href="https://staging.deu.cloud.watchguard.com/services/auth/general/download" target="_blank" rel="noopener external nofollow noreferrer">https://staging.deu.cloud.watchguard.com/services/auth/general/download</a></p>
<p><img src="https://image.ritboy.com/markdown/202004/f28920efd01d6d0e2142886c772c571b.jpg" alt="image-20190424162937266"></p>
<a id="more"></a>

<h3 id="获取Gateway-Registration-Key"><a href="#获取Gateway-Registration-Key" class="headerlink" title="获取Gateway Registration Key"></a>获取Gateway Registration Key</h3><p><a href="https://www.watchguard.com/help/docs/help-center/en-US/Content/en-US/authpoint/gateway-registration-key.html" target="_blank" rel="noopener external nofollow noreferrer">官网文档</a></p>
<ul>
<li><p>点击添加Gateway</p>
<p><img src="https://image.ritboy.com/markdown/202004/6cc5f8fc71d8c106d32044876baac2bf.jpg" alt="image-20190424163443007"></p>
</li>
<li><p>编辑Gateway界面获取<code>Gateway Registration Key</code>(<strong>激活后不能再看到该Key</strong>)</p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/470b36ea83f26bd47769511c07122f51.jpg" alt="image-20190424163602561"></p>
<h3 id="系统中安装Gateway"><a href="#系统中安装Gateway" class="headerlink" title="系统中安装Gateway"></a>系统中安装Gateway</h3><p>安装时输入<code>Gateway Registration Key</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/334159dc4040d032fa7bd7a36960f50c.jpg" alt="img"></p>
<h2 id="Firebox-Web-UI配置RADIUS"><a href="#Firebox-Web-UI配置RADIUS" class="headerlink" title="Firebox Web UI配置RADIUS"></a>Firebox Web UI配置RADIUS</h2><h3 id="进入到RADIUS编辑界面"><a href="#进入到RADIUS编辑界面" class="headerlink" title="进入到RADIUS编辑界面"></a>进入到RADIUS编辑界面</h3><p><img src="https://image.ritboy.com/markdown/202004/6056757b34b9960c5c852c6ef6107616.jpg" alt="image-20190424164257510"></p>
<h3 id="配置RADIUS信息"><a href="#配置RADIUS信息" class="headerlink" title="配置RADIUS信息"></a>配置RADIUS信息</h3><p><strong>需要打开编辑锁</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/f8b6ee82a30078f91b3805acfc757d26.jpg" alt="image-20190424164434698"></p>
<ul>
<li>打开<code>Enable RADIUS Server</code></li>
<li>IP address: Gateway所在主机的IP地址</li>
<li>Port：1812(默认值)</li>
<li>Share Secret： 自定义</li>
<li>Confirm Secret： 确认<code>Share Secret</code></li>
<li>其余看需求配置</li>
<li>点击<code>SAVE</code>保存配置</li>
</ul>
<h3 id="开启Firebox上4100端口访问"><a href="#开启Firebox上4100端口访问" class="headerlink" title="开启Firebox上4100端口访问"></a>开启Firebox上4100端口访问</h3><ul>
<li>进入到Policies界面</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/2d77a94fd158c12d2e6a02839234637f.jpg" alt="image-20190424164949941"></p>
<ul>
<li>开启访问</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/a5b57515e0ca96f660e414ab8f271355.jpg" alt="image-20190424165029086"></p>
<h2 id="WatchGuard-Cloud-Web-UI配置"><a href="#WatchGuard-Cloud-Web-UI配置" class="headerlink" title="WatchGuard Cloud Web UI配置"></a>WatchGuard Cloud Web UI配置</h2><h3 id="添加RADIUS-Client"><a href="#添加RADIUS-Client" class="headerlink" title="添加RADIUS Client"></a>添加RADIUS Client</h3><h4 id="点击Add-Resource按钮"><a href="#点击Add-Resource按钮" class="headerlink" title="点击Add Resource按钮"></a>点击<code>Add Resource</code>按钮</h4><p><img src="https://image.ritboy.com/markdown/202004/c811d8a8c03ebf119e5875ca318614fc.jpg" alt="image-20190424165305479"></p>
<h4 id="配置RADIUS-Client信息"><a href="#配置RADIUS-Client信息" class="headerlink" title="配置RADIUS Client信息"></a>配置RADIUS Client信息</h4><p><img src="https://image.ritboy.com/markdown/202004/269e630d7972e114182764e840c7cfe1.jpg" alt="image-20190424165351293"></p>
<ul>
<li>Name： 自定义</li>
<li>RADIUS client trusted IP or FQDN：Firebox的IP地址</li>
<li>Shared Secret ：Firebox配置RADIUS时配置的<strong>Secret</strong></li>
<li>点击<code>SAVE</code>按钮保存</li>
</ul>
<h3 id="RADIUS-Client绑定到Gateway"><a href="#RADIUS-Client绑定到Gateway" class="headerlink" title="RADIUS Client绑定到Gateway"></a>RADIUS Client绑定到Gateway</h3><p><img src="https://image.ritboy.com/markdown/202004/be9188fe36b27954488b43778c4b9b9c.jpg" alt="image-20190424165657497"></p>
<ul>
<li>Port： Firebox配置RADIU时配置的端口</li>
<li>Select a RADIUS resource：选择添加的<code>RADIUS Client</code></li>
</ul>
<h3 id="添加Group和User"><a href="#添加Group和User" class="headerlink" title="添加Group和User"></a>添加Group和User</h3><h4 id="添加Group"><a href="#添加Group" class="headerlink" title="添加Group"></a>添加Group</h4><ul>
<li><p>点击Add Group按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/cb0682aefc9389c79ab6342850ade600.jpg" alt="image-20190423103410439"></p>
</li>
<li><p>添加Policy, 选择<code>RADIUS Clicet</code></p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/13a4710ecc37412287b4bd05a413a2b9.jpg" alt="image-20190423103457822"></p>
<ul>
<li>点击<strong>SAVE</strong>按钮</li>
</ul>
<h4 id="添加User"><a href="#添加User" class="headerlink" title="添加User"></a>添加User</h4><ul>
<li><p>点击Add User按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/1ce3109e6e35fa63b9950066a87b5a2e.jpg" alt="image-20190423103605963"></p>
</li>
<li><p>配置新用户信息，邮箱地址需要真实用户激活</p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/e717f9cc095b807a629e05128c7950ce.jpg" alt="image-20190423103630457"></p>
<h4 id="激活用户"><a href="#激活用户" class="headerlink" title="激活用户"></a>激活用户</h4><p>使用添加用户的的邮箱，设置密码并用手机App扫邮件中二维码激活该该账户</p>
<h3 id="登录用户"><a href="#登录用户" class="headerlink" title="登录用户"></a>登录用户</h3><ul>
<li>SAML AuthPoint登录地址：http://&lt; firebox ip &gt;:4100</li>
<li>登录界面输入用户</li>
<li>登录界面输入密码</li>
<li>手机App确认登录</li>
</ul>
]]></content>
      <categories>
        <category>WatchGuard</category>
        <category>RADIUS</category>
      </categories>
      <tags>
        <tag>WatchGuard</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装python虚拟运行环境</title>
    <url>/articles/2139646571.html</url>
    <content><![CDATA[<h4 id="安装PIP"><a href="#安装PIP" class="headerlink" title="安装PIP"></a>安装PIP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray ~]<span class="comment"># yum -y install python-pip</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Virtualenv"><a href="#安装Virtualenv" class="headerlink" title="安装Virtualenv"></a>安装Virtualenv</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray ~]<span class="comment"># pip install virtualenv</span></span><br><span class="line">[root@ray ~]<span class="comment"># virtualenv --version</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="安装新的Python版本"><a href="#安装新的Python版本" class="headerlink" title="安装新的Python版本"></a>安装新的Python版本</h4><ul>
<li><p>安装编译需要的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray ~]<span class="comment"># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载python源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray ~]<span class="comment"># wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray ~]<span class="comment"># tar -xvjf Python-3.6.5.tar.xz</span></span><br><span class="line">[root@ray ~]<span class="comment"># cd Python-3.6.5</span></span><br><span class="line">[root@ray ~]<span class="comment"># ./configure prefix=/usr/local/python3</span></span><br><span class="line">[root@ray ~]<span class="comment"># make &amp; make install</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ray pythonenv]<span class="comment"># virtualenv -p /usr/local/python3/bin/python3.6 python36</span></span><br><span class="line">Running virtualenv with interpreter /usr/<span class="built_in">local</span>/python3/bin/python3.6</span><br><span class="line">Using base prefix <span class="string">'/usr/local/python3'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /pythonenv/python36/bin/python3.6</span><br><span class="line">Also creating executable <span class="keyword">in</span> /pythonenv/python36/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动python</span></span><br><span class="line">[root@ray python36]<span class="comment"># source bin/activate</span></span><br><span class="line">(python36) [root@ray python36]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/blueheart20/article/details/70598031" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/blueheart20/article/details/70598031</a></p>
<p><a href="https://www.cnblogs.com/JahanGu/p/7452527.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/JahanGu/p/7452527.html</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>AuthPoint添加LogonApp</title>
    <url>/articles/3209066549.html</url>
    <content><![CDATA[<h2 id="Windows上安装Gateway"><a href="#Windows上安装Gateway" class="headerlink" title="Windows上安装Gateway"></a>Windows上安装Gateway</h2><h3 id="下载Gateway软件"><a href="#下载Gateway软件" class="headerlink" title="下载Gateway软件"></a>下载Gateway软件</h3><p>下载完成后复制到Gateway的Windows主机上</p>
<p>地址： <a href="https://staging.deu.cloud.watchguard.com/services/auth/general/download" target="_blank" rel="noopener external nofollow noreferrer">https://staging.deu.cloud.watchguard.com/services/auth/general/download</a></p>
<p><img src="https://image.ritboy.com/markdown/202004/f28920efd01d6d0e2142886c772c571b.jpg" alt="image-20190424162937266"></p>
<a id="more"></a>

<h3 id="获取Gateway-Registration-Key"><a href="#获取Gateway-Registration-Key" class="headerlink" title="获取Gateway Registration Key"></a>获取Gateway Registration Key</h3><p><a href="https://www.watchguard.com/help/docs/help-center/en-US/Content/en-US/authpoint/gateway-registration-key.html" target="_blank" rel="noopener external nofollow noreferrer">官网文档</a></p>
<ul>
<li><p>点击添加Gateway</p>
<p><img src="https://image.ritboy.com/markdown/202004/6cc5f8fc71d8c106d32044876baac2bf.jpg" alt="image-20190424163443007"></p>
</li>
<li><p>编辑Gateway界面获取<code>Gateway Registration Key</code>(<strong>激活后不能再看到该Key</strong>)</p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/470b36ea83f26bd47769511c07122f51.jpg" alt="image-20190424163602561"></p>
<h3 id="系统中安装Gateway"><a href="#系统中安装Gateway" class="headerlink" title="系统中安装Gateway"></a>系统中安装Gateway</h3><p>安装时输入<code>Gateway Registration Key</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/334159dc4040d032fa7bd7a36960f50c.jpg" alt="img"></p>
<h2 id="WatchGuard-Cloud-Web-UI-配置"><a href="#WatchGuard-Cloud-Web-UI-配置" class="headerlink" title="WatchGuard Cloud Web UI 配置"></a>WatchGuard Cloud Web UI 配置</h2><h3 id="添加Logon-App-Resource"><a href="#添加Logon-App-Resource" class="headerlink" title="添加Logon App Resource"></a>添加Logon App Resource</h3><h4 id="点击Add-Resource按钮"><a href="#点击Add-Resource按钮" class="headerlink" title="点击Add Resource按钮"></a>点击<code>Add Resource</code>按钮</h4><p><img src="https://image.ritboy.com/markdown/202004/1740b67a4b14b25e695a0a96dd7ee74b.jpg" alt="image-20190428171256818"></p>
<!--more-->

<h4 id="配置Logon-App信息"><a href="#配置Logon-App信息" class="headerlink" title="配置Logon App信息"></a>配置Logon App信息</h4><p><img src="https://image.ritboy.com/markdown/202004/e0408cbd572d5d83cd79505df94647f9.jpg" alt="image-20190428171343817"></p>
<ul>
<li>Name: 自定义</li>
<li>Support Message: 自定义，最后可以在Windows的登录界面上看到</li>
<li>Synchronization Interval (Hour)： 自定义</li>
<li>Remember Password：自定义，可以勾选或者不勾选</li>
</ul>
<h2 id="Logon-App-安装"><a href="#Logon-App-安装" class="headerlink" title="Logon App 安装"></a>Logon App 安装</h2><h3 id="下载Logon-App"><a href="#下载Logon-App" class="headerlink" title="下载Logon App"></a>下载Logon App</h3><p>需要下载<code>INSTALLER</code>和<code>CONFIG</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/8a4ce04fc522a45451f4d3bdd054d86c.jpg" alt="image-20190428172211122"></p>
<h3 id="系统中安装Logon-App"><a href="#系统中安装Logon-App" class="headerlink" title="系统中安装Logon App"></a>系统中安装Logon App</h3><p>把安装程序和配置文件放在同一目录下，运行安装程序。安装完成后由下图提示，重启系统后需要通过AuthPoint来登录(<strong>注意</strong>：系统的本地账户在WatchGuard Cloud有<strong>相同的user</strong>才能登录)</p>
<p> <img src="https://image.ritboy.com/markdown/202004/0b7bdf55abf78e70394dcdbfe9f61060.jpg" alt="image-20190428172856853"></p>
<h2 id="添加Group和User"><a href="#添加Group和User" class="headerlink" title="添加Group和User"></a>添加Group和User</h2><h3 id="添加Group"><a href="#添加Group" class="headerlink" title="添加Group"></a>添加Group</h3><ul>
<li><p>点击Add Group按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/cb0682aefc9389c79ab6342850ade600.jpg" alt="image-20190423103410439"></p>
</li>
<li><p>添加Policy, 选择<code>Logon App</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/13a4710ecc37412287b4bd05a413a2b9.jpg" alt="image-20190423103457822"></p>
</li>
<li><p>点击<strong>SAVE</strong>按钮</p>
</li>
</ul>
<h3 id="本地账户"><a href="#本地账户" class="headerlink" title="本地账户"></a>本地账户</h3><h4 id="Windows系统创建本地账户"><a href="#Windows系统创建本地账户" class="headerlink" title="Windows系统创建本地账户"></a>Windows系统创建本地账户</h4><p>添加步骤请见链接：<a href="https://ibooks.red/2019/04/28/Windows10-add-local-user" target="_blank" rel="noopener external nofollow noreferrer">https://ibooks.red/2019/04/28/Windows10-add-local-user</a></p>
<h4 id="WatchGuard-Cloud添加相同账户"><a href="#WatchGuard-Cloud添加相同账户" class="headerlink" title="WatchGuard Cloud添加相同账户"></a>WatchGuard Cloud添加相同账户</h4><p><strong>注意：</strong>添加时用户名要与Windows系统中添加的名称<strong>一样</strong></p>
<p> <img src="https://image.ritboy.com/markdown/202004/e1f0e79ce3273be99b7b2206240c5103.jpg" alt="image-20190428175347825"></p>
<h4 id="激活用户"><a href="#激活用户" class="headerlink" title="激活用户"></a>激活用户</h4><p>使用添加用户的的邮箱，设置密码并用手机App扫邮件中二维码激活该该账户</p>
<h4 id="登录用户"><a href="#登录用户" class="headerlink" title="登录用户"></a>登录用户</h4><p>在Windows登录界面操作</p>
<ul>
<li>登录界面输入用户</li>
<li>登录界面输入密码</li>
<li>手机App确认登录</li>
</ul>
<h3 id="LDAP用户登录"><a href="#LDAP用户登录" class="headerlink" title="LDAP用户登录"></a>LDAP用户登录</h3><h4 id="添加LDAP服务"><a href="#添加LDAP服务" class="headerlink" title="添加LDAP服务"></a>添加LDAP服务</h4><ul>
<li><p>点击<code>Add External Identity</code>按钮</p>
<p><img src="https://image.ritboy.com/markdown/202004/d34064446e3b624c8b346ed30ea687da.jpg" alt="image-20190429093403093"></p>
</li>
<li><p>配置LDAP服务信息</p>
<ul>
<li>Name: 自定义</li>
<li>LDAP Search Base: 根据LDAP服务器信息配置(比如： dc=jamesad,dc=com)</li>
<li>System Account: LDAP服务器账号(比如： administrator)</li>
<li>Passphrase： system account的的密码</li>
<li>Synchronization interval:  根据需求选择</li>
<li>Domain: LDAP服务器域名</li>
<li>Attribute related to the first name: 根据需求配置，默认值<code>givenName</code></li>
<li>Attribute related to the last name: 根据需求配置，默认值<code>sn</code></li>
<li>Attribute related to the user email: 根据需求配置，默认值<code>mail</code></li>
<li>Main attribute to the LDAP user: 根据需求配置，默认值<code>objectGUID</code></li>
<li>Attribute related to the user login: 根据需求配置，默认值<code>sAMAccountName</code></li>
<li>Attribute related to the mobile number: 根据需求配置，默认值<code>mobile</code></li>
<li>Server Address: LDAP服务器IP地址</li>
<li>Server Port: 根据需求配置，默认值<code>389</code></li>
<li>点击<code>SAVE</code>按钮</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/97a0bbdca733c3c7dfc9411135ae9190.jpg" alt="image-20190429093525927"></p>
</li>
<li><p>LDAP服务绑定到Gateway中</p>
</li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/f3a6754e4c5a4d492aefef9dc69607fa.jpg" alt="image-20190429095020825"></p>
<h4 id="添加Query同步LDAP到LogonApp用户组中"><a href="#添加Query同步LDAP到LogonApp用户组中" class="headerlink" title="添加Query同步LDAP到LogonApp用户组中"></a>添加Query同步LDAP到LogonApp用户组中</h4><p><img src="https://image.ritboy.com/markdown/202004/ca85457e39a822d17d3789e237dbda6b.jpg" alt="image-20190428175830934"></p>
<h4 id="Windows系统中配置Domain"><a href="#Windows系统中配置Domain" class="headerlink" title="Windows系统中配置Domain"></a>Windows系统中配置Domain</h4><ul>
<li>添加DNS：把<code>LDAP</code>服务地址输入到DNS server中</li>
</ul>
<p>​       <img src="https://image.ritboy.com/markdown/202004/3d31873835263e0e5046aba0ebc1ccfa.jpg" alt="image-20190428143554139"></p>
<ul>
<li><p>在系统属性中配置，在<code>Domain</code>中输入LDAP服务中的域名，<strong>注意：</strong>添加时会验证LDAP的用户，即输入LDAP服务器的用户名和密码</p>
<p> <img src="https://image.ritboy.com/markdown/202004/e42ad3360a17638ab6507cf15611b29e.jpg" alt="image-20190428143451835"></p>
</li>
</ul>
<h4 id="激活用户-1"><a href="#激活用户-1" class="headerlink" title="激活用户"></a>激活用户</h4><p>使用添加用户的的邮箱，设置密码并用手机App扫邮件中二维码激活该该账户</p>
<h4 id="登录用户-1"><a href="#登录用户-1" class="headerlink" title="登录用户"></a>登录用户</h4><p>在Windows登录界面操作</p>
<ul>
<li>登录界面输入用户</li>
<li>登录界面输入密码</li>
<li>手机App确认登录</li>
</ul>
]]></content>
      <categories>
        <category>WatchGuard</category>
        <category>LogonApp</category>
      </categories>
      <tags>
        <tag>WatchGuard</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 添加或删除用户</title>
    <url>/articles/292711784.html</url>
    <content><![CDATA[<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ul>
<li><p>root用户，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser &lt;username&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非root用户，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser &lt;username&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<a id="more"></a>



<h4 id="用户添加sudo权限"><a href="#用户添加sudo权限" class="headerlink" title="用户添加sudo权限"></a>用户添加<code>sudo</code>权限</h4><ul>
<li><p>root用户，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpasswd -a &lt;username&gt; wheel</span><br></pre></td></tr></table></figure>
</li>
<li><p>非root用户，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a &lt;username&gt; wheel</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户添加好<code>sudo</code>权限后，命令需要用<code>root</code>权限时需要以下命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo &lt;some_command&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="查看sudo权限的用户"><a href="#查看sudo权限的用户" class="headerlink" title="查看sudo权限的用户"></a>查看<code>sudo</code>权限的用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lid -g wheel</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul>
<li><p>root用户，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">userdel &lt;username&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户，并删除用户的home目录</span></span><br><span class="line">userdel -r &lt;username&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非root用户，需要添加<code>sudo</code></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-a-centos-7-server" target="_blank" rel="noopener external nofollow noreferrer">https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-a-centos-7-server</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos中安装docker-compose</title>
    <url>/articles/819252145.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><a href="https://github.com/docker/compose/releases/" target="_blank" rel="noopener external nofollow noreferrer">官网安装</a></p>
<p>找到需要安装的版本，用curl下载进行安装（以版本<code>1.22.0</code>为例）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>查看版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>用pip来安装，如果没pip命令请先安装pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure>

<p>安装docker-compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install docker-compose</span><br><span class="line"><span class="comment"># 待安装完成后，执行查询版本的命令，即可安装docker-compose</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果用 <code>curl</code>安装的，运行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果用 <code>pip</code>安装的，运行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/gsying1474/article/details/52988784" target="_blank" rel="noopener external nofollow noreferrer">安装docker-compose的两种方式</a></p>
<p><a href="https://docs.docker.com/compose/install/#uninstallation" target="_blank" rel="noopener external nofollow noreferrer">官网文档</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker清理方案</title>
    <url>/articles/3793781524.html</url>
    <content><![CDATA[<h2 id="清理overlay存储"><a href="#清理overlay存储" class="headerlink" title="清理overlay存储"></a>清理overlay存储</h2><p>我们在使用docker的过程中发现基于swarm使用Storage Driver: overlay的方式进行存储.但是发现这个特别占用存储空间.</p>
<h3 id="清理所有停止的容器"><a href="#清理所有停止的容器" class="headerlink" title="清理所有停止的容器"></a>清理所有停止的容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="清理所有不用数据-停止的容器-不使用的volume-不使用的networks-悬挂的镜像"><a href="#清理所有不用数据-停止的容器-不使用的volume-不使用的networks-悬挂的镜像" class="headerlink" title="清理所有不用数据(停止的容器,不使用的volume,不使用的networks,悬挂的镜像)"></a>清理所有不用数据(停止的容器,不使用的volume,不使用的networks,<em>悬挂</em>的镜像)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>

<h3 id="overlay存储"><a href="#overlay存储" class="headerlink" title="overlay存储"></a>overlay存储</h3><p>我们通过上面的操作清除了一些无用的数据,但是,overlay还是特别大.我们先了解下overlay存储.</p>
<h4 id="overlayfs"><a href="#overlayfs" class="headerlink" title="overlayfs"></a>overlayfs</h4><p>集成进了linux 3.18内核.<br> overlay存储驱动主要使用的是overlayfs技术.中文名是叠合式文件系统.多个文件系统可以mount之后进行合并.<br> docker 镜像层  lowerdir<br> docker 容器层  upperdir<br> docker 容器挂载点 merged</p>
<p>这个三个层对应了 overlayFs的结构. 我们通过docker inspect 可以查看到如下结构</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"GraphDriver": &#123;</span><br><span class="line">            "Name": "overlay",</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/mnt/docker/overlay/5eb97eb91bed89a9c879142900419ad118215af05c291989282c130d031d7019/root",</span><br><span class="line">                "MergedDir": "/mnt/docker/overlay/454f70c61de03ce2a517d7e2ea8c19e319a95cd2275d8b826f4244071315e513/merged",</span><br><span class="line">                "UpperDir": "/mnt/docker/overlay/454f70c61de03ce2a517d7e2ea8c19e319a95cd2275d8b826f4244071315e513/upper",</span><br><span class="line">                "WorkDir": "/mnt/docker/overlay/454f70c61de03ce2a517d7e2ea8c19e319a95cd2275d8b826f4244071315e513/work"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p> 镜像在 /root<br> 挂载点在 /merged<br> 容器在 /upper<br> 工作目录 /work</p>
<h4 id="overlayfs数据清理"><a href="#overlayfs数据清理" class="headerlink" title="overlayfs数据清理"></a>overlayfs数据清理</h4><p>我们做了一个实验,我们启动一个容器(版本不同),之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop conatiner</span><br><span class="line">docker rm container</span><br></pre></td></tr></table></figure>

<p>通过对数据大小的监控,我们发现 overlay会随着新镜像的产生而产生一些数据,随着容器的关闭删除,这个文件并没有缩小体积.如何解决呢? 看来我们忽视了一个问题.我们使用 <code>docker system prune</code>以为可以不需要的数据都清理了,但是关于images中是这样描述的” dangling images” 悬挂的镜像 .关于这个词汇我还没有理解.不过通过测试,即使我把容器停止也无法清理镜像,所以,我无法理解 悬挂是怎样的状态.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi images</span><br></pre></td></tr></table></figure>

<p>最后我们通过手动删除镜像,则之前产生的overlay数据就随之减少了.</p>
<h5 id="tips"><a href="#tips" class="headerlink" title="tips:"></a><strong>tips</strong>:</h5><p> 查看overlay 大小 <code>du --max-depth=1 -h</code><br> 查看数量 <code>ls|wc -w</code></p>
<h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>镜像有新版本产生的话,我们可以按照这样的流程操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop container</span><br><span class="line">docker rm container</span><br><span class="line">docker rmi image</span><br><span class="line">docker pull image</span><br><span class="line">docker run ...</span><br></pre></td></tr></table></figure>

<p>这样就避免了系统磁盘一眨眼的时间就满了.</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="docker-时间同步"><a href="#docker-时间同步" class="headerlink" title="docker 时间同步?"></a>docker 时间同步?</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone</span><br></pre></td></tr></table></figure>

<h4 id="docker-存储地方修改"><a href="#docker-存储地方修改" class="headerlink" title="docker 存储地方修改"></a>docker 存储地方修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --graph=<span class="string">"/mnt/data/images"</span></span><br></pre></td></tr></table></figure>



<h2 id="清理容器日志"><a href="#清理容器日志" class="headerlink" title="清理容器日志"></a>清理容器日志</h2><p> docker 用久了 日志一大堆，很占用空间，不用的日志可以清理掉了。<br>docker logs -f container name 噼里啪啦 一大堆，，，，太对，清理掉</p>
<h3 id="第一步日志位置"><a href="#第一步日志位置" class="headerlink" title="第一步日志位置"></a>第一步日志位置</h3><p>找到对应container的日志文件，一般是在 <code>/var/lib/docker/containers/containerid/containerid.log-json.log</code>（<code>containerid</code>是指你的容器id）</p>
<h4 id="找日志位置"><a href="#找日志位置" class="headerlink" title="找日志位置"></a>找日志位置</h4><p>如果找不到，可以模糊查询一下 <code>find / -type f -name &quot;*.log&quot; | xargs grep &quot;ERROR&quot;</code> 找到日志位置(这行命令的意思是从根目录开始查找所有扩展名为.log的文本文件，并找出包含”ERROR”的行，你可把 error 换成你日志中存在的内容，docker logs -f container name 就能看到有什么内容啦)</p>
<h4 id="找容器id"><a href="#找容器id" class="headerlink" title="找容器id"></a>找容器id</h4><p>如果不知道容器id是什么， docker inspect Container name 可以看到容器id</p>
<h3 id="第二步：清理一下"><a href="#第二步：清理一下" class="headerlink" title="第二步：清理一下"></a>第二步：清理一下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt;/var/lib/docker/containers/containerid/&lt;containerid&gt;.<span class="built_in">log</span>-json.log</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker问题收集</title>
    <url>/articles/3779592231.html</url>
    <content><![CDATA[<h3 id="Docker挂载主机目录，访问出现Premission-denied解决办法"><a href="#Docker挂载主机目录，访问出现Premission-denied解决办法" class="headerlink" title="Docker挂载主机目录，访问出现Premission denied解决办法"></a>Docker挂载主机目录，访问出现Premission denied解决办法</h3><ul>
<li>Docker挂载主机目录，访问相应的文件出现Premission denied的权限访问问题:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">docker.io/centos 7.2.1511 686672a1d0cc 5 weeks ago</span><br><span class="line">//将主机上的/soft目录挂载到docker的/soft目录，前面的是主机目录，后面的是docker的目录。</span><br><span class="line">docker run -i -t -v /soft:/soft 686672a1d0cc /bin/bash</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<ul>
<li>挂载后，查看相应的文件出现如下的提示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ba471da26d07 soft]<span class="comment"># ls</span></span><br><span class="line">ls: cannot access jdk-8u102-linux-x64.tar.gz: Permission denied</span><br><span class="line">hadoop-2.7.2.tar.gz jdk-8u102-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>问题原因及解决办法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原因是CentOS7中的安全模块selinux把权限禁掉了，至少有以下三种方式解决挂载的目录没有权限的问题：</span><br><span class="line">1.在运行容器的时候，给容器加特权，及加上 --privileged=<span class="literal">true</span> 参数：</span><br><span class="line">docker run -i -t -v /soft:/soft --privileged=<span class="literal">true</span> 686672a1d0cc /bin/bash</span><br><span class="line">2.临时关闭selinux：</span><br><span class="line">setenforce 0</span><br><span class="line">3.添加selinux规则，改变要挂载的目录的安全性文本</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参考</p>
<p><a href="https://yq.aliyun.com/articles/53990" target="_blank" rel="noopener external nofollow noreferrer">https://yq.aliyun.com/articles/53990</a></p>
<p><a href="http://blog.csdn.net/rznice/article/details/52170085" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/rznice/article/details/52170085</a></p>
</li>
</ul>
<h3 id="修改docker镜像默认下载地址"><a href="#修改docker镜像默认下载地址" class="headerlink" title="修改docker镜像默认下载地址"></a>修改docker镜像默认下载地址</h3><p>在使用docker pull下载镜像的时候，默认是从docker官方维护公有仓库dockerhub上下载,国内用户下载的速度是极慢的。</p>
<p><img src="https://image.ritboy.com/markdown/202004/3556d6f3ab121e877a6db82b9dce6d42.jpg" alt="img"> </p>
<p><img src="https://image.ritboy.com/markdown/202004/428337c1280a926ac770c891132bdb32.jpg" alt="img"> </p>
<p>从这里可以看到默认是从docker官方dockerhub进行下载的。</p>
<p>当然国内也有许多仓库可供使用，下载速度也是很快的，但如果没法连接外网的情况下是极不方便的，我们可以在本地搭建自己的私有仓库。</p>
<p>192.168.26.130这台机器上我已经把私有仓库配置好了，下面就看如何把镜像的默认下载地址改为我们的私有仓库。 </p>
<p>修改一下配置文件/etc/sysconfig/docker:</p>
<p>修改ADD_REGISTRY的值：</p>
<p> <img src="https://image.ritboy.com/markdown/202004/107c542d4ef6327a09ba3d858dfbd892.jpg" alt="img"></p>
<p>然后重启docker，重新下载镜像：</p>
<p> <img src="https://image.ritboy.com/markdown/202004/f64f3409c32d168ed97c4f8cf7493eed.jpg" alt="img"></p>
<p>可以看到此时是从我们指定的仓库下载了。</p>
<h3 id="配置了—restart-always的容器停止"><a href="#配置了—restart-always的容器停止" class="headerlink" title="配置了—restart=always的容器停止"></a>配置了—restart=always的容器停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">docker service rm &lt;service-id&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/moby/moby/issues/10032" target="_blank" rel="noopener external nofollow noreferrer">Github对应问题链接</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git出现换行符报错(CRLT和LF)</title>
    <url>/articles/587466736.html</url>
    <content><![CDATA[<h3 id="问题出现原因"><a href="#问题出现原因" class="headerlink" title="问题出现原因"></a>问题出现原因</h3><p>不同的操作系统(Windows和Linux)，所以换行符的差异会让 Git 认为文件的内容发生了变化。Windows下换行符为<code>CRLF</code>, Linux／Unix／Mac 系统换行符为<code>LF</code></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>修改Git配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.filemode <span class="literal">false</span></span><br><span class="line">git config core.eol lf</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol>
<li>在 Windows 系统下，安装 Git 时应当置选项 <code>core.autocrlf</code> 为 <code>true</code>，也就是下图所示的那一个：<br><img src="https://image.ritboy.com/markdown/202004/21174c749c17d2f6a42be0f34cd3e088.jpg" alt="请输入图片描述"></li>
<li>在 Linux／Unix／Mac 系统下，一般来说保持默认设置就好了（没有安装界面供选择）。当然你可以手工编辑 <code>~/.gitconfig</code> 设 <code>core.autocrlf</code> 为 <code>input</code>，如我机器上的设置：<br><img src="https://image.ritboy.com/markdown/202004/047550c14cc09fcdfe5d4dd53b00a34b.jpg" alt="请输入图片描述"></li>
</ol>
<p>以上两种设置最终的结果就是提交的时候 Git 总是将换行符自动转为 <code>LF</code>，并且在 Windows 下 <code>checkout</code> 回来时自动帮你转换为 <code>CRLF</code>，以便适应 Windows 下的编辑器。</p>
<p>如果你做了上述设置依然会碰到题目中描述的问题，那么不用想，一定是你的团队中另外有别的成员没有做对以上两点的设置（很大的可能性是使用 Windows 的），你们可以逐一排查。</p>
<p>另外，安装 Windows Git 时另外一个设置也比较让人费解，建议选下图这样的：</p>
<p> <img src="https://image.ritboy.com/markdown/202004/3d18ee248fc8a0b61067fedd05b29e72.jpg" alt="请输入图片描述"></p>
<p>选择这种，所需要的配置量最少，CLI 和 Linux 的兼容性也比较高，唯一的缺陷就是 Windows CLI 里和 Linux 重名的命令会被 Linux 版本覆盖掉，比如 <code>find</code> 之类的。在我看来，反正 Windows CLI 是个渣渣，覆盖了也无所谓了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/q/1010000000518769" target="_blank" rel="noopener external nofollow noreferrer">https://segmentfault.com/q/1010000000518769</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Scratch镜像中运行Golang程序</title>
    <url>/articles/3965848720.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一次使用scratch镜像运行Golang程序的build镜像过程以及问题解决。scratch镜像来运行Golang能大大缩减Docker镜像的大小。</p>
<h1 id="DEMO代码"><a href="#DEMO代码" class="headerlink" title="DEMO代码"></a>DEMO代码</h1><p>网上复制的一段Golang代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># filename: main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">	check(err)</span><br><span class="line">	body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">	check(err)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h1><p>Docker官方提供了Golang各版本的镜像： <a href="https://hub.docker.com/_/golang/" target="_blank" rel="noopener external nofollow noreferrer">Official Repository - golang</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filename: Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> golang:alpine as builder</span><br><span class="line"><span class="keyword">ARG</span> GOOS=linux</span><br><span class="line"><span class="keyword">ARG</span> GOARCH=amd64</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /build</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /build/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set necessary environmet variables needed for our image</span></span><br><span class="line"><span class="keyword">ENV</span> GOPROXY=https://goproxy.io \</span><br><span class="line">    CGO_ENABLED=<span class="number">0</span> \</span><br><span class="line">    GOOS=$GOOS \</span><br><span class="line">    GOARCH=$GOARCH</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o <span class="variable">$software</span> .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/main /main</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /images</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/main"</span>]</span></span><br></pre></td></tr></table></figure>

<p>运行命令生成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t demo-goland .</span><br></pre></td></tr></table></figure>



<p>Dockerfile中一些注解：</p>
<ul>
<li><p>GOPROXY：加上后使过来编译时下载依赖包更容易</p>
</li>
<li><p>CGO_ENABLED：CGO_ENABLED=0的情况下，Go采用纯静态编译减少对外部动态链接库依赖。</p>
<p>相关资料：<a href="https://johng.cn/cgo-enabled-affect-go-static-compile/" target="_blank" rel="noopener external nofollow noreferrer">CGO_ENABLED环境变量对Go静态编译机制的影响</a></p>
</li>
<li><p>GOOS 和 GOARCH：运行的系统平台与架构，Docker中运行Golang请配置<code>GOOS=linux</code>。</p>
<p>相关资料：<a href="https://studygolang.com/articles/16633" target="_blank" rel="noopener external nofollow noreferrer">Go跨平台编译</a></p>
</li>
</ul>
<h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><h3 id="standard-init-linux-go-207-exec-user-process-caused-“no-such-file-or-directory”"><a href="#standard-init-linux-go-207-exec-user-process-caused-“no-such-file-or-directory”" class="headerlink" title="standard_init_linux.go:207: exec user process caused “no such file or directory”"></a>standard_init_linux.go:207: exec user process caused “no such file or directory”</h3><p>Golang编译后生成的执行文件有依赖外部链接库，在编译的时候加上环境变量<code>CGO_ENABLED=0</code>即可解决。</p>
<p>相关参考：<a href="https://stackoverflow.com/questions/55106186/no-such-file-or-directory-with-docker-scratch-image" target="_blank" rel="noopener external nofollow noreferrer">“no such file or directory” with docker scratch image</a></p>
<p>​                   <a href="https://github.com/eddycjy/go-gin-example/issues/90" target="_blank" rel="noopener external nofollow noreferrer">基于 scratch 镜像构建 docker 镜像报错 </a></p>
<h3 id="x509-certificate-signed-by-unknown-authority"><a href="#x509-certificate-signed-by-unknown-authority" class="headerlink" title="x509: certificate signed by unknown authority"></a>x509: certificate signed by unknown authority</h3><p>这是一个非常常见的问题：为了进行SSL请求，我们需要SSL根证书。然后scratch镜像是个空镜像，故需要下载证书添加到镜像中。</p>
<p>首先从网站<code>https://curl.haxx.se/ca/cacert.pem</code>下载证书，在Dockerfile中添加到目录<strong>/etc/ssl/certs/cacert.pem</strong> (PS: 根据操作系统，这些证书可以在许多不同的地方)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line">.....</span><br><span class="line">ADD cacert.pem &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 操作</title>
    <url>/articles/3342490105.html</url>
    <content><![CDATA[<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><ul>
<li><p>查看所有分支，找到要删除的分支名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li>
<li><p>运行命令删除远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;branch name&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><p>  <a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener external nofollow noreferrer">参考</a></p>
<ul>
<li><p>通过<code>git submodule add</code>将外部项目加为子模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule add git://github.com/chneukirchen/rack.git rack</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/subtest/rack/.git/</span><br><span class="line">remote: Counting objects: 3181, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1534/1534), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3181 (delta 1951), reused 2623 (delta 1603)</span><br><span class="line">Receiving objects: 100% (3181/3181), 675.42 KiB | 422 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (1951/1951), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆一个带子模块的项目</p>
<p>这里你将克隆一个带子模块的项目。当你接收到这样一个项目，你将得到了包含子项目的目录，但里面没有文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/myproject.git</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/myproject/.git/</span><br><span class="line">remote: Counting objects: 6, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> myproject</span><br><span class="line">$ ls -l</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 schacon  admin   3 Apr  9 09:11 README</span><br><span class="line">drwxr-xr-x  2 schacon  admin  68 Apr  9 09:11 rack</span><br><span class="line">$ ls rack/</span><br></pre></td></tr></table></figure>

<p><code>rack</code>目录存在了，但是是空的。你必须运行两个命令：<code>git submodule init</code>来初始化你的本地配置文件，<code>git submodule update</code>来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule init</span><br><span class="line">Submodule <span class="string">'rack'</span> (git://github.com/chneukirchen/rack.git) registered <span class="keyword">for</span> path <span class="string">'rack'</span></span><br><span class="line">$ git submodule update</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/myproject/rack/.git/</span><br><span class="line">remote: Counting objects: 3181, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1534/1534), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3181 (delta 1951), reused 2623 (delta 1603)</span><br><span class="line">Receiving objects: 100% (3181/3181), 675.42 KiB | 173 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (1951/1951), <span class="keyword">done</span>.</span><br><span class="line">Submodule path <span class="string">'rack'</span>: checked out <span class="string">'08d709f78b8c5b0fbeb7821e37fa53e69afcf433'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="本地代码推送到远程仓库"><a href="#本地代码推送到远程仓库" class="headerlink" title="本地代码推送到远程仓库"></a>本地代码推送到远程仓库</h3><p>参考：<a href="https://blog.csdn.net/yl_cc/article/details/72676538" target="_blank" rel="noopener external nofollow noreferrer">Git如何把本地代码推送到远程仓库</a></p>
<ul>
<li><p>初始本地文件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init   // 初始化版本库</span><br><span class="line">git commit -am <span class="string">"first commit"</span> // 把添加的文件提交到版本库，并填写提交备注</span><br></pre></td></tr></table></figure>
</li>
<li><p>到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，要提交到就远程代码服务器，进行以下两步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 你的远程库地址  // 把本地库与远程库关联+</span><br><span class="line">git push -u origin master    // 第一次推送时</span><br><span class="line">git push origin master  // 第一次推送后，直接使用该命令即可推送修改</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo在不同终端同步</title>
    <url>/articles/4169259295.html</url>
    <content><![CDATA[<h3 id="在hexo的目录下初始化github"><a href="#在hexo的目录下初始化github" class="headerlink" title="在hexo的目录下初始化github"></a>在hexo的目录下初始化github</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init  //初始化本地仓库</span><br></pre></td></tr></table></figure>
<h3 id="在-gitignore文件中添加忽略的文件和文件夹"><a href="#在-gitignore文件中添加忽略的文件和文件夹" class="headerlink" title="在.gitignore文件中添加忽略的文件和文件夹"></a>在<code>.gitignore</code>文件中添加忽略的文件和文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat .gitignore</span><br><span class="line">node_modules</span><br><span class="line">debug.log</span><br><span class="line">db.json</span><br><span class="line">package-lock.json</span><br><span class="line">public</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="push到GitHub"><a href="#push到GitHub" class="headerlink" title="push到GitHub"></a>push到GitHub</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Blog Source Hexo"</span></span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git  //将本地与Github项目对接</span><br></pre></td></tr></table></figure>



<h3 id="其他终端clone，安装npm的modules，生成blog"><a href="#其他终端clone，安装npm的modules，生成blog" class="headerlink" title="其他终端clone，安装npm的modules，生成blog"></a>其他终端clone，安装npm的modules，生成blog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:yourname/yourname.github.io.git //将Github中hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line"><span class="built_in">cd</span>  yourname.github.io  //切换到刚刚<span class="built_in">clone</span>的文件夹内</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内可以安装cnpm，然后使用cnpm install安装依赖包</span></span><br><span class="line"><span class="comment"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line">npm install    //注意，这里一定要切换到刚刚<span class="built_in">clone</span>的文件夹内执行，安装必要的所需组件，不用再init</span><br><span class="line">hexo d -g   //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener external nofollow noreferrer">如何解决github+Hexo的博客多终端同步问题</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git中.gitignore文件的使用</title>
    <url>/articles/116146055.html</url>
    <content><![CDATA[<h2 id="gitignore工作原理"><a href="#gitignore工作原理" class="headerlink" title="gitignore工作原理"></a>gitignore工作原理</h2><p>当你对文件进行源代码管理时，<code>gitignore</code>插件会去查找当前编辑文件的目录或者其祖先目录中是否存在<code>.gitignore</code>配置文件。 如果存在，则<code>.gitignore</code>配置文件中对应配置的规则会生效，忽略对应的文件</p>
<h2 id="如何使用gitignore"><a href="#如何使用gitignore" class="headerlink" title="如何使用gitignore"></a>如何使用gitignore</h2><p>gitignore使用起来非常的方便</p>
<ul>
<li><p>在项目根目录创建一个<code>.gitignore</code>的文件</p>
</li>
<li><p>在这个文件中定义需要忽略的文件</p>
</li>
<li><p>给IDE安装gitignore插件</p>
</li>
<li><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener external nofollow noreferrer">.gitignore文件模板</a></p>
</li>
<li><p><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener external nofollow noreferrer">官方文档</a></p>
<a id="more"></a>

</li>
</ul>
<h2 id="gitignore配置语法"><a href="#gitignore配置语法" class="headerlink" title="gitignore配置语法"></a>gitignore配置语法</h2><ul>
<li>以斜杠<code>/</code>开头表示目录</li>
<li>以星号<code>*</code>通配多个字符</li>
<li>以问号<code>?</code>通配单个字符</li>
<li>以方括号<code>[]</code>包含单个字符的匹配列表</li>
<li>以叹号<code>!</code>表示不忽略(跟踪)匹配到的文件或目录</li>
<li>以二个星号<code>**</code>开头表示匹配所有目录</li>
<li>以二个星号<code>/**</code>结尾表示匹配目录里的所有</li>
<li>以斜杠中间的二个星号<code>/**/</code>表示0或多个目录</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol>
<li><p>规则：<code>fd1/*</code></p>
<p>说明：忽略目录 <code>fd1</code> 下的全部内容；注意，不管是根目录下的 <code>/fd1/</code> 目录，还是某个子目录 <code>/child/fd1/</code> 目录，都会被忽略；</p>
</li>
<li><p>规则：<code>/fd1/*</code> 　　　　<br>说明：忽略根目录下的 <code>/fd1/</code> 目录的全部内容；</p>
</li>
<li><p>规则：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!/foo</span><br><span class="line">!/foo/bar</span><br></pre></td></tr></table></figure>

<p>说明：忽略全部内容，但是不忽略 <code>.gitignore</code> 文件、根目录下的 <code>/foo</code> 和 <code>/foo/bar</code>目录</p>
</li>
<li><p>忽略指定文件/目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 忽略指定文件</span></span><br><span class="line">HelloWrold.class</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略指定文件夹</span></span><br><span class="line">bin/</span><br><span class="line">bin/gen/</span><br></pre></td></tr></table></figure>
</li>
<li><p>通配符忽略规则</p>
<p>通配符规则如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 忽略.class的所有文件</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略名称中末尾为ignore的文件夹</span></span><br><span class="line">*ignore/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略名称中间包含ignore的文件夹</span></span><br><span class="line">*ignore*/s</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="查看gitignore规则"><a href="#查看gitignore规则" class="headerlink" title="查看gitignore规则"></a>查看gitignore规则</h2><p>   如果你发下<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v HelloWorld.class</span><br><span class="line">.gitignore:1:*.class    HelloWorld.class</span><br></pre></td></tr></table></figure>

<p>   可以看到<code>HelloWorld.class</code>匹配到了我们的第一条<code>*.class</code>的忽略规则所以文件被忽略了。</p>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p>要忽略已存在的文件或路径时，如果此时代码仓库已存在该路径或文件，需要先移除本地的路径或文件，然后执行如下代码，最后再push到仓库：</p>
<ul>
<li>如果要移除路径 dir</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached -r dir/</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要移除文件 doc.txt</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached -r doc.txt</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/a09a9b40ad20" target="_blank" rel="noopener external nofollow noreferrer">Git忽略文件.gitignore的使用</a></p>
<p><a href="https://juejin.im/post/5b4a4cd5e51d4519520e5775" target="_blank" rel="noopener external nofollow noreferrer">代码管理工具Git的使用–gitignore</a></p>
<p><a href="gitignore使用小记">gitignore使用小记</a>    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
<p>​    </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Travis CI自动部署hexo博客</title>
    <url>/articles/4283262726.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://travis-ci.com" target="_blank" rel="noopener external nofollow noreferrer">Travis CI</a>中进行持续集成，自动把hexo博客的源码生成静态网页，记录一下自己配置过程。持续集成后只需每次提交文章的markdown文件到博客仓库，就会自动生成静态网页，然后更新网站。</p>
<h2 id="代码仓库添加Token"><a href="#代码仓库添加Token" class="headerlink" title="代码仓库添加Token"></a>代码仓库添加Token</h2><h3 id="Github添加Token"><a href="#Github添加Token" class="headerlink" title="Github添加Token"></a>Github添加Token</h3><p>登录<a href="https://github.com" target="_blank" rel="noopener external nofollow noreferrer">Github</a>打开个人设置，选择<code>Developer settings</code> 并在<code>Personal acces tokens</code>中点击<code>Generate new token</code>生成<code>Travis-ci TOKEN</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/e0e352ff450de08d72d003b501166fe5.jpg" alt="image-20200421213522559"></p>
<a id="more"></a>

<p>在<code>New personal access token</code>界面配置token的作用域，如图选择第一个<code>repo</code>能PUSH和PULL代码，其余的如果需要自行斟酌。</p>
<p>  <img src="https://image.ritboy.com/markdown/202004/52691566eb6ce813572c1b48018e407f.jpg" alt="image-20200421214124737"></p>
<p>把生成的TOKEN复制保存，然后在<code>Travis CI</code>中对应的仓库添加。<strong>注意</strong>：token一次性的，如果刷新页面只能重新再次添加。</p>
<p><img src="https://image.ritboy.com/markdown/202004/2857ba65ec0e902993f2bd236a0169c6.jpg" alt="image-20200421214641334"></p>
<h3 id="Coding中添加Token"><a href="#Coding中添加Token" class="headerlink" title="Coding中添加Token"></a>Coding中添加Token</h3><p>登录<a href="https://coding.net" target="_blank" rel="noopener external nofollow noreferrer">Coding</a>打开个人设置，在<code>访问令牌</code>中选择<code>新建令牌</code>。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/391162ef6164a62a02101d3445c78851.jpg" alt="image-20200421215022580"></p>
<p>在新建令牌界面配置好里面名称后，选择图中第一项即可，其余的如果需要自行斟酌。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/ef34348ca915a2187695d184c567646c.jpg" alt="image-20200421221028615"></p>
<p>创建token成功后，请复制保存好<code>Token</code>和<code>令牌用户名</code>，如图所示。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/63a04f88b0e812104d574bf5c26b4479.jpg" alt="image-20200421221240239"></p>
<h3 id="在Travis的仓库设置中添加获取的Token"><a href="#在Travis的仓库设置中添加获取的Token" class="headerlink" title="在Travis的仓库设置中添加获取的Token"></a>在Travis的仓库设置中添加获取的Token</h3><p>在界面上分别添加<code>CODING_TOKEN</code>，<code>CODING_USER</code>，<code>GITHUB_TOKEN</code>。<strong>注意</strong>：请把<code>DISPLAY VALUE IN BUILD LOG</code>禁掉防止TOKEN泄露，如图所示。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/e317bf196cf94d8919536c9293cd83ae.jpg" alt="image-20200421221657537"></p>
<h2 id="编写-travis-yml文件"><a href="#编写-travis-yml文件" class="headerlink" title="编写.travis.yml文件"></a>编写.travis.yml文件</h2><p>在所有的准备工作完成后就是要定制我们自动构建部署的工作流程了。Travis CI 通过仓库根目录下的 <code>.travis.yml</code> 文件来定制工作流程。</p>
<h3 id="另建一个仓库给Travis使用"><a href="#另建一个仓库给Travis使用" class="headerlink" title="另建一个仓库给Travis使用"></a>另建一个仓库给Travis使用</h3><p>Travis上开源的仓库是免费的，私有的仓库有使用次数（好像是100次吧）。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/dd1346b3481890dc7cf2032f585548ae.jpg" alt="image-20200421225857293"></p>
<p>自己的博客源码和主题在Github上为私有仓库，所以单独创建了个仓库给Travis使用。并且把这个仓库作为博客源码的子模块。目录结构如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">│</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">│</span> <span class="string">.gitignore</span></span><br><span class="line"><span class="string">│</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">│</span> <span class="string">git-push.sh</span></span><br><span class="line"><span class="string">├─scaffolds</span></span><br><span class="line"><span class="string">│</span>      <span class="string">draft.md</span></span><br><span class="line"><span class="string">│</span>      <span class="string">page.md</span></span><br><span class="line"><span class="string">│</span>      <span class="string">post.md</span></span><br><span class="line"><span class="string">├─source</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├─xxxxxx</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├─xxxxxx</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└─_posts</span></span><br><span class="line"><span class="string">│</span>      <span class="string">├─xxxxxx</span></span><br><span class="line"><span class="string">│</span>      <span class="string">└─xxxxxx</span>       </span><br><span class="line"><span class="string">├─travis</span>		<span class="comment"># 子模块</span></span><br><span class="line"><span class="string">│</span>	  <span class="string">├─.travis.yml</span></span><br><span class="line"><span class="string">│</span></span><br><span class="line"><span class="string">└─themes</span></span><br><span class="line">    <span class="string">└─xxxxxx</span></span><br></pre></td></tr></table></figure>



<p>编写了个简单的<code>PUSH</code>脚本，使得博客源码仓库更新同时更新Travis的仓库。有文章更新时运行该脚本即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">commit=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># blog code push</span></span><br><span class="line"><span class="comment">#curdate=`date '+%Y%m%d-%H:%M:%S'`</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"blog code repository push"</span></span><br><span class="line">blog_branch=`git symbolic-ref --short -q HEAD`</span><br><span class="line">git status</span><br><span class="line">sleep 1</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"<span class="variable">$commit</span>"</span></span><br><span class="line">git push origin <span class="variable">$blog_branch</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交 travis 模块</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"travis repository push"</span></span><br><span class="line"><span class="built_in">cd</span> travis</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"set blog branch to .travis.yml"</span></span><br><span class="line"><span class="comment"># macOS sed</span></span><br><span class="line">sed -i <span class="string">""</span> -e <span class="string">"s#- BLOG_CODE_BRANCH=.*#- BLOG_CODE_BRANCH=<span class="variable">$blog_branch</span>#g"</span> .travis.yml</span><br><span class="line"><span class="comment"># linux sed</span></span><br><span class="line"><span class="comment">#sed -i "s#- BLOG_CODE_BRANCH=.*#- BLOG_CODE_BRANCH=$blog_branch#g" .travis.yml</span></span><br><span class="line"></span><br><span class="line">curdate=`date <span class="string">'+%Y%m%d-%H:%M:%S'</span>`</span><br><span class="line">git checkout master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$commit</span> <span class="variable">$curdate</span>"</span> &gt; commit-blog.txt</span><br><span class="line">git status</span><br><span class="line">sleep 1</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"<span class="variable">$commit</span>"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>



<h3 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h3><p>以下为目前自己所使用的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">lts/*</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">BLOG_CODE_DIR=blog-code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">BLOG_CODE_BRANCH=ritboy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时不能用，因为使用缓存后git博客代码时$&#123;BLOG_CODE_DIR&#125;目录不为空</span></span><br><span class="line"><span class="comment">#cache: </span></span><br><span class="line"><span class="comment">#  directories:</span></span><br><span class="line"><span class="comment">#   - $&#123;BLOG_CODE_DIR&#125;/node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="comment"># Git Config</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"ritboy"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"ritboylei@gmail.com"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># clone blog code</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/blog-code-ritboy.git</span> <span class="string">$&#123;BLOG_CODE_DIR&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./$&#123;BLOG_CODE_DIR&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">$&#123;BLOG_CODE_BRANCH&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s#https://github.com/ritboylei/ritboylei.github.io.git#https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/ritboylei.github.io.git#g"</span> <span class="string">_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s#https://e.coding.net/ritboy/blog.git#https://$&#123;CODING_USER&#125;:$&#123;CODING_TOKEN&#125;@e.coding.net/ritboy/blog.git#g"</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Restore last modified time</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Submodules</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/hexo-theme-ritboy.git</span> <span class="string">themes/ritboy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Deploy history</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">--branch=master</span> <span class="string">--single-branch</span> <span class="string">https://github.com/ritboylei/ritboylei.github.io.git</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure>



<h3 id="解读下配置文件"><a href="#解读下配置文件" class="headerlink" title="解读下配置文件"></a>解读下配置文件</h3><p><a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs" target="_blank" rel="noopener external nofollow noreferrer">travis官网Node.js配置</a>，首先需要确定部署环境，Hexo 是基于 nodejs 的。</p>
<ul>
<li><code>node</code> 最新稳定的Node.js版本 （可能运行报错）</li>
<li><code>lts/*</code>最新长期维护Node.js版本 （<strong>建议版本</strong>）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">lts/*</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span></span><br></pre></td></tr></table></figure>



<p>然后我们设置一下时区以便 hexo 能正确根据时间生成文件名/文件目录，同时也方便我们后面在 commit 信息中记录更新时间。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">submodules:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p><code>travis.com</code> 还提供了 <code>cache</code> 参数可以对特定目录进行缓存，我们可以缓存<code>node_modules</code>目录，网上说是能加快后续构建的速度。<strong>暂未使用</strong>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂时不能用，因为使用缓存后git博客代码时$&#123;BLOG_CODE_DIR&#125;目录不为空</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br></pre></td></tr></table></figure>



<p>由于本人的博客源码使用了git的子模块，需要配置下git否则构建时会报错。是因为子模块的的仓库是私有的，么有权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">submodules:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>获取博客源码，在这里我们通过如下格式的 url 访问来保证对仓库有操作权：<code>https://your-gitHub-personal-access-token@your-repo-url</code>。由于我们前面把 <code>GitHub Personal Access Token/Coding Token</code> 和 <code>GitHub Pages/Coding</code> 仓库链接都写进了环境变量，所以直接通过环境变量引用就行了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="comment"># Git Config，git push会有用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"ritboy"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"ritboylei@gmail.com"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># clone blog code，clone ritboy分支</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/blog-code-ritboy.git</span> <span class="string">$&#123;BLOG_CODE_DIR&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./$&#123;BLOG_CODE_DIR&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">$&#123;BLOG_CODE_BRANCH&#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 替换主站配置文件中github的URL，为push做准备</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s#https://github.com/ritboylei/ritboylei.github.io.git#https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/ritboylei.github.io.git#g"</span> <span class="string">_config.yml</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 替换主站配置文件中coding的URL，为push做准备</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s#https://e.coding.net/ritboy/blog.git#https://$&#123;CODING_USER&#125;:$&#123;CODING_TOKEN&#125;@e.coding.net/ritboy/blog.git#g"</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Restore last modified time，博客中文章更新改为git仓库中最后提交时间</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Submodules，主题代码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;GITHUB_TOKEN&#125;@github.com/ritboylei/hexo-theme-ritboy.git</span> <span class="string">themes/ritboy</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Deploy history 保留生成静态博客的commit历史</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">--branch=master</span> <span class="string">--single-branch</span> <span class="string">https://github.com/ritboylei/ritboylei.github.io.git</span> <span class="string">.deploy_git</span></span><br></pre></td></tr></table></figure>



<p>最后安装博客所需要的<code>npm</code>包，并通过<code>hexo</code>命令部署到Github和Coding仓库。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure>



<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>将上面所有的东西配置好之后 <code>git push</code> 一下就可以在你用的 Travis CI 网站上看到 build 过程啦。若无意外，稍等一会儿就能看到绿色的<code>build passing</code>图标，博客内容也成功更新啦。</p>
<p>在Travis CI的build界面可以点击绿色的<code>build passing</code>图标获取链接，然后倒入自己的博客或者git仓库中。</p>
<p> <img src="https://image.ritboy.com/markdown/202004/b97fb3f7fe98f473b9ca622bea6a46a9.jpg" alt="image-20200421224108481"></p>
<h2 id="曾遇到的问题"><a href="#曾遇到的问题" class="headerlink" title="曾遇到的问题"></a>曾遇到的问题</h2><h3 id="运行hexo-d时报错"><a href="#运行hexo-d时报错" class="headerlink" title="运行hexo d时报错"></a>运行<code>hexo d</code>时报错</h3><p>出现<code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code>，可能是最新的node_js版本问题，在<code>Travis</code>的配置文件中把node_js的版本改为<code>lts/*</code></p>
<p> <img src="https://image.ritboy.com/markdown/202004/e7e05a6f13577d36951975b556345d35.jpg" alt="image-20200422223200056"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://theme-next.org/docs/getting-started/deployment" target="_blank" rel="noopener external nofollow noreferrer">https://theme-next.org/docs/getting-started/deployment</a></p>
<p><a href="https://xirikm.net/2019/826-2" target="_blank" rel="noopener external nofollow noreferrer">https://xirikm.net/2019/826-2</a></p>
<p><a href="https://liyangzone.com/2020/01/16/deploy-hexo-blog-with-travis-ci/" target="_blank" rel="noopener external nofollow noreferrer">https://liyangzone.com/2020/01/16/deploy-hexo-blog-with-travis-ci/</a></p>
<p><a href="https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html" target="_blank" rel="noopener external nofollow noreferrer">https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html</a></p>
<p><a href="https://michael728.github.io/2019/06/16/cicd-hexo-blog-travis/" target="_blank" rel="noopener external nofollow noreferrer">https://michael728.github.io/2019/06/16/cicd-hexo-blog-travis/</a></p>
<p><a href="https://maologue.com/Auto-deploy-Hexo-with-Travis-CI/" target="_blank" rel="noopener external nofollow noreferrer">https://maologue.com/Auto-deploy-Hexo-with-Travis-CI/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Travis</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7中用kubeadm安装Kubernetes</title>
    <url>/articles/3827057181.html</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>每个节点均要执行以下步骤</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>如果各个主机启用了防火墙，需要开放Kubernetes各个组件所需要的端口，可以查看<a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">Installing kubeadm</a>中的”Check required ports”一节。 这里简单起见在各节点禁用防火墙：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="禁用SELINUX"><a href="#禁用SELINUX" class="headerlink" title="禁用SELINUX"></a>禁用SELINUX</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时禁用</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 永久禁用 </span><br><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config	# 或者修改&#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure>

<h3 id="修改k8s-conf文件"><a href="#修改k8s-conf文件" class="headerlink" title="修改k8s.conf文件"></a>修改k8s.conf文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>

<h3 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时关闭</span><br><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>

<p>修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载（永久关闭swap，重启后生效）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释掉以下字段</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;cl-swap     swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>



<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="卸载老版本的Docker"><a href="#卸载老版本的Docker" class="headerlink" title="卸载老版本的Docker"></a>卸载老版本的Docker</h3><p>如果有没有老版本Docker，则不需要这步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-selinux \</span><br><span class="line">           docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="使用yum进行安装"><a href="#使用yum进行安装" class="headerlink" title="使用yum进行安装"></a>使用yum进行安装</h3><p>每个节点均要安装，目前官网建议安装17.03版本的docker，<a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">官网链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce docker-ce-selinux</span><br><span class="line"># 注意：</span><br><span class="line"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span><br><span class="line"># vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br><span class="line">#   将 [docker-ce-test] 下方的 enabled&#x3D;0 修改为 enabled&#x3D;1</span><br><span class="line">#</span><br><span class="line"># 安装指定版本的Docker-CE:</span><br><span class="line"># Step 3.1: 查找Docker-CE的版本:</span><br><span class="line"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">#   Loading mirror speeds from cached hostfile</span><br><span class="line">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   Available Packages</span><br><span class="line"># Step 3.2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span><br><span class="line">sudo yum -y --setopt&#x3D;obsoletes&#x3D;0 install docker-ce-[VERSION] \</span><br><span class="line">docker-ce-selinux-[VERSION]</span><br><span class="line"></span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="docker安装问题小结"><a href="#docker安装问题小结" class="headerlink" title="docker安装问题小结"></a>docker安装问题小结</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: Package: docker-ce-17.03.2.ce-1.el7.centos.x86_64 (docker-ce-stable)</span><br><span class="line">           Requires: docker-ce-selinux &gt;&#x3D; 17.03.2.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.0.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.1.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.2.ce-1.el7.centos</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure>

<p>解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 要先安装docker-ce-selinux-17.03.2.ce，否则安装docker-ce会报错</span><br><span class="line"># 注意docker-ce-selinux的版本 要与docker的版本一直</span><br><span class="line">yum install -y https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">yum -y install https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<p><a href="https://blog.csdn.net/csdn_duomaomao/article/details/79019764" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/csdn_duomaomao/article/details/79019764</a></p>
<h3 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.2-ce</span><br><span class="line"> API version:  1.27</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   f5ec1e2</span><br><span class="line"> Built:        Tue Jun 27 02:21:36 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.2-ce</span><br><span class="line"> API version:  1.27 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   f5ec1e2</span><br><span class="line"> Built:        Tue Jun 27 02:21:36 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://yq.aliyun.com/articles/110806" target="_blank" rel="noopener external nofollow noreferrer">https://yq.aliyun.com/articles/110806</a></p>
<h2 id="安装kubeadm，kubelet，kubectl"><a href="#安装kubeadm，kubelet，kubectl" class="headerlink" title="安装kubeadm，kubelet，kubectl"></a>安装kubeadm，kubelet，kubectl</h2><p>在各节点安装kubeadm，kubelet，kubectl</p>
<h3 id="修改yum安装源"><a href="#修改yum安装源" class="headerlink" title="修改yum安装源"></a>修改yum安装源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<h2 id="初始化Master节点"><a href="#初始化Master节点" class="headerlink" title="初始化Master节点"></a>初始化Master节点</h2><h3 id="配置kubeadm-init-初始化文件"><a href="#配置kubeadm-init-初始化文件" class="headerlink" title="配置kubeadm init 初始化文件"></a>配置kubeadm init 初始化文件</h3><p>配置文件<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener external nofollow noreferrer">官网介绍链接</a></p>
<p>创建配置文件kubeadm-init.yaml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.1	# kubernetes的版本</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 172.16.242.129 # Master的IP地址</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 192.168.0.0&#x2F;16	# pod网络的网段</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers # image的仓库源</span><br></pre></td></tr></table></figure>

<h3 id="运行初始化命令"><a href="#运行初始化命令" class="headerlink" title="运行初始化命令"></a>运行初始化命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm init --config kubeadm-init.yaml</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run (as a regular user):</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the addon options listed at:</span><br><span class="line">  http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;admin&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使kubectl正常工作"><a href="#使kubectl正常工作" class="headerlink" title="使kubectl正常工作"></a>使kubectl正常工作</h3><h4 id="非root用户"><a href="#非root用户" class="headerlink" title="非root用户"></a>非root用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<h4 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</span><br></pre></td></tr></table></figure>

<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p><a href="https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">官网解决问题链接</a></p>
<h4 id="多次运行kubeadm-init命令，需要reset"><a href="#多次运行kubeadm-init命令，需要reset" class="headerlink" title="多次运行kubeadm init命令，需要reset"></a>多次运行kubeadm init命令，需要reset</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>

<h4 id="cgroup-driver报错"><a href="#cgroup-driver报错" class="headerlink" title="cgroup driver报错"></a>cgroup driver报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: failed to run Kubelet: failed to create kubelet:</span><br><span class="line"> misconfiguration: kubelet cgroup driver: &quot;systemd&quot; is different from docker cgroup driver: &quot;cgroupfs&quot;</span><br></pre></td></tr></table></figure>

<p>需要修改 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s&#x2F;cgroup-driver&#x3D;systemd&#x2F;cgroup-driver&#x3D;cgroupfs&#x2F;g&quot; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d&#x2F;10-kubeadm.conf</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure>

<h4 id="kubelet不能启动成功原因之一"><a href="#kubelet不能启动成功原因之一" class="headerlink" title="kubelet不能启动成功原因之一"></a>kubelet不能启动成功原因之一</h4><p>在<code>systemctl status docker</code>中如果出现需要镜像<code>k8s.gcr.io/pause:3.1</code>，运行以下命令修改下标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br></pre></td></tr></table></figure>



<h2 id="安装Pod-Network"><a href="#安装Pod-Network" class="headerlink" title="安装Pod Network"></a>安装Pod Network</h2><p><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener external nofollow noreferrer">官网链接</a></p>
<p>接下来安装pod network add-on，以安装Calico为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br></pre></td></tr></table></figure>

<p>使用<code>kubectl get pod --all-namespaces -o wide</code>确保所有的Pod都处于Running状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br></pre></td></tr></table></figure>

<h2 id="master-node参与工作负载"><a href="#master-node参与工作负载" class="headerlink" title="master node参与工作负载"></a>master node参与工作负载</h2><p>使用kubeadm初始化的集群，出于安全考虑Pod不会被调度到Master Node上，也就是说Master Node不参与工作负载。</p>
<p>这里搭建的是测试环境可以使用下面的命令使Master Node参与工作负载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes node1 node-role.kubernetes.io/master-</span><br><span class="line">node "node1" untainted</span><br></pre></td></tr></table></figure>

<h2 id="向Kubernetes集群添加Node"><a href="#向Kubernetes集群添加Node" class="headerlink" title="向Kubernetes集群添加Node"></a>向Kubernetes集群添加Node</h2><p><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener external nofollow noreferrer">官网链接</a></p>
<ul>
<li><p>添加命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看token的值，在master节点运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果没有token，请使用命令kubeadm token create 创建</span><br><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看hash值，在master节点运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null | \</span><br><span class="line">   openssl dgst -sha256 -hex | sed &#39;s&#x2F;^.* &#x2F;&#x2F;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>node2加入集群很是顺利，下面在master节点上执行命令查看集群中的节点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何从集群中移除Node</p>
<p>在master节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl drain node2 --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure>

<p>在node2上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><ul>
<li><p>配置全局代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  ~&#x2F;.bashrc</span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;username:password@ip:port</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;username:password@ip:port</span><br><span class="line">export no_proxy&#x3D;localhost,127.0.0.1,&lt;your-server-ip&gt;(本机ip地址)</span><br><span class="line">EOF</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker代理，拉谷歌镜像要用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;</span><br><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;username:password@ip:port&quot; &quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;username:password@ip:port&quot; &quot;NO_PROXY&#x3D;localhost,127.0.0.1,&lt;your-server-ip&gt;&quot;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">Installing kubeadm</a></li>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">Using kubeadm to Create a Cluster</a></li>
<li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener external nofollow noreferrer">Get Docker CE for CentOS</a></li>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Access-control" target="_blank" rel="noopener external nofollow noreferrer">Kubernetes Dashboard Access-control</a></li>
<li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener external nofollow noreferrer">使用kubeadm安装Kubernetes 1.9</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 本地临时存储管理</title>
    <url>/articles/1048089720.html</url>
    <content><![CDATA[<h3 id="背-景"><a href="#背-景" class="headerlink" title="背  景"></a>背  景</h3><p>在 Kubernetes 中，我们可以管理限制计算资源，如 CPU， memeory，通过 quota 和 limitrange ，可以限制在一个 namespace 中，pod 和 container 可以使用多少的 cpu 和 memory，通过 downward api，可以把这个计算资源通过环境变量的方式注入到 container 中，供容器使用。<br>但是，release 1.7 中还没有系统的管理、隔离本地临时存储的方法，只是加了一些简单的 eviction 逻辑和调度预测，这会导致很多问题，比如，一个 pod 如果没有设置本地临时存储限制，它可以占据 node 很多本地存储资源，导致其他 pod 被异常终止，无法限制一个 namespace 中本地临时存储总量等等，基于这些问题，经才云科技（Caicloud）和 Google 讨论，设计并实现了本地临时存储相关功能。</p>
<a id="more"></a>
<h3 id="现-状"><a href="#现-状" class="headerlink" title="现  状"></a>现  状</h3><p>在 Kubernetes 1.7 版本中，我们引入了 alpha 版本的 LocalStorageCapacityIsolation feature，用来控制本地临时存储，但是设计和工作还处于初级阶段，不是很成熟。 在 1.7 版本中，我们把本地存储分为两种资源：一种是 scratch，代表的是 root 分区（ /var/lib/kubelet 和 /var/log 目录, 非系统根目录），另一种是 overlay，代表的是 runtime 分区。<br><strong>具体的逻辑是这样的：</strong></p>
<ul>
<li>scratch 资源（也就是 root 分区）用来满足 /var/lib/kubelet 目录 以及 /var/log 目录需求，被 EmptyDir 以及 container log 消费，如果 node 节点没有 overlay 资源的话， container image layers  和 writable layers 也是消费的 scratch 资源</li>
<li>overlay 资源，就像上面说的，专门用来满足 container image layers 和 writable layers 的需求的。<br>设计出来之后，所做的工作是：在 scheduling 部分加上了本地临时存储的判断逻辑，用来找到满足 pod 对本地存储需求的节点。<br>但是，对本地存储的限制和隔离功能大部分都没有做，这些工作在 1.8 版本中都将加入，当然，还是 alpha 阶段。</li>
</ul>
<h3 id="目-标"><a href="#目-标" class="headerlink" title="目  标"></a>目  标</h3><p>像管理内存那样，Kubernetes 可以管理限制本地临时存储，以及通过获取 node 本地存储情况，把 pod 调度到合适的节点。</p>
<h3 id="方-案"><a href="#方-案" class="headerlink" title="方  案"></a>方  案</h3><p>上面说了， release 1.7 中，把本地临时资源分成两种，分别代表两个分区。这样的话，管理起来很麻烦，实现逻辑也很复杂，而且 overlay 分区用处不是很大，所以经讨论最终决定，在 1.8 版本中我们只管理一个分区的资源（root partition），用来简化实现逻辑。 <strong>资源名称为：</strong>ResourceEphemeralStorage ResourceName=”ephemeral-storage”。<br>下面我将分别从 eviction manager，scheduling ，quota，limitrange 以及 downward api 这些模块来介绍这个 feature 的具体实现。</p>
<h4 id="1eviction："><a href="#1eviction：" class="headerlink" title="1eviction："></a>1eviction：</h4><p><strong>本地临时存储的 eviction 逻辑总有三个：</strong></p>
<ol>
<li>EmptyDir 的使用量超过了他的 SizeLimit，那么这个 pod 将会被驱逐；</li>
<li>Container 的使用量（log，如果没有 overlay 分区，则包括 imagefs）超过了他的 limit，则这个 pod 会被驱逐；</li>
<li>Pod 对本地临时存储总的使用量（所有 emptydir 和 container）超过了 pod 中所有container 的 limit 之和，则 pod 被驱逐。</li>
</ol>
<p><strong>示例</strong>：</p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<p>上面这个例子是 pod 使用本地临时存储实例，pod 中分别有两个容器，fooa 和 foob，他们对本地临时存储的需求分别是 10Gi 和 20Gi（request 和 limit 一样）， 然后，pod 还挂载了一个 EmptyDir volume，这个 volume 的 sizelimit 是 5Gi。</p>
<p><strong>下面三种情况下，pod 将会被系统驱逐：</strong></p>
<ol>
<li>fooa 使用量超过 10Gi  或者 foob 使用量超过 20Gi （容器使用量是否包括 imagefs 视系统分区情况而定）；</li>
<li>myEmptyDir 使用量超过 5Gi ；</li>
<li>pod 总的使用量超过 30Gi ；</li>
</ol>
<h3 id="2-scheduling"><a href="#2-scheduling" class="headerlink" title="2 scheduling"></a>2 scheduling</h3><p>这部分改动不大，只是把 1.7 版本中关于 overlay 的逻辑去掉，最终的逻辑和 cpu，memory 类似，找到满足 pod 需求的节点，调度过去。<br><strong>示例：</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<p>Node 节点关于本地临时存储的定义：<br>在 node 的 allocatable 资源能够满足 pod 对本地临时存储需求的前提下，pod 才可能被调度到该 node 节点。</p>
<h3 id="3-quota"><a href="#3-quota" class="headerlink" title="3. quota"></a>3. quota</h3><p>在 quota 里面加入了对本地临时资源的管理限制，同一个 namespace 中，所有 pod 的本地临时存储总量不能超过 quota 的限额。<br><strong>示例：</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<h3 id="4-limitrange"><a href="#4-limitrange" class="headerlink" title="4.limitrange"></a>4.limitrange</h3><p>同样的，加入了本地临时存储，可以对 pod 中 container 的本地临时存储设置限制以及默认值等，和 memory 类似。<br><strong>示例：</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<p>如果在该 namespace 中，pod 没有对本地存储进行 request/limit 定义，limitrange 会对 pod 进行默认赋值，结果类似下面：</p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<h3 id="5downward-api"><a href="#5downward-api" class="headerlink" title="5downward api"></a>5downward api</h3><p>同样的，实现了本地存储的这个功能，可以通过环境变量的方式，把 pod 中某个 container 的本地临时存储需求 注入到特定的容器中。<br><strong>示例：</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/49cd8bda76741c79165e12d68bcef9fe.jpg" alt="img"></p>
<h3 id="将-来"><a href="#将-来" class="headerlink" title="将  来"></a>将  来</h3><p>本地临时存储还处于初级（alpha）阶段。后面，Caicloud 和 Google 将继续合作，在 1.9 版本中完善一些功能，把它推进到 beta 版本，之后越来越完善。<br>其他的示例都类似，可以参考下面链接<a href="https://github.com/kubernetes/community/pull/991https://github.com/kubernetes/community/pull/306" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/kubernetes/community/pull/991https://github.com/kubernetes/community/pull/306</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.k8smeetup.com/article/VyEncpgA7" target="_blank" rel="noopener external nofollow noreferrer">Kubernetes 1.8 新进展！将实现本地临时存储管理</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装之Kubespray</title>
    <url>/articles/830826630.html</url>
    <content><![CDATA[<h3 id="基于kubespray安装k8s集群"><a href="#基于kubespray安装k8s集群" class="headerlink" title="基于kubespray安装k8s集群"></a>基于kubespray安装k8s集群</h3><ul>
<li><p><strong>使用分支是v2.4.0</strong></p>
<p><a href="https://github.com/kubernetes-incubator/kubespray/tree/v2.4.0" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/kubernetes-incubator/kubespray/tree/v2.4.0</a></p>
</li>
<li><p><strong>组件安装的版本</strong></p>
<p>kubernetes v1.9.2</p>
<p>etcd v3.2.4</p>
<p>calico v2.5.0</p>
<p>docker v1.13</p>
<a id="more"></a>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3></li>
<li><p>主机配置</p>
<ul>
<li>内存：最少大于1.5G，否则ansible安装时会报错</li>
</ul>
</li>
<li><p>登入三台机器关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每台主机关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 每台主机关闭swap</span><br><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>登入ansible host</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装yum的epel源</span><br><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line"># 安装需求的软件</span><br><span class="line">yum install -y python-pip python-netaddr ansible git</span><br><span class="line">pip install --upgrade Jinja2</span><br><span class="line"></span><br><span class="line"># 配置ssh免密</span><br><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id root@172.31.19.29</span><br><span class="line">ssh-copy-id root@172.31.19.30</span><br><span class="line">ssh-copy-id root@172.31.19.31</span><br><span class="line"></span><br><span class="line"># 拉取kubespray 并切换分支</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kubernetes-incubator&#x2F;kubespray.git</span><br><span class="line">cd kubespray</span><br><span class="line">git checkout v2.4.0 -b myv2.4.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改inventory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制主机配置</span><br><span class="line">cp inventory&#x2F;inventory.example inventory&#x2F;inventory.cfg</span><br><span class="line">vim inventory&#x2F;inventory.cfg</span><br><span class="line">[all]</span><br><span class="line">node1 ansible_ssh_host&#x3D;172.31.19.29 ip&#x3D;172.31.19.29</span><br><span class="line">node2 ansible_ssh_host&#x3D;172.31.19.30 ip&#x3D;172.31.19.30</span><br><span class="line">node3 ansible_ssh_host&#x3D;172.31.19.31 ip&#x3D;172.31.19.31</span><br><span class="line"></span><br><span class="line">[kube-master]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line">[etcd]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line">[kube-node]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line">[k8s-cluster:children]</span><br><span class="line">kube-node</span><br><span class="line">kube-master</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份并修改安装的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 备份</span><br><span class="line">cp inventory&#x2F;group_vars&#x2F;all.yml inventory&#x2F;group_vars&#x2F;all.yml.bak</span><br><span class="line">cp inventory&#x2F;group_vars&#x2F;k8s-cluster.yml inventory&#x2F;group_vars&#x2F;k8s-cluster.yml.bak</span><br><span class="line"></span><br><span class="line"># 修改bootstrap版本</span><br><span class="line">vim inventory&#x2F;group_vars&#x2F;all.yml</span><br><span class="line">bootstrap_os: centos</span><br><span class="line"></span><br><span class="line"># 关闭Dashboard和修改kube_api_pwd密码</span><br><span class="line">vim inventory&#x2F;group_vars&#x2F;k8s-cluster.yml</span><br><span class="line">dashboard_enabled: false</span><br><span class="line">kube_api_pwd: “hello-world8888”</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改下载的包，将国外下载慢的包，改成用阿里的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改roles&#x2F;download&#x2F;defaults&#x2F;main.yml中的镜像</span><br><span class="line">sed -i &#39;s#^etcd_image_repo:.*#etcd_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;etcd&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^calicoctl_image_repo:.*#calicoctl_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;ctl&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^calico_node_image_repo:.*#calico_node_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;node&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^calico_cni_image_repo:.*#calico_cni_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;cni&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^calico_policy_image_repo:.*#calico_policy_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;kube-policy-controller&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^calico_rr_image_repo:.*#calico_rr_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;routereflector&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^hyperkube_image_repo:.*#hyperkube_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;hyper-kube&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^pod_infra_image_repo:.*#pod_infra_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;pause-amd64&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^nginx_image_repo:.*#nginx_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;nginx&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^kubedns_image_repo:.*#kubedns_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-kube-dns-amd64&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^dnsmasq_nanny_image_repo:.*#dnsmasq_nanny_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-dnsmasq-nanny-amd64&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^dnsmasq_sidecar_image_repo:.*#dnsmasq_sidecar_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-sidecar-amd64&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^kubednsautoscaler_image_repo:.*#kubednsautoscaler_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;cluster-proportional-autoscaler-amd64&quot;#g&#39; roles&#x2F;download&#x2F;defaults&#x2F;main.yml</span><br><span class="line"></span><br><span class="line"># 修改roles&#x2F;kubernetes-apps&#x2F;ansible&#x2F;defaults&#x2F;main.yml文件的镜像源</span><br><span class="line">sed -i &#39;s#^kubedns_image_repo:.*#kubedns_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-kube-dns-amd64&quot;#g&#39; roles&#x2F;kubernetes-apps&#x2F;ansible&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^dnsmasq_nanny_image_repo:.*#dnsmasq_nanny_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-dnsmasq-nanny-amd64&quot;#g&#39; roles&#x2F;kubernetes-apps&#x2F;ansible&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^dnsmasq_sidecar_image_repo:.*#dnsmasq_sidecar_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;k8s-dns-sidecar-amd64&quot;#g&#39; roles&#x2F;kubernetes-apps&#x2F;ansible&#x2F;defaults&#x2F;main.yml</span><br><span class="line">sed -i &#39;s#^kubednsautoscaler_image_repo:.*#kubednsautoscaler_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com&#x2F;linkcloud&#x2F;cluster-proportional-autoscaler-amd64&quot;#g&#39; roles&#x2F;kubernetes-apps&#x2F;ansible&#x2F;defaults&#x2F;main.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible-playbook -b -i inventory&#x2F;inventory.cfg cluster.yml --flush-cache</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装VPN客户端并连接</title>
    <url>/articles/47351249.html</url>
    <content><![CDATA[<h2 id="安装vpn客户端"><a href="#安装vpn客户端" class="headerlink" title="安装vpn客户端"></a>安装vpn客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ppp pptp pptp-setup</span><br></pre></td></tr></table></figure>

<h2 id="连接vpn服务"><a href="#连接vpn服务" class="headerlink" title="连接vpn服务"></a>连接vpn服务</h2><h3 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h3><blockquote>
<p>–create是创建的连接名称</p>
<p>–server是vpn的ip地址</p>
<p>–username是用户名</p>
<p>–password是密码，也可以没这个参数，命令稍后会自动询问。这样可以保证账号安全</p>
<p>–encrypt 是表示需要加密，不必指定加密方式，命令会读取配置文件中的加密方式</p>
<p>–start是表示创建连接完后马上连接</p>
</blockquote>
<a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pptpsetup --create vpn --server x.x.x.x --username vpntest --password 1234567890 --encrypt --start</span><br><span class="line">Using interface ppp0</span><br><span class="line">Connect: ppp0 &lt;--&gt; &#x2F;dev&#x2F;pts&#x2F;2</span><br><span class="line">CHAP authentication succeeded</span><br><span class="line">MPPE 128-bit stateless compression enabled</span><br><span class="line">local  IP address 10.0.0.10</span><br><span class="line">remote IP address 10.0.0.1</span><br></pre></td></tr></table></figure>

<h4 id="查看创建账号vpn的配置文件"><a href="#查看创建账号vpn的配置文件" class="headerlink" title="查看创建账号vpn的配置文件"></a>查看创建账号<code>vpn</code>的配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># written by pptpsetup</span><br><span class="line"># cat &#x2F;etc&#x2F;ppp&#x2F;peers&#x2F;vpn </span><br><span class="line">pty &quot;pptp vpn.netkiller.cn --nolaunchpppd&quot;</span><br><span class="line">lock</span><br><span class="line">noauth</span><br><span class="line">nobsdcomp</span><br><span class="line">nodeflate</span><br><span class="line">name neo</span><br><span class="line">remotename vpn</span><br><span class="line">ipparam vpn</span><br></pre></td></tr></table></figure>

<h4 id="内核模块安装"><a href="#内核模块安装" class="headerlink" title="内核模块安装"></a>内核模块安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for module in nf_nat_pptp nf_conntrack_pptp nf_conntrack_proto_gre</span><br><span class="line">do</span><br><span class="line">    modprobe $module</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="拨入VPN"><a href="#拨入VPN" class="headerlink" title="拨入VPN"></a>拨入VPN</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># call 后面添加创建的账号的名称</span><br><span class="line">pppd call vpn</span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li><p>先把程序复制到系统路径让系统识别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;ppp-2.4.5&#x2F;scripts&#x2F;pon &#x2F;usr&#x2F;sbin&#x2F; </span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;ppp-2.4.5&#x2F;scripts&#x2F;poff &#x2F;usr&#x2F;sbin&#x2F; </span><br><span class="line">chmod +x &#x2F;usr&#x2F;sbin&#x2F;pon </span><br><span class="line">chmod +x &#x2F;usr&#x2F;sbin&#x2F;poff</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用pon开始拨号, poff端开拨号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 连接名称为vpn,vpn服务</span><br><span class="line">pon vpn</span><br><span class="line"></span><br><span class="line"># 断开名称为vpn,vpn服务</span><br><span class="line">poff vpn</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tail -f &#x2F;var&#x2F;log&#x2F;messages | grep pppd</span><br><span class="line">Sep  9 19:09:19 iZ621r6pk9aZ pppd[21801]: pppd 2.4.5 started by root, uid 0</span><br><span class="line">Sep  9 19:09:19 iZ621r6pk9aZ pppd[21801]: Using interface ppp0</span><br></pre></td></tr></table></figure>

<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><h4 id="自动配置路由"><a href="#自动配置路由" class="headerlink" title="自动配置路由"></a>自动配置路由</h4><p>创建文件/etc/ppp/ip-up.local，写入添加路由命令，然后赋予可执行权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;ppp&#x2F;ip-up.local </span><br><span class="line">ip route add default dev ppp0</span><br><span class="line"></span><br><span class="line"># chmod +x &#x2F;etc&#x2F;ppp&#x2F;ip-up.local</span><br></pre></td></tr></table></figure>

<p>创建文件 /etc/ppp/ip-down.local 写入删除路由命令，然后赋予可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;ppp&#x2F;ip-down.local</span><br><span class="line">ip route del default dev ppp0</span><br><span class="line"></span><br><span class="line">chmod +x &#x2F;etc&#x2F;ppp&#x2F;ip-down.local</span><br></pre></td></tr></table></figure>

<h4 id="手工配置路由"><a href="#手工配置路由" class="headerlink" title="手工配置路由"></a>手工配置路由</h4><p>添加路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip route add default dev ppp0</span><br></pre></td></tr></table></figure>

<p>查看路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ip route </span><br><span class="line">default via 47.19.19.27 dev eth1 </span><br><span class="line">1.2.2.2 dev ppp0  proto kernel  scope link  src 2.0.1.8 </span><br><span class="line">10.0.0.0&#x2F;8 via 10.47.47.247 dev eth0 </span><br><span class="line">10.47.40.0&#x2F;21 dev eth0  proto kernel  scope link  src 10.47.40.190 </span><br><span class="line">47.89.36.0&#x2F;22 dev eth1  proto kernel  scope link  src 47.89.36.254 </span><br><span class="line">100.64.0.0&#x2F;10 via 10.47.47.247 dev eth0 </span><br><span class="line">118.142.17.226 via 47.89.39.247 dev eth1  src 47.89.36.254 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth0  scope link  metric 1002 </span><br><span class="line">169.254.0.0&#x2F;16 dev eth1  scope link  metric 1003 </span><br><span class="line">172.16.0.0&#x2F;12 via 10.47.47.247 dev eth0  </span><br><span class="line">192.168.0.0&#x2F;24 dev ppp0  scope link</span><br></pre></td></tr></table></figure>

<p>删除路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip route del default dev ppp0</span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="centos连接VpnServer-超时-执行下面命令"><a href="#centos连接VpnServer-超时-执行下面命令" class="headerlink" title="centos连接VpnServer 超时,执行下面命令"></a>centos连接VpnServer 超时,执行下面命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Delete all rules in  chain or all chains</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure>

<h3 id="连接vpn-server，报如下错误"><a href="#连接vpn-server，报如下错误" class="headerlink" title="连接vpn server，报如下错误"></a>连接vpn server，报如下错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using interface ppp0</span><br><span class="line">Connect: ppp0 &lt;--&gt; &#x2F;dev&#x2F;pts&#x2F;2</span><br><span class="line">EAP: unknown authentication type 26; Naking</span><br><span class="line">EAP: peer reports authentication failure</span><br><span class="line">Connection terminated.</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ppp&#x2F;options</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将下面字段添加到&#x2F;etc&#x2F;ppp&#x2F;options文件中(root用户权限可更改）</span><br><span class="line"></span><br><span class="line">refuse-pap</span><br><span class="line">refuse-eap</span><br><span class="line">refuse-chap</span><br><span class="line">refuse-mschap</span><br><span class="line">require-mppe</span><br></pre></td></tr></table></figure>

<h3 id="连接成功-路由修改成功，没网"><a href="#连接成功-路由修改成功，没网" class="headerlink" title="连接成功,路由修改成功，没网"></a>连接成功,路由修改成功，没网</h3><blockquote>
<p>错误原因：DNS 没有成功解析</p>
</blockquote>
<p>解决办法：<br>1.修改/etc/resolv.conf文件，将nameserver 配置成VPN服务器中的dns的ip，或者直接写公用dns（114.114.114.114或1.1.1.1或8.8.8.8）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>

<p>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameserver 1.1.1.1</span><br></pre></td></tr></table></figure>

<h3 id="重启机器或者重启network服务，会断开连接"><a href="#重启机器或者重启network服务，会断开连接" class="headerlink" title="重启机器或者重启network服务，会断开连接"></a>重启机器或者重启network服务，会断开连接</h3><blockquote>
<p>解决方法待续</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1051293" target="_blank" rel="noopener external nofollow noreferrer">PPTP VPN 服务器</a></p>
<p><a href="https://blog.csdn.net/qq_20948497/article/details/53419280" target="_blank" rel="noopener external nofollow noreferrer">linux连接vpn服务</a></p>
<p><a href="http://blog.51cto.com/wutou/1737372" target="_blank" rel="noopener external nofollow noreferrer">Linux centos ***拨号客户端</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux添加定时任务</title>
    <url>/articles/3049896161.html</url>
    <content><![CDATA[<h2 id="1-使用-crontab-e-命令编辑定时任务列表"><a href="#1-使用-crontab-e-命令编辑定时任务列表" class="headerlink" title="1. 使用 crontab -e 命令编辑定时任务列表"></a>1. 使用 crontab -e 命令编辑定时任务列表</h2><p>使用这个命令编辑的定时任务列表是属于用户级别的，初次编辑后在 /var/spool/cron 目录下生成一个与用户名相同的文件，文件内容就是我们的定时任务列表。如没有定时任务，这个文件就是空文件。</p>
<p>crontab命令还有一些其他的选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u 	#指定哪个用户的cron服务，一般是root用户执行这个命令的时候需要</span><br><span class="line">-l 	#列出用户的定时任务列表，默认当前用户</span><br><span class="line">-r 	#删除用户的定时任务列表，默认当前用户 </span><br><span class="line">-e 	#编辑用户的定时任务列表，默认当前用户</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>例子：列出xiaoming用户的cron服务列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -u xiaoming -l</span><br></pre></td></tr></table></figure>



<h2 id="2-直接编辑-etc-crontab-文件，命令如下："><a href="#2-直接编辑-etc-crontab-文件，命令如下：" class="headerlink" title="2. 直接编辑 /etc/crontab 文件，命令如下："></a>2. 直接编辑 /etc/crontab 文件，命令如下：</h2><p>编辑 /etc/crontab 文件只有 root 用户才行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;crontab</span><br></pre></td></tr></table></figure>

<p>我们会看到文件内容，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line">MAILTO&#x3D;root</span><br><span class="line">HOME&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line"># For details see man 4 crontabs</span><br><span class="line"></span><br><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name command to be executed</span><br></pre></td></tr></table></figure>

<p>这配置的定时任务属于系统级别的。</p>
<h2 id="3-其他的一些区别"><a href="#3-其他的一些区别" class="headerlink" title="3. 其他的一些区别"></a>3. 其他的一些区别</h2><p>crontab -e 会进行语法检查、直接编辑 /etc/crontab 文件则不会</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="http://www.cnblogs.com/libra0920/p/6520701.html" target="_blank" rel="noopener external nofollow noreferrer">Linux 添加定时任务，crontab -e 命令与直接编辑 /etc/crontab 文件</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>locale的设定及LANG、LC_CTYPE、LC_ALL环境变量</title>
    <url>/articles/929099485.html</url>
    <content><![CDATA[<h3 id="locale介绍"><a href="#locale介绍" class="headerlink" title="locale介绍"></a>locale介绍</h3><ul>
<li><p>locale这个单词中文翻译成地区或者地域，其实这个单词包含的意义要宽泛很多。Locale是根据计算机用户所使用的语言，所在国家或者地区，以及当地的文化传统所定义的一个软件运行时的语言环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@game ~]$ locale</span><br><span class="line">LANG&#x3D;en_US.UTF-8</span><br><span class="line">LC_CTYPE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_NUMERIC&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_TIME&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_COLLATE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_MONETARY&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_MESSAGES&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_PAPER&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_NAME&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_ADDRESS&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_TELEPHONE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_MEASUREMENT&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_IDENTIFICATION&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_ALL&#x3D;en_US.UTF-8</span><br><span class="line">[oracle@game ~]$</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>locale把按照所涉及到的文化传统的各个方面分成12个大类，这12个大类分别是： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、语言符号及其分类(LC_CTYPE) </span><br><span class="line">2、数字(LC_NUMERIC) </span><br><span class="line">3、比较和排序习惯(LC_COLLATE) </span><br><span class="line">4、时间显示格式(LC_TIME) </span><br><span class="line">5、货币单位(LC_MONETARY) </span><br><span class="line">6、信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等(LC_MESSAGES) </span><br><span class="line">7、姓名书写方式(LC_NAME) </span><br><span class="line">8、地址书写方式(LC_ADDRESS) </span><br><span class="line">9、电话号码书写方式(LC_TELEPHONE) </span><br><span class="line">10、度量衡表达方式 (LC_MEASUREMENT) </span><br><span class="line">11、默认纸张尺寸大小(LC_PAPER) </span><br><span class="line">12、对locale自身包含信息的概述(LC_IDENTIFICATION)</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以说，locale就是某一个地域内的人们的语言习惯和文化传统和生活习惯。一个地区的locale就是根据这几大类的习惯定义的，这些locale定 义文件放在/usr/share/i18n/locales目录下面，例如en_US, zh_CN and de_DE@euro都是locale的定义文件，这些文件都是用文本格式书写的，你可以用写字板打开，看看里边的内容，当然出了有限的注释以外，大部分 东西可能你都看不懂，因为是用的Unicode的字符索引方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@game ~]$ cd &#x2F;usr&#x2F;share&#x2F;i18n&#x2F;locales</span><br><span class="line">[oracle@game locales]$ ls</span><br><span class="line">aa_DJ        ar_YE       el_GR       es_ES       fr_CH           iso14651_t1 ne_NP       so_ET                  translit_hangul</span><br><span class="line">aa_ER        az_AZ       el_GR@euro es_ES@euro fr_FR           it_CH        nl_BE       so_KE                  translit_narrow</span><br><span class="line">aa_ER@saaho be_BY       en_AU       es_GT       fr_FR@euro      it_IT        nl_BE@euro so_SO                  translit_neutral</span><br><span class="line">aa_ET        bg_BG       en_BW       es_HN       fr_LU           it_IT@euro   nl_NL       sq_AL                  translit_small</span><br><span class="line">af_ZA        bn_BD       en_CA       es_MX       fr_LU@euro      iw_IL        nl_NL@euro sr_CS                  translit_wide</span><br><span class="line">am_ET        bn_IN       en_DK       es_NI       ga_IE           ja_JP        nn_NO       st_ZA                  tr_TR</span><br><span class="line">an_ES        br_FR       en_GB       es_PA       ga_IE@euro      ka_GE        no_NO       sv_FI                  tt_RU</span><br><span class="line">ar_AE        br_FR@euro en_HK       es_PE       gd_GB           kk_KZ        oc_FR       sv_FI@euro             uk_UA</span><br><span class="line">ar_BH        bs_BA       en_IE       es_PR       gez_ER          kl_GL        om_ET       sv_SE                  ur_PK</span><br><span class="line">ar_DZ        byn_ER      en_IE@euro es_PY       gez_ER@abegede kn_IN        om_KE       ta_IN                  uz_UZ</span><br><span class="line">ar_EG        ca_ES       en_IN       es_SV       gez_ET          ko_KR        pa_IN       te_IN                  uz_UZ@cyrillic</span><br><span class="line">ar_IN        ca_ES@euro en_NZ       es_US       gez_ET@abegede kw_GB        pl_PL       tg_TJ                  vi_VN</span><br><span class="line">ar_IQ        cs_CZ       en_PH       es_UY       gl_ES           lg_UG        POSIX       th_TH                  wa_BE</span><br><span class="line">ar_JO        cy_GB       en_SG       es_VE       gl_ES@euro      lo_LA        pt_BR       ti_ER                  wa_BE@euro</span><br><span class="line">ar_KW        da_DK       en_US       et_EE       gu_IN           lt_LT        pt_PT       ti_ET                  wal_ET</span><br><span class="line">ar_LB        de_AT       en_ZA       eu_ES       gv_GB           lv_LV        pt_PT@euro tig_ER                 xh_ZA</span><br><span class="line">ar_LY        de_AT@euro en_ZW       eu_ES@euro he_IL           mi_NZ        ro_RO       tl_PH                  yi_US</span><br><span class="line">ar_MA        de_BE       es_AR       fa_IR       hi_IN           mk_MK        ru_RU       translit_circle        zh_CN</span><br><span class="line">ar_OM        de_BE@euro es_BO       fi_FI       hr_HR           ml_IN        ru_UA       translit_cjk_compat    zh_HK</span><br><span class="line">ar_QA        de_CH       es_CL       fi_FI@euro hu_HU           mn_MN        se_NO       translit_cjk_variants zh_SG</span><br><span class="line">ar_SA        de_DE       es_CO       fo_FO       hy_AM           mr_IN        sid_ET      translit_combining     zh_TW</span><br><span class="line">ar_SD        de_DE@euro es_CR       fr_BE       i18n            ms_MY        sk_SK       translit_compat        zu_ZA</span><br><span class="line">ar_SY        de_LU       es_DO       fr_BE@euro id_ID           mt_MT        sl_SI       translit_font</span><br><span class="line">ar_TN        de_LU@euro es_EC       fr_CA       is_IS           nb_NO        so_DJ       translit_fraction</span><br><span class="line">[oracle@game locales]$</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于de_DE@euro的一点说明，@后边是修正项，也就是说你可以看到两个德国的locale：/usr/share/i18n/locales /de_DE@euro和/usr/share/i18n/locales/de_DE。打开这两个locale定义，你就会知道它们的差别在于 de_DE@euro使用的是欧洲的排序、比较和缩进习惯，而de_DE用的是德国的标准习惯。 </p>
</li>
<li><p>上面我们说到了zh_CN.GB18030的前半部分，后半部分是什么呢？大部分Linux用户都知道是系统采用的字符集。 </p>
</li>
<li><p>zh_CN.GB2312到底是在说什么？ Locale是软件在运行时的语言环境, 它包括语言(Language), 地域 (Territory) 和字符集(Codeset)。一个locale的书写格式为: 语言[_地域[.字符集]]。所以说呢，locale总是和一定的字符集相联系的。下面举几个例子： </p>
<p>1、我说中文，身处中华人民共和国，使用国标2312字符集来表达字符。zh_CN.GB2312＝中文_中华人民共和国＋国标2312字符集。 </p>
<p>2、我说中文，身处中华人民共和国，使用国标18030字符集来表达字符。zh_CN.GB18030＝中文_中华人民共和国＋国标18030字符集。 </p>
<p>3、我说中文，身处中华人民共和国台湾省，使用国标Big5字符集来表达字符。zh_TW.BIG5=中文_台湾.大五码字符集 </p>
<p>4、我说英文，身处大不列颠，使用ISO-8859-1字符集来表达字符。 en_GB.ISO-8859-1=英文_大不列颠.ISO-8859-1字符集 </p>
<p>5、我说德语，身处德国，使用UTF-8字符集，习惯了欧洲风格。de_DE.UTF-8@euro＝德语_德国.UTF-8字符集@按照欧洲习惯加以修正，注意不是<a href="mailto:de_DE@euro.UTF-8" rel="external nofollow noreferrer">de_DE@euro.UTF-8</a>，所以完全的locale表达方式是 [语言[_地域][.字符集][@修正值]。 </p>
</li>
<li><p>其中，与中文输入关系最密切的就是LC_CTYPE，LC_CTYPE规定了系统内有效的字符以及这些字符的分类， 诸如什么是大写字母，小写字母，大小写转换，标点符号、可打印字符和其他的字符属性等方面。而locale定 义zh_CN中最最重要的一项就是定义了汉字(Class“hanzi”)这一个大类，当然也是用Unicode描述的，这就让中文字符在Linux系统 中成为合法的有效字符，而且不论它们是用什么字符集编码的。 </p>
</li>
</ul>
<h3 id="设定locale"><a href="#设定locale" class="headerlink" title="设定locale"></a>设定locale</h3><ul>
<li><p>设定locale就是设定12大类的locale分类属性，即12个LC_*。除了这12个变量可以设定以外，为了简便起见，还有两个变量：<code>LC_ALL和LANG</code>。它们之间有一个优先级的关系：<code>LC_ALL &gt; LC_XXX &gt;LANG</code>。可以这么说，LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。 </p>
<ul>
<li>1、如果你设定了LC_ALL＝zh_CN.UTF-8，那么不管LC_*和LANG设定成什么值，它们都会被强制服从LC_ALL的设定，成为 zh_CN.UTF-8。 </li>
<li>2、假如你设定了LANG＝zh_CN.UTF-8，而其他的LC_*=en_US.UTF-8，并且没有设定LC_ALL的话，那么系统的locale设定以LC_xxx=en_US.UTF-8。 </li>
<li>3、假如你设定了LANG＝zh_CN.UTF-8，而其他的LC_*，和LC_ALL均未设定的话，系统会将LC_xxx设定成默认值，也就是LANG的值zh_CN.UTF-8。 </li>
<li>4、假如你设定了LANG＝zh_CN.UTF-8，而其他的LC_CTYPE=en_US.UTF-8，其他的LC_*，和LC_ALL均未设定的话， 那么系统的locale设定将是：LC_CTYPE=en_US.UTF-8，其余的 LC_COLLATE，LC_MESSAGES等等均会采用默认值，也就是 LANG的值，也就是LC_COLLATE＝LC_MESSAGES＝……＝ LC_PAPER＝LANG＝zh_CN.UTF-8。 </li>
</ul>
</li>
<li><p>所以，locale是这样设定的： </p>
<ul>
<li>1、如果你需要一个纯中文的系统的话，设定LC_ALL= zh_CN.XXXX，或者LANG=zh_CN.XXXX都可以，当然你可以两个都设定，但正如上面所讲，LC_ALL的值将覆盖所有其他的locale设定，不要作无用功。 </li>
<li>2、如果你只想要一个可以输入中文的环境，而保持菜单、标题，系统信息等等为英文界面，那么只需要设定 LC_CTYPE＝zh_CN.XXXX，LANG=en_US.XXXX就可以了。这样LC_CTYPE＝zh_CN.XXXX，而LC_COLLATE＝LC_MESSAGES＝……＝ LC_PAPER＝LANG＝en_US.XXXX。 </li>
<li>3、假如你高兴的话，可以把12个LC_*一一设定成你需要的值，打造一个古灵精怪的系统： LC_CTYPE＝zh_CN.GBK/GBK(使用中文编码内码GBK字符集)； LC_NUMERIC=en_GB.ISO-8859-1(使用大不列颠的数字系统) LC_MEASUREMEN=de_DE@euro.ISO-8859-15(德国的度量衡使用ISO-8859-15字符集) 罗马的地址书写方式，美国的纸张设定……。估计没人这么干吧。 </li>
<li>4、假如你什么也不做的话，也就是LC_ALL，LANG和LC_*均不指定特定值的话，系统将采用POSIX作为lcoale，也就是C locale。</li>
</ul>
</li>
<li><p>另外LANG和LANGUAGE有什么区别呢？</p>
<p>LANG - Specifies the default locale for all unset locale variables<br>LANGUAGE - Most programs use this for the language of its interface<br>LANGUAGE是设置应用程序的界面语言。而LANG是优先级很低的一个变量，它指定所有与locale有关的变量的默认值，</p>
</li>
</ul>
<h3 id="MAC-中设定locale"><a href="#MAC-中设定locale" class="headerlink" title="MAC 中设定locale"></a>MAC 中设定locale</h3><ul>
<li><p>在终端下输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>或者使用其他你喜欢的编辑器编辑~/.zshrc文件</p>
</li>
<li><p>在文件内容末端添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LC_ALL&#x3D;en_US.UTF-8</span><br><span class="line">export LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着重启一下终端，或者输入source ~/.zshrc使设置生效。</p>
<p>设置成功的话，在本地和登录到服务器输入locale回车会显示下面内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_COLLATE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_CTYPE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_MESSAGES&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_MONETARY&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_NUMERIC&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_TIME&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_ALL&#x3D;&quot;en_US.UTF-8&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="设定locale可解决问题小结"><a href="#设定locale可解决问题小结" class="headerlink" title="设定locale可解决问题小结"></a>设定locale可解决问题小结</h3><ul>
<li><p>用Mac的iterm2 ssh连上去，终端显示中文乱码，也不能输入中文，然而本地终端可以显示和输入</p>
<blockquote>
<p>这种情况一般是终端和服务器的字符集不匹配，MacOSX下默认的是utf8字符集。<br>输入locale可以查看字符编码设置情况，而我的对应值是空的。<br>因为我在本地和服务器都用zsh替代了bash，而且使用了oh-my-zsh，而默认的.zshrc没有设置为utf-8编码，所以本地和服务器端都要在.zshrc设置</p>
</blockquote>
</li>
</ul>
<ul>
<li>ssh登录提示警告<code>-bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory</code></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.cnblogs.com/xlmeng1988/archive/2013/01/16/locale.html" target="_blank" rel="noopener external nofollow noreferrer">http://www.cnblogs.com/xlmeng1988/archive/2013/01/16/locale.html</a></p>
<p><a href="https://gist.github.com/slow-is-fast/1b0e9e8bbcb7e8b8966d177730c46ba4" target="_blank" rel="noopener external nofollow noreferrer">https://gist.github.com/slow-is-fast/1b0e9e8bbcb7e8b8966d177730c46ba4</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>sshpass命令使用</title>
    <url>/articles/2936261150.html</url>
    <content><![CDATA[<h3 id="sshpass安装"><a href="#sshpass安装" class="headerlink" title="sshpass安装"></a>sshpass安装</h3><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install sshpass</span><br></pre></td></tr></table></figure>

<h3 id="sshpass使用"><a href="#sshpass使用" class="headerlink" title="sshpass使用"></a>sshpass使用</h3><h4 id="直接远程连接某主机"><a href="#直接远程连接某主机" class="headerlink" title="直接远程连接某主机"></a>直接远程连接某主机</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; ssh &#123;用户名&#125;@&#123;主机IP&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="远程连接指定ssh的端口"><a href="#远程连接指定ssh的端口" class="headerlink" title="远程连接指定ssh的端口"></a>远程连接指定ssh的端口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; ssh -p $&#123;端口&#125; &#123;用户名&#125;@&#123;主机IP&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从密码文件读取文件内容作为密码去远程连接主机"><a href="#从密码文件读取文件内容作为密码去远程连接主机" class="headerlink" title="从密码文件读取文件内容作为密码去远程连接主机"></a>从密码文件读取文件内容作为密码去远程连接主机</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -f &#123;密码文本文件&#125; ssh &#123;用户名&#125;@&#123;主机IP&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从远程主机上拉取文件到本地"><a href="#从远程主机上拉取文件到本地" class="headerlink" title="从远程主机上拉取文件到本地"></a>从远程主机上拉取文件到本地</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; scp &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; $&#123;本地主机目录&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将主机目录文件拷贝至远程主机目录"><a href="#将主机目录文件拷贝至远程主机目录" class="headerlink" title="将主机目录文件拷贝至远程主机目录"></a>将主机目录文件拷贝至远程主机目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; scp $&#123;本地主机目录&#125; &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125;</span><br></pre></td></tr></table></figure>

<h4 id="远程连接主机并执行命令"><a href="#远程连接主机并执行命令" class="headerlink" title="远程连接主机并执行命令"></a>远程连接主机并执行命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; ssh -o StrictHostKeyChecking&#x3D;no &#123;用户名&#125;@&#123;主机IP&#125; &#39;rm -rf &#x2F;tmp&#x2F;test&#39;</span><br><span class="line">-o StrictHostKeyChecking&#x3D;no ：忽略密码提示</span><br></pre></td></tr></table></figure>

<h4 id="配置远程主机免密"><a href="#配置远程主机免密" class="headerlink" title="配置远程主机免密"></a>配置远程主机免密</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshpass -p &#123;密码&#125; ssh-copy-id -o StrictHostKeyChecking&#x3D;no -i ~&#x2F;.ssh&#x2F;id_rsa.pub &#123;用户名&#125;@&#123;主机IP&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/a632189007/article/details/79310897" target="_blank" rel="noopener external nofollow noreferrer">sshpass命令使用</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac OS X系统下 用dd命令将iso镜像写入u盘</title>
    <url>/articles/4213798049.html</url>
    <content><![CDATA[<h3 id="操作概述"><a href="#操作概述" class="headerlink" title="操作概述"></a>操作概述</h3><p>1、找出U盘挂载的路径，使用如下命令：diskutil list<br>2、将U盘unmount（将N替换为挂载路径）：diskutil unmountDisk /dev/disk[N]<br>3、写入U盘：sudo dd if=iso路径 of=/dev/rdisk[N] bs=1m  rdisk 中加入r可以让写入速度加快</p>
<a id="more"></a>
<h3 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><ol>
<li>查看u盘盘符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ diskutil list</span><br><span class="line">/dev/disk0 (internal, physical):</span><br><span class="line"><span class="meta">#</span><span class="bash">: TYPE NAME SIZE IDENTIFIER</span></span><br><span class="line">0: GUID_partition_scheme *251.0 GB disk0</span><br><span class="line">1: EFI EFI 209.7 MB disk0s1</span><br><span class="line">2: Apple_CoreStorage Macintosh HD 250.1 GB disk0s2</span><br><span class="line">3: Apple_Boot Recovery HD 650.0 MB disk0s3</span><br><span class="line">/dev/disk1 (internal, virtual):</span><br><span class="line"><span class="meta">#</span><span class="bash">: TYPE NAME SIZE IDENTIFIER</span></span><br><span class="line">0: Apple_HFS Macintosh HD +249.8 GB disk1</span><br><span class="line">Logical Volume on disk0s2</span><br><span class="line">E2BD4617-5A22-46A9-A6F4-D54E3EE92BBC</span><br><span class="line">Unencrypted</span><br><span class="line">/dev/disk2 (external, physical):</span><br><span class="line"><span class="meta">#</span><span class="bash">: TYPE NAME SIZE IDENTIFIER</span></span><br><span class="line">0: FDisk_partition_scheme *62.0 GB disk2</span><br><span class="line">1: DOS_FAT_32 UNTITLED 1 62.0 GB disk2s1</span><br><span class="line">/dev/disk3 (disk image):</span><br><span class="line"><span class="meta">#</span><span class="bash">: TYPE NAME SIZE IDENTIFIER</span></span><br><span class="line">0: FDisk_partition_scheme +3.1 GB disk3</span><br><span class="line">1: 0x17 3.0 GB disk3s1</span><br><span class="line">2: DOS_FAT_12 NO NAME 110.1 MB disk3s2</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>取消挂载U盘</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ diskutil umountDisk &#x2F;dev&#x2F;disk2</span><br><span class="line">Unmount of all volumes on disk2 was successful</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>用dd命令写入U盘</li>
</ol>
<p>说明：</p>
<p>（1）sudo dd if=源路径 of=/dev/r卷标 bs=1m ［‘r’ 会让命令执行加快一点］ ［‘bs’为一次填充的容量］</p>
<p><em>（2）获取映像名称和完整路径可以直接将文件拖入终端，即在终端中显示</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ sudo dd if&#x3D;&#x2F;xxx.iso of&#x3D;&#x2F;dev&#x2F;rdisk2 bs&#x3D;1m</span><br><span class="line">2934+1 records in</span><br><span class="line">2934+1 records out</span><br><span class="line">3076767744 bytes transferred in 149.567568 secs (20571089 bytes&#x2F;sec)</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>查看磁盘进度，可以用iostat命令查看磁盘写入状态</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ iostat -w 2</span><br><span class="line">disk0 disk2 disk3 cpu load average</span><br><span class="line">KB/t tps MB/s KB/t tps MB/s KB/t tps MB/s us sy id 1m 5m 15m</span><br><span class="line">102.71 25 2.49 598.70 0 0.15 24.76 1 0.02 5 4 90 2.04 1.71 1.69</span><br><span class="line">512.00 48 23.93 1024.00 24 23.93 0.00 0 0.00 1 3 96 2.11 1.74 1.69</span><br><span class="line">473.00 26 11.99 1024.00 12 11.98 0.00 0 0.00 3 3 93 2.11 1.74 1.69</span><br><span class="line">491.68 50 23.99 1024.00 24 23.99 0.00 0 0.00 24 8 68 2.11 1.74 1.69</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>操作完毕后将U盘弹出</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ diskutil eject &#x2F;dev&#x2F;disk2</span><br><span class="line">Disk &#x2F;dev&#x2F;disk2 ejected</span><br></pre></td></tr></table></figure>

<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>将iso转换成dmg 转iso (刻录非必须)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UDRW 替换为 UDTO</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lapommedeMacBook-Pro:~ lapomme$ sudo hdiutil convert -format UDRW -o &#x2F;linux.dmg kali.iso</span><br><span class="line">Password:</span><br><span class="line">正在读取Master Boot Record（MBR：0）…</span><br><span class="line">正在读取Kali Live （Apple_ISO：1）…</span><br><span class="line">正在读取（Windows_NTFS_Hidden：2）…</span><br><span class="line">............................................................................</span><br><span class="line">正在读取（DOS_FAT_12：3）…</span><br><span class="line">..............................................................................</span><br><span class="line">已耗时：10.178s</span><br><span class="line">速度：288.3M 字节&#x2F;秒</span><br><span class="line">节省：0.0%</span><br><span class="line">created: &#x2F;linux.dmg</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/bindong/p/5818497.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/bindong/p/5818497.html</a></p>
<p><a href="http://osxdaily.com/2015/06/05/copy-iso-to-usb-drive-mac-os-x-command/" target="_blank" rel="noopener external nofollow noreferrer">http://osxdaily.com/2015/06/05/copy-iso-to-usb-drive-mac-os-x-command/</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim/Vi中查找和替换操作</title>
    <url>/articles/2635382596.html</url>
    <content><![CDATA[<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>在normal模式下按下<code>/</code>即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下<code>n</code>查找下一个，按下<code>N</code>查找上一个。</p>
<p>Vim查找支持正则表达式，例如<code>/vim$</code>匹配行尾的<code>&quot;vim&quot;</code>。 需要查找特殊字符需要转义，例如<code>/vim\$</code>匹配<code>&quot;vim$&quot;</code>。</p>
<a id="more"></a>
<h4 id="大小写敏感查找"><a href="#大小写敏感查找" class="headerlink" title="大小写敏感查找"></a>大小写敏感查找</h4><p>在查找模式中加入<code>\c</code>表示大小写不敏感查找，<code>\C</code>表示大小写敏感查找。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;foo\c</span><br></pre></td></tr></table></figure>

<p>将会查找所有的<code>&quot;foo&quot;</code>,<code>&quot;FOO&quot;</code>,<code>&quot;Foo&quot;</code>等字符串。</p>
<h4 id="大小写敏感配置"><a href="#大小写敏感配置" class="headerlink" title="大小写敏感配置"></a>大小写敏感配置</h4><p>Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">" 设置默认进行大小写不敏感查找</span><br><span class="line">set ignorecase</span><br><span class="line">" 如果有一个大写字母，则切换到大小写敏感查找</span><br><span class="line">set smartcase</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将上述设置粘贴到你的<code>~/.vimrc</code>，重新打开Vim即可生效</p>
</blockquote>
<h4 id="查找当前单词"><a href="#查找当前单词" class="headerlink" title="查找当前单词"></a>查找当前单词</h4><p>在normal模式下按下<code>*</code>即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为<code>foo</code>， 可以匹配<code>foo bar</code>中的<code>foo</code>，但不可匹配<code>foobar</code>中的<code>foo</code>。 这在查找函数名、变量名时非常有用。</p>
<p>按下<code>g*</code>即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即<code>foo bar</code>和<code>foobar</code>中的<code>foo</code>均可被匹配到。</p>
<h3 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h3><p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure>

<p>例如<code>:%s/foo/bar/g</code>会在全局范围(<code>%</code>)查找<code>foo</code>并替换为<code>bar</code>，所有出现都会被替换（<code>g</code>）</p>
<h4 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h4><p>作用范围分为当前行、全文、选区等等。</p>
<p>当前行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:s/foo/bar/g</span><br></pre></td></tr></table></figure>

<p>全文：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar/g</span><br></pre></td></tr></table></figure>

<p>选区，在Visual模式下选择区域后输入<code>:</code>，Vim即可自动补全为 `:’&lt;,’&gt;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:'&lt;,'&gt;s/foo/bar/g</span><br></pre></td></tr></table></figure>

<p>2-11行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:5,12s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<p>当前行<code>.</code>与接下来两行<code>+2</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:.,+2s/foo/bar/g</span><br></pre></td></tr></table></figure>

<h3 id="替换标志"><a href="#替换标志" class="headerlink" title="替换标志"></a>替换标志</h3><p>上文中命令结尾的<code>g</code>即是替换标志之一，表示全局<code>global</code>替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：</p>
<p>空替换标志表示只替换从光标位置开始，目标的第一次出现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar</span><br></pre></td></tr></table></figure>

<p><code>i</code>表示大小写不敏感查找，<code>I</code>表示大小写敏感：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar/i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等效于模式中的\c（不敏感）或\C（敏感）</span></span><br><span class="line">:%s/foo\c/bar</span><br></pre></td></tr></table></figure>

<p><code>c</code>表示需要确认，例如全局查找<code>&quot;foo&quot;</code>替换为<code>&quot;bar&quot;</code>并且需要确认：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar/gc</span><br></pre></td></tr></table></figure>

<p>回车后Vim会将光标移动到每一次<code>&quot;foo&quot;</code>出现的位置，并提示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">replace with bar (y/n/a/q/l/^E/^Y)?</span><br></pre></td></tr></table></figure>

<p>按下<code>y</code>表示替换，<code>n</code>表示不替换，<code>a</code>表示替换所有，<code>q</code>表示退出查找模式， <code>l</code>表示替换当前位置并退出。<code>^E</code>与<code>^Y</code>是光标移动快捷键，参考： <a href="http://harttle.com/2015/11/07/vim-cursor.html" target="_blank" rel="noopener external nofollow noreferrer">Vim中如何快速进行光标移</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/huxinga/p/7942194.html" target="_blank" rel="noopener external nofollow noreferrer">关于在vim中的查找和替换</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中使用sed修改文件出错解决方法</title>
    <url>/articles/2290993714.html</url>
    <content><![CDATA[<h2 id="Mac中使用sed修改文件出错解决方法"><a href="#Mac中使用sed修改文件出错解决方法" class="headerlink" title="Mac中使用sed修改文件出错解决方法"></a>Mac中使用sed修改文件出错解决方法</h2><p>sed是linux命令，用于处理文件内容（修改，替换等），mac中都可以使用，但发现相同的替换命令在linux可以正常执行，在mac则执行失败</p>
<a id="more"></a>

<h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><p>在linux执行正常，但在mac环境下执行出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令</span><br><span class="line">sed -i &quot;s&#x2F;shell&#x2F;test&#x2F;g&quot; $(grep &#39;shell&#39; -rl .&#x2F;)</span><br><span class="line">#错误信息</span><br><span class="line">sed: 1: &quot;.&#x2F;&#x2F;make-RobotFramework- ...&quot;: invalid command code .</span><br></pre></td></tr></table></figure>

<p>man sed 查看原因，找到 -i 参数的说明</p>
<blockquote>
<p>-i extension<br>Edit files in-place, saving backups with the specified extension. If a zero-length extension is given, no backup will be saved. It is not recommended to<br>give a zero-length extension when in-place editing files, as you risk corruption or partial content in situations where disk space is exhausted, etc.</p>
</blockquote>
<p>原来sed -i需要带一个字符串作为备份源文件的文件名称，如果这个字符串长度为0，则不备份。<br>例如执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 加_bak备份,则会创建一个xxx_bak的备份文件，文件内容为修改前的xxx内容</span><br><span class="line">sed -i &quot;_bak&quot; &quot;s&#x2F;shell&#x2F;test&#x2F;g&quot; $(grep &#39;shell&#39; -rl .&#x2F;)</span><br><span class="line"></span><br><span class="line"># 空字符不备份</span><br><span class="line">sed -i &quot;&quot; &quot;s&#x2F;shell&#x2F;test&#x2F;g&quot; $(grep &#39;shell&#39; -rl .&#x2F;)</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/fdipzone/article/details/51253955" target="_blank" rel="noopener external nofollow noreferrer">mac环境使用sed修改文件出错的解决方法</a></p>
<p><a href="https://blog.csdn.net/beijihukk/article/details/68947083" target="_blank" rel="noopener external nofollow noreferrer">sed: 1: “…”: invalid command code on Mac OS</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 操作</title>
    <url>/articles/2596788713.html</url>
    <content><![CDATA[<h3 id="MAC-OS上配置Lantern代理"><a href="#MAC-OS上配置Lantern代理" class="headerlink" title="MAC OS上配置Lantern代理"></a>MAC OS上配置Lantern代理</h3><ol>
<li><p>首先确保设备在同一个局域网内</p>
</li>
<li><p>先关闭你的 Lantern，然后通过命令行启动 Lantern，在电脑终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Lantern.app&#x2F;Contents&#x2F;MacOS&#x2F;lantern -addr 0.0.0.0:8787</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到Mac的IP地址，在需要代理的机器上配置<mac-ip>:8787</p>
<a id="more"></a>

</li>
</ol>
<h3 id="MAC-OS上获取Finder中文件路径"><a href="#MAC-OS上获取Finder中文件路径" class="headerlink" title="MAC OS上获取Finder中文件路径"></a>MAC OS上获取Finder中文件路径</h3><ul>
<li><p>打开终端，输入下面的命令，Finder就能在顶部看见完整的地址了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>在Finder里，对选中的文件，command+option+c，复制到剪贴板</li>
</ul>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-进程在后台可靠运行的几种方法</title>
    <url>/articles/600435499.html</url>
    <content><![CDATA[<p>我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题</p>
<a id="more"></a>
<h3 id="nohup-setsid-amp"><a href="#nohup-setsid-amp" class="headerlink" title="nohup/setsid/&amp;"></a>nohup/setsid/&amp;</h3><hr>
<ul>
<li><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>如果只是临时有一个命令需要长时间运行，什么方法能最简便的保证它在后台稳定运行呢？</p>
</li>
</ul>
<ul>
<li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程</p>
<ul>
<li><p><strong>nohup</strong></p>
<p>nohup 无疑是我们首先想到的办法。顾名思义，nohup 的用途就是让提交的命令忽略 hangup 信号。让我们先来看一下 nohup 的帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NOHUP(1)                        User Commands                        NOHUP(1)</span><br><span class="line"> </span><br><span class="line">NAME</span><br><span class="line">       nohup - run a command immune to hangups, with output to a non-tty</span><br><span class="line"> </span><br><span class="line">SYNOPSIS</span><br><span class="line">       nohup COMMAND [ARG]...</span><br><span class="line">       nohup OPTION</span><br><span class="line"> </span><br><span class="line">DESCRIPTION</span><br><span class="line">       Run COMMAND, ignoring hangup signals.</span><br><span class="line"> </span><br><span class="line">       --help display this help and exit</span><br><span class="line"> </span><br><span class="line">       --version</span><br><span class="line">              output version information and exit</span><br></pre></td></tr></table></figure>

<p>​</p>
<p>可见，nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上<strong>“&amp;”</strong>来将命令同时放入后台运行，也可用<code>&quot;&gt;*filename* 2&gt;&amp;1&quot;</code>来更改缺省的重定向文件名</p>
<h5 id="nohup-示例"><a href="#nohup-示例" class="headerlink" title="nohup 示例"></a>nohup 示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# nohup ping www.ibm.com &amp;</span><br><span class="line">[1] 3059</span><br><span class="line">nohup: appending output to &#96;nohup.out&#39;</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep 3059</span><br><span class="line">root      3059   984  0 21:06 pts&#x2F;3    00:00:00 ping www.ibm.com</span><br><span class="line">root      3067   984  0 21:06 pts&#x2F;3    00:00:00 grep 3059</span><br><span class="line">[root@pvcent107 ~]# jobs -l</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>setsid</strong></p>
<p>nohup 无疑能通过忽略 HUP 信号来使我们的进程避免中途被中断，但如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。让我们先来看一下 setsid 的帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SETSID(8)                 Linux Programmer’s Manual                 SETSID(8)</span><br><span class="line"> </span><br><span class="line">NAME</span><br><span class="line">       setsid - run a program in a new session</span><br><span class="line"> </span><br><span class="line">SYNOPSIS</span><br><span class="line">       setsid program [ arg ... ]</span><br><span class="line"> </span><br><span class="line">DESCRIPTION</span><br><span class="line">       setsid runs a program in a new session.</span><br></pre></td></tr></table></figure>

<p>可见 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可。</p>
<h5 id="setsid-示例"><a href="#setsid-示例" class="headerlink" title="setsid 示例"></a>setsid 示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# setsid ping www.ibm.com</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep www.ibm.com</span><br><span class="line">root     31094     1  0 07:28 ?        00:00:00 ping www.ibm.com</span><br><span class="line">root     31102 29217  0 07:29 pts&#x2F;4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]#</span><br></pre></td></tr></table></figure>

<p>值得注意的是，上例中我们的进程 ID(PID)为31094，而它的父 ID（PPID）为1（即为 init 进程 ID），并不是当前终端的进程 ID。请将此例与<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html#nohup" target="_blank" rel="noopener external nofollow noreferrer">nohup 例</a>中的父 ID 做比较</p>
</li>
<li><p><strong>&amp;</strong></p>
<p>这里还有一个关于 subshell 的小技巧。我们知道，将一个或多个命名包含在“()”中就能让这些命令在子 shell 中运行中，从而扩展出很多有趣的功能，我们现在要讨论的就是其中之一。</p>
<p>当我们将”&amp;”也放入“()”内之后，我们就会发现所提交的作业并不在作业列表中，也就是说，是无法通过<code>jobs</code>来查看的。让我们来看看为什么这样就能躲过 HUP 信号的影响吧。</p>
<h5 id="subshell-示例"><a href="#subshell-示例" class="headerlink" title="subshell 示例"></a>subshell 示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# (ping www.ibm.com &amp;)</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep www.ibm.com</span><br><span class="line">root     16270     1  0 14:13 pts&#x2F;4    00:00:00 ping www.ibm.com</span><br><span class="line">root     16278 15362  0 14:13 pts&#x2F;4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]#</span><br></pre></td></tr></table></figure>

<p>从上例中可以看出，新提交的进程的父 ID（PPID）为1（init 进程的 PID），并不是当前终端的进程 ID。因此并不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了。</p>
</li>
</ul>
<h3 id="disown"><a href="#disown" class="headerlink" title="disown"></a>disown</h3><hr>
<ul>
<li><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h4><p>我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？</p>
</li>
<li><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>这时想加 nohup 或者 setsid 已经为时已晚，只能通过作业调度和 disown 来解决这个问题了。让我们来看一下 disown 的帮助信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disown [-ar] [-h] [jobspec ...]</span><br><span class="line">    Without options, each jobspec is  removed  from  the  table  of</span><br><span class="line">    active  jobs.   If  the -h option is given, each jobspec is not</span><br><span class="line">    removed from the table, but is marked so  that  SIGHUP  is  not</span><br><span class="line">    sent  to the job if the shell receives a SIGHUP.  If no jobspec</span><br><span class="line">    is present, and neither the -a nor the -r option  is  supplied,</span><br><span class="line">    the  current  job  is  used.  If no jobspec is supplied, the -a</span><br><span class="line">    option means to remove or mark all jobs; the -r option  without</span><br><span class="line">    a  jobspec  argument  restricts operation to running jobs.  The</span><br><span class="line">    return value is 0 unless a jobspec does  not  specify  a  valid</span><br><span class="line">    job.</span><br></pre></td></tr></table></figure>

<p>可以看出，我们可以用如下方式来达成我们的目的。</p>
<ul>
<li><p>灵活运用 CTRL+Z</p>
<p><code>在我们的日常工作中，我们可以用 CTRL+Z 来将当前进程挂起到后台暂停运行，执行一些别的操作，然后再用 fg 来将挂起的进程重新放回前台（也可用 bg 来将挂起的进程放在后台）继续运行。这样我们就可以在一个终端内灵活切换运行多个任务，这一点在调试代码时尤为有用。因为将代码编辑器挂起到后台再重新放回时，光标定位仍然停留在上次挂起时的位置，避免了重新定位的麻烦。</code></p>
</li>
<li><p>用<code>disown -h *jobspec*</code>来使<strong>某个作业</strong>忽略HUP信号。</p>
</li>
<li><p>用<code>disown -ah</code>来使<strong>所有的作业</strong>都忽略HUP信号。</p>
</li>
<li><p>用<code>disown -rh</code>来使<strong>正在运行的作业</strong>忽略HUP信号。</p>
</li>
</ul>
<p>需要注意的是，当使用过 disown 之后，会将把目标作业从作业列表中移除，我们将不能再使用<code>jobs</code>来查看它，但是依然能够用<code>ps -ef</code>查找到它。</p>
<p>但是还有一个问题，这种方法的操作对象是作业，如果我们在运行命令时在结尾加了<strong>“&amp;”</strong>来使它成为一个作业并在后台运行，那么就万事大吉了，我们可以通过<code>jobs</code>命令来得到所有作业的列表。但是如果并没有把当前命令作为作业来运行，如何才能得到它的作业号呢？答案就是用 CTRL+Z（按住Ctrl键的同时按住z键）了！</p>
<p>CTRL+Z 的用途就是将当前进程挂起（Suspend），然后我们就可以用<code>jobs</code>命令来查询它的作业号，再用<code>bg *jobspec*</code>来将它放入后台并继续运行。需要注意的是，如果挂起会影响当前进程的运行结果，请慎用此方法。</p>
<h5 id="disown-示例1（如果提交命令时已经用“-amp-”将命令放入后台运行，则可以直接使用“disown”）"><a href="#disown-示例1（如果提交命令时已经用“-amp-”将命令放入后台运行，则可以直接使用“disown”）" class="headerlink" title="disown 示例1（如果提交命令时已经用“&amp;”将命令放入后台运行，则可以直接使用“disown”）"></a>disown 示例1（如果提交命令时已经用“&amp;”将命令放入后台运行，则可以直接使用“disown”）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 build]# cp -r testLargeFile largeFile &amp;</span><br><span class="line">[1] 4825</span><br><span class="line">[root@pvcent107 build]# jobs</span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile &amp;</span><br><span class="line">[root@pvcent107 build]# disown -h %1</span><br><span class="line">[root@pvcent107 build]# ps -ef |grep largeFile</span><br><span class="line">root      4825   968  1 09:46 pts&#x2F;4    00:00:00 cp -i -r testLargeFile largeFile</span><br><span class="line">root      4853   968  0 09:46 pts&#x2F;4    00:00:00 grep largeFile</span><br><span class="line">[root@pvcent107 build]# logout</span><br></pre></td></tr></table></figure>

<h5 id="disown-示例2（如果提交命令时未使用“-amp-”将命令放入后台运行，可使用-CTRL-Z-和“bg”将其放入后台，再使用“disown”）"><a href="#disown-示例2（如果提交命令时未使用“-amp-”将命令放入后台运行，可使用-CTRL-Z-和“bg”将其放入后台，再使用“disown”）" class="headerlink" title="disown 示例2（如果提交命令时未使用“&amp;”将命令放入后台运行，可使用 CTRL+Z 和“bg”将其放入后台，再使用“disown”）"></a>disown 示例2（如果提交命令时未使用“&amp;”将命令放入后台运行，可使用 CTRL+Z 和“bg”将其放入后台，再使用“disown”）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 build]# cp -r testLargeFile largeFile2</span><br><span class="line"> </span><br><span class="line">[1]+  Stopped                 cp -i -r testLargeFile largeFile2</span><br><span class="line">[root@pvcent107 build]# bg %1</span><br><span class="line">[1]+ cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]# jobs</span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]# disown -h %1</span><br><span class="line">[root@pvcent107 build]# ps -ef |grep largeFile2</span><br><span class="line">root      5790  5577  1 10:04 pts&#x2F;3    00:00:00 cp -i -r testLargeFile largeFile2</span><br><span class="line">root      5824  5577  0 10:05 pts&#x2F;3    00:00:00 grep largeFile2</span><br><span class="line">[root@pvcent107 build]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><hr>
<ul>
<li><h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>我们已经知道了如何让进程免受 HUP 信号的影响，但是如果有大量这种命令需要在稳定的后台里运行，如何避免对每条命令都做这样的操作呢？</p>
</li>
<li><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>此时最方便的方法就是 screen 了。简单的说，screen 提供了 ANSI/VT100 的终端模拟器，使它能够在一个真实终端下运行多个全屏的伪终端。screen 的参数很多，具有很强大的功能，我们在此仅介绍其常用功能以及简要分析一下为什么使用 screen 能够避免 HUP 信号的影响。我们先看一下 screen 的帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCREEN(1)                                                           SCREEN(1)</span><br><span class="line"> </span><br><span class="line">NAME</span><br><span class="line">       screen - screen manager with VT100&#x2F;ANSI terminal emulation</span><br><span class="line"> </span><br><span class="line">SYNOPSIS</span><br><span class="line">       screen [ -options ] [ cmd [ args ] ]</span><br><span class="line">       screen -r [[pid.]tty[.host]]</span><br><span class="line">       screen -r sessionowner&#x2F;[[pid.]tty[.host]]</span><br><span class="line"> </span><br><span class="line">DESCRIPTION</span><br><span class="line">       Screen  is  a  full-screen  window manager that multiplexes a physical</span><br><span class="line">       terminal between several  processes  (typically  interactive  shells).</span><br><span class="line">       Each  virtual  terminal provides the functions of a DEC VT100 terminal</span><br><span class="line">       and, in addition, several control functions from the  ISO  6429  (ECMA</span><br><span class="line">       48,  ANSI  X3.64)  and ISO 2022 standards (e.g. insert&#x2F;delete line and</span><br><span class="line">       support for multiple character sets).  There is a  scrollback  history</span><br><span class="line">       buffer  for  each virtual terminal and a copy-and-paste mechanism that</span><br><span class="line">       allows moving text regions between windows.</span><br></pre></td></tr></table></figure>

<p>使用 screen 很方便，有以下几个常用选项：</p>
<ul>
<li>用<code>screen -dmS *session name*</code>来建立一个处于断开模式下的会话（并指定其会话名）。</li>
<li>用<code>screen -list</code>来列出所有会话。</li>
<li>用<code>screen -r *session name*</code>来重新连接指定会话。</li>
<li>用快捷键<code>CTRL-a d</code>来暂时断开当前会话。</li>
</ul>
<h5 id="screen-示例"><a href="#screen-示例" class="headerlink" title="screen 示例"></a>screen 示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# screen -dmS Urumchi</span><br><span class="line">[root@pvcent107 ~]# screen -list</span><br><span class="line">There is a screen on:</span><br><span class="line">        12842.Urumchi   (Detached)</span><br><span class="line">1 Socket in &#x2F;tmp&#x2F;screens&#x2F;S-root.</span><br><span class="line"> </span><br><span class="line">[root@pvcent107 ~]# screen -r Urumchi</span><br></pre></td></tr></table></figure>

<p>当我们用“-r”连接到 screen 会话后，我们就可以在这个伪终端里面为所欲为，再也不用担心 HUP 信号会对我们的进程造成影响，也不用给每个命令前都加上“nohup”或者“setsid”了。这是为什么呢？让我来看一下下面两个例子吧</p>
<h5 id="1-未使用-screen-时新进程的进程树"><a href="#1-未使用-screen-时新进程的进程树" class="headerlink" title="1. 未使用 screen 时新进程的进程树"></a>1. 未使用 screen 时新进程的进程树</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# ping www.google.com &amp;</span><br><span class="line">[1] 9499</span><br><span class="line">[root@pvcent107 ~]# pstree -H 9499</span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─2*[sendmail] </span><br><span class="line">     ├─sshd─┬─sshd───bash───pstree</span><br><span class="line">     │       └─sshd───bash───ping</span><br></pre></td></tr></table></figure>

<h5 id="2-使用了-screen-后新进程的进程树"><a href="#2-使用了-screen-后新进程的进程树" class="headerlink" title="2. 使用了 screen 后新进程的进程树"></a>2. 使用了 screen 后新进程的进程树</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@pvcent107 ~]# screen -r Urumchi</span><br><span class="line">[root@pvcent107 ~]# ping www.ibm.com &amp;</span><br><span class="line">[1] 9488</span><br><span class="line">[root@pvcent107 ~]# pstree -H 9488</span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─screen───bash───ping</span><br><span class="line">     ├─2*[sendmail]</span><br></pre></td></tr></table></figure>

<p>而使用了 screen 后就不同了，此时 bash 是 screen 的子进程，而 screen 是 init（PID为1）的子进程。那么当 ssh 断开连接时，HUP 信号自然不会影响到 screen 下面的子进程了</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr>
<p>现在几种方法已经介绍完毕，我们可以根据不同的场景来选择不同的方案。nohup/setsid 无疑是临时需要时最方便的方法，disown 能帮助我们来事后补救当前已经在运行了的作业，而 screen 则是在大批量操作时不二的选择了。</p>
<h4 id="相关主题"><a href="#相关主题" class="headerlink" title="相关主题"></a>相关主题</h4><ul>
<li>“<a href="http://www.ibm.com/developerworks/cn/aix/library/es-unix-sysadmin1.html" target="_blank" rel="noopener external nofollow noreferrer">系统管理员工具包：进程管理技巧</a>”（developerWorks 中国，2006 年 5 月）介绍了 Linux 进程管理的更多技巧。</li>
<li>“<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/" target="_blank" rel="noopener external nofollow noreferrer">Linux 技巧：使用 screen 管理你的远程会话</a>”（developerWorks 中国，2007 年 7 月）介绍了 screen 的更多技巧。</li>
<li>在 <a href="http://www.ibm.com/developerworks/cn/linux/" target="_blank" rel="noopener external nofollow noreferrer">developerWorks 中国网站 Linux 专区</a>中学习更多 Linux 方面的知识。</li>
</ul>
<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p>​    <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html" target="_blank" rel="noopener external nofollow noreferrer">Linux 技巧：让进程在后台可靠运行的几种方法</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS系统中vscode终端字体配置(终端显示异常)</title>
    <url>/articles/3176366975.html</url>
    <content><![CDATA[<h1 id="Mac下配置vscode终端字体"><a href="#Mac下配置vscode终端字体" class="headerlink" title="Mac下配置vscode终端字体"></a><strong>Mac下配置vscode终端字体</strong></h1><h3 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Library&#x2F;Fonts</span><br><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;abertsch&#x2F;Menlo-for-Powerline.git</span><br></pre></td></tr></table></figure>

<h3 id="vscode中设置字体"><a href="#vscode中设置字体" class="headerlink" title="vscode中设置字体"></a>vscode中设置字体</h3><ul>
<li>使用快捷键<code>command+shift+p</code>,  输入<code>Open Settings(JSON)</code></li>
</ul>
<p><img src="https://image.ritboy.com/markdown/202004/9e1c53f7fe10377e378d8b96e2b0af5b.jpg" alt="image-20190510100611190"></p>
<a id="more"></a>

<ul>
<li>在JSON文件中添加以下字段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Menlo for Powerline&quot;</span><br></pre></td></tr></table></figure>

<p> <img src="https://image.ritboy.com/markdown/202004/ef1bb7143b671887c8301a58f2600c42.jpg" alt="image-20190510100803027"></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image.ritboy.com/markdown/202004/b98e9284e2f59a5bf6c1fef858fc7aef.jpg" alt="image-20190510100136153"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/chenghai37/article/details/81417293" target="_blank" rel="noopener external nofollow noreferrer">配置vscode终端字体</a></p>
<p><a href="https://vscode.readthedocs.io/en/latest/getstarted/settings/" target="_blank" rel="noopener external nofollow noreferrer">https://vscode.readthedocs.io/en/latest/getstarted/settings/</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7纯手工安装kubernetes</title>
    <url>/articles/3267317514.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>本文章主要介绍如何通过使用官方提供的二进制包安装配置k8s集群</p>
</blockquote>
<h2 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h2><blockquote>
<p>VMWare上安装三台虚拟机</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ray01: master 172.16.242.129</span><br><span class="line">ray02: node 172.16.242.130</span><br><span class="line">ray03: node 172.16.242.131</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="软件安装前准备工作"><a href="#软件安装前准备工作" class="headerlink" title="软件安装前准备工作"></a>软件安装前准备工作</h3><blockquote>
<p>需要在所有节点上做如下操作</p>
</blockquote>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><blockquote>
<p>如果各个主机启用了防火墙，需要开放Kubernetes各个组件所需要的端口，可以查看<a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">Installing kubeadm</a>中的”Check required ports”一节。 这里简单起见在各节点禁用防火墙：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h4 id="禁用SELINUX"><a href="#禁用SELINUX" class="headerlink" title="禁用SELINUX"></a>禁用SELINUX</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时禁用</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 永久禁用 SELINUX字段改为disabled</span><br><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config	# 或者修改&#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure>

<h4 id="修改k8s-conf文件"><a href="#修改k8s-conf文件" class="headerlink" title="修改k8s.conf文件"></a>修改k8s.conf文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">vm.swappiness &#x3D; 0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>

<h4 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时关闭</span><br><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载（永久关闭swap，重启后生效）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释掉以下字段</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;cl-swap     swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;hosts&lt;&lt;EOF</span><br><span class="line">172.16.242.129 ray01</span><br><span class="line">172.16.242.130 ray02</span><br><span class="line">172.16.242.131 ray03</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h3><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以Master节点ray01为例</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@ray02</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@rah03</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote>
<p>每个节点均要进行操作</p>
</blockquote>
<h4 id="卸载老版本的Docker"><a href="#卸载老版本的Docker" class="headerlink" title="卸载老版本的Docker"></a>卸载老版本的Docker</h4><blockquote>
<p>如果有没有老版本Docker，则不需要这步</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-selinux \</span><br><span class="line">           docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="使用yum进行安装"><a href="#使用yum进行安装" class="headerlink" title="使用yum进行安装"></a>使用yum进行安装</h4><blockquote>
<p>v1.11.0版本推荐使用docker v17.03, v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。 测试发现17.09无法正常使用，不能使用资源限制(内存CPU)。每个节点均要安装，目前官网建议安装17.03版本的docker，<a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener external nofollow noreferrer">官网链接</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce docker-ce-selinux</span><br><span class="line"># 注意：</span><br><span class="line"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span><br><span class="line"># vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br><span class="line">#   将 [docker-ce-test] 下方的 enabled&#x3D;0 修改为 enabled&#x3D;1</span><br><span class="line">#</span><br><span class="line"># 安装指定版本的Docker-CE:</span><br><span class="line"># Step 3.1: 查找Docker-CE的版本:</span><br><span class="line"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">#   Loading mirror speeds from cached hostfile</span><br><span class="line">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   Available Packages</span><br><span class="line"># Step 3.2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span><br><span class="line">sudo yum -y --setopt&#x3D;obsoletes&#x3D;0 install docker-ce-[VERSION] \</span><br><span class="line">docker-ce-selinux-[VERSION]</span><br><span class="line"></span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="docker安装问题小结"><a href="#docker安装问题小结" class="headerlink" title="docker安装问题小结"></a>docker安装问题小结</h4><blockquote>
<p>错误信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: Package: docker-ce-17.03.2.ce-1.el7.centos.x86_64 (docker-ce-stable)</span><br><span class="line">           Requires: docker-ce-selinux &gt;&#x3D; 17.03.2.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.0.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.1.ce-1.el7.centos</span><br><span class="line">           Available: docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch (docker-ce-stable)</span><br><span class="line">               docker-ce-selinux &#x3D; 17.03.2.ce-1.el7.centos</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决办法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 要先安装docker-ce-selinux-17.03.2.ce，否则安装docker-ce会报错</span><br><span class="line"># 注意docker-ce-selinux的版本 要与docker的版本一直</span><br><span class="line">yum install -y https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">yum -y install https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="https://blog.csdn.net/csdn_duomaomao/article/details/79019764" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/csdn_duomaomao/article/details/79019764</a></p>
<h4 id="Docker安装校验"><a href="#Docker安装校验" class="headerlink" title="Docker安装校验"></a>Docker安装校验</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.2-ce</span><br><span class="line"> API version:  1.27</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   f5ec1e2</span><br><span class="line"> Built:        Tue Jun 27 02:21:36 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.2-ce</span><br><span class="line"> API version:  1.27 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   f5ec1e2</span><br><span class="line"> Built:        Tue Jun 27 02:21:36 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure>

<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://yq.aliyun.com/articles/110806" target="_blank" rel="noopener external nofollow noreferrer">https://yq.aliyun.com/articles/110806</a></p>
<h3 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h3><blockquote>
<p>只在Master节点<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line"># 百度云链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1kgV40nwHy1IKnnLD6zH4cQ 密码：alyj</span><br><span class="line">mkdir -pv &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">cd &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl_linux-amd64</span><br><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssljson_linux-amd64</span><br><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">mv cfssl-certinfo_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl-certinfo</span><br><span class="line">mv cfssl_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl</span><br><span class="line">mv cfssljson_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssljson</span><br><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl*</span><br></pre></td></tr></table></figure>

<h3 id="配置CA"><a href="#配置CA" class="headerlink" title="配置CA"></a>配置CA</h3><blockquote>
<p>只在Master节点<code>ray01</code>节点操作</p>
<p>此处的CA配置，后面配置etcd和k8s时都需要使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -pv $HOME&#x2F;ssl &amp;&amp; cd $HOME&#x2F;ssl</span><br><span class="line">cat &gt;ca-config.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;kubernetes&quot;: &#123;</span><br><span class="line">        &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="配置etcd集群"><a href="#配置etcd集群" class="headerlink" title="配置etcd集群"></a>配置etcd集群</h3><h4 id="生成etcd-ca"><a href="#生成etcd-ca" class="headerlink" title="生成etcd-ca"></a>生成etcd-ca</h4><blockquote>
<p>只在Master节点<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 写入配置</span><br><span class="line">cat &gt;etcd-ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;Etcd Security&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 etcd root ca</span><br><span class="line">cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca</span><br><span class="line"></span><br><span class="line">cat &gt;etcd-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;172.16.242.129&quot;,</span><br><span class="line">      &quot;172.16.242.130&quot;,</span><br><span class="line">      &quot;172.16.242.131&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;Etcd Security&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 etcd ca</span><br><span class="line">cfssl gencert -ca&#x3D;etcd-ca.pem -ca-key&#x3D;etcd-ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">mkdir -pv &#x2F;etc&#x2F;etcd&#x2F;ssl</span><br><span class="line">cp etcd*.pem &#x2F;etc&#x2F;etcd&#x2F;ssl</span><br><span class="line">ls &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd*.pem</span><br><span class="line"></span><br><span class="line"># 复制到其他节点</span><br><span class="line">cd &#x2F;etc&#x2F;etcd &amp;&amp; tar cvzf etcd-ssl.tgz ssl&#x2F;</span><br><span class="line">scp &#x2F;etc&#x2F;etcd&#x2F;etcd-ssl.tgz ray02:~&#x2F;</span><br><span class="line">scp &#x2F;etc&#x2F;etcd&#x2F;etcd-ssl.tgz ray03:~&#x2F;</span><br><span class="line">ssh ray02 &#39;mkdir -pv &#x2F;etc&#x2F;etcd &amp;&amp; tar xf etcd-ssl.tgz -C &#x2F;etc&#x2F;etcd &amp;&amp; ls -l &#x2F;etc&#x2F;etcd&#x2F;ssl&#39;</span><br><span class="line">ssh ray03 &#39;mkdir -pv &#x2F;etc&#x2F;etcd &amp;&amp; tar xf etcd-ssl.tgz -C &#x2F;etc&#x2F;etcd &amp;&amp; ls -l &#x2F;etc&#x2F;etcd&#x2F;ssl&#39;</span><br></pre></td></tr></table></figure>

<h4 id="安装启动etcd"><a href="#安装启动etcd" class="headerlink" title="安装启动etcd"></a>安装启动etcd</h4><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line"># 百度云链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1IVHyMqiJrlq9gmbF49Ly3Q 密码：w5nx</span><br><span class="line">mkdir -pv &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">cd &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;etcd&#x2F;releases&#x2F;download&#x2F;v3.2.18&#x2F;etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 注意：可以用scp拷贝etcd安装包到其他节点</span><br><span class="line"># scp etcd-v3.2.18-linux-amd64.tar.gz ray02:&#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line"># scp etcd-v3.2.18-linux-amd64.tar.gz ray03:&#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line"></span><br><span class="line">tar xf etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.2.18-linux-amd64 &#x2F;usr&#x2F;local&#x2F;etcd-v3.2.18</span><br><span class="line">ln -sv &#x2F;usr&#x2F;local&#x2F;etcd-v3.2.18 &#x2F;usr&#x2F;local&#x2F;etcd</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;etcd &amp;&amp; mkdir bin &amp;&amp; mv etcd etcdctl bin</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etcd&#x2F;bin&#x2F;etcd --version</span><br><span class="line">cd $HOME</span><br><span class="line"></span><br><span class="line"># 配置启动脚本</span><br><span class="line">export ETCD_NAME&#x3D;$(hostname)</span><br><span class="line">export INTERNAL_IP&#x3D;$(hostname -i | awk &#39;&#123;print $NF&#125;&#39;)</span><br><span class="line">export ECTD_CLUSTER&#x3D;&#39;ray01&#x3D;https:&#x2F;&#x2F;172.16.242.129:2380,ray02&#x3D;https:&#x2F;&#x2F;172.16.242.130:2380,ray03&#x3D;https:&#x2F;&#x2F;172.16.242.131:2380&#39;</span><br><span class="line">mkdir -pv &#x2F;data&#x2F;etcd</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Etcd Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;notify</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;data&#x2F;etcd</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;etcd&#x2F;etcd.conf</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;etcd&#x2F;bin&#x2F;etcd \\</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \\</span><br><span class="line">  --cert-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\</span><br><span class="line">  --key-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\</span><br><span class="line">  --peer-cert-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\</span><br><span class="line">  --peer-key-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\</span><br><span class="line">  --trusted-ca-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-ca.pem \\</span><br><span class="line">  --peer-trusted-ca-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-ca.pem \\</span><br><span class="line">  --initial-advertise-peer-urls https:&#x2F;&#x2F;$&#123;INTERNAL_IP&#125;:2380 \\</span><br><span class="line">  --listen-peer-urls https:&#x2F;&#x2F;$&#123;INTERNAL_IP&#125;:2380 \\</span><br><span class="line">  --listen-client-urls https:&#x2F;&#x2F;$&#123;INTERNAL_IP&#125;:2379,https:&#x2F;&#x2F;127.0.0.1:2379 \\</span><br><span class="line">  --advertise-client-urls https:&#x2F;&#x2F;$&#123;INTERNAL_IP&#125;:2379 \\</span><br><span class="line">  --initial-cluster-token my-etcd-token \\</span><br><span class="line">  --initial-cluster $ECTD_CLUSTER \\</span><br><span class="line">  --initial-cluster-state new \\</span><br><span class="line">  --data-dir&#x3D;&#x2F;data&#x2F;etcd</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;5</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动并设置开机启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl enable etcd</span><br></pre></td></tr></table></figure>

<h4 id="查看etcd集群状态"><a href="#查看etcd集群状态" class="headerlink" title="查看etcd集群状态"></a>查看etcd集群状态</h4><blockquote>
<p>可以在每个节点上执行以下命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etcd&#x2F;bin&#x2F;etcdctl --endpoints &quot;https:&#x2F;&#x2F;127.0.0.1:2379&quot; \</span><br><span class="line">  --ca-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-ca.pem \</span><br><span class="line">  --cert-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \</span><br><span class="line">  --key-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \</span><br><span class="line">  cluster-health</span><br><span class="line">  </span><br><span class="line"># 执行结果</span><br><span class="line">member 2348823a457a26 is healthy: got healthy result from https:&#x2F;&#x2F;172.16.242.131:2379</span><br><span class="line">member 3a4edb8ea263762b is healthy: got healthy result from https:&#x2F;&#x2F;172.16.242.130:2379</span><br><span class="line">member c8530ac4a96f8c86 is healthy: got healthy result from https:&#x2F;&#x2F;172.16.242.129:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure>

<h3 id="生成k8s集群的CA"><a href="#生成k8s集群的CA" class="headerlink" title="生成k8s集群的CA"></a>生成k8s集群的CA</h3><blockquote>
<p>只需在Master节点<code>ray01</code>上操作，最后把CA拷贝到其他节点（<code>ray02</code>和<code>ray03</code>）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入相关目录</span><br><span class="line">cd $HOME&#x2F;ssl</span><br><span class="line"></span><br><span class="line"># 配置 root ca</span><br><span class="line">cat &gt;ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;ca&quot;: &#123;</span><br><span class="line">     &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 root ca</span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">ls ca*.pem</span><br><span class="line"></span><br><span class="line"># 配置 kube-apiserver ca</span><br><span class="line"># 10.96.0.1 是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP</span><br><span class="line">cat &gt;kube-apiserver-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kube-apiserver&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;172.16.242.129&quot;,</span><br><span class="line">      &quot;172.16.242.130&quot;,</span><br><span class="line">      &quot;172.16.242.131&quot;,</span><br><span class="line">      &quot;10.96.0.1&quot;,</span><br><span class="line">      &quot;kubernetes&quot;,</span><br><span class="line">      &quot;kubernetes.default&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 kube-apiserver ca</span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver</span><br><span class="line">ls kube-apiserver*.pem</span><br><span class="line"></span><br><span class="line"># 配置 kube-controller-manager ca</span><br><span class="line">cat &gt;kube-controller-manager-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;172.16.242.129&quot;,</span><br><span class="line">      &quot;172.16.242.130&quot;,</span><br><span class="line">      &quot;172.16.242.131&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;system:kube-controller-manager&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 kube-controller-manager ca</span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br><span class="line">ls kube-controller-manager*.pem</span><br><span class="line"></span><br><span class="line"># 配置 kube-scheduler ca</span><br><span class="line">cat &gt;kube-scheduler-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-scheduler&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;172.16.242.129&quot;,</span><br><span class="line">      &quot;172.16.242.130&quot;,</span><br><span class="line">      &quot;172.16.242.131&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;system:kube-scheduler&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 kube-scheduler ca</span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br><span class="line">ls kube-scheduler*.pem</span><br><span class="line"></span><br><span class="line"># 配置 kube-proxy ca</span><br><span class="line">cat &gt;kube-proxy-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 kube-proxy ca</span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">ls kube-proxy*.pem</span><br><span class="line"></span><br><span class="line"># 配置 admin ca</span><br><span class="line">cat &gt;admin-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;system:masters&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 生成 admin ca</span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json \</span><br><span class="line">-profile&#x3D;kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line">ls admin*.pem</span><br><span class="line"></span><br><span class="line"># 复制生成的ca</span><br><span class="line">mkdir -pv &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">cp ca*.pem admin*.pem kube-proxy*.pem kube-scheduler*.pem kube-controller-manager*.pem kube-apiserver*.pem &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">cd &#x2F;etc&#x2F;kubernetes &amp;&amp; tar cvzf pki.tgz pki&#x2F;</span><br><span class="line">scp &#x2F;etc&#x2F;kubernetes&#x2F;pki.tgz ray02:~&#x2F;</span><br><span class="line">scp &#x2F;etc&#x2F;kubernetes&#x2F;pki.tgz ray03:~&#x2F;</span><br><span class="line">ssh ray02 &#39;mkdir -pv &#x2F;etc&#x2F;kubernetes &amp;&amp; tar xf pki.tgz -C &#x2F;etc&#x2F;kubernetes &amp;&amp; ls -l &#x2F;etc&#x2F;kubernetes&#x2F;pki&#39;</span><br><span class="line">ssh ray03 &#39;mkdir -pv &#x2F;etc&#x2F;kubernetes &amp;&amp; tar xf pki.tgz -C &#x2F;etc&#x2F;kubernetes &amp;&amp; ls -l &#x2F;etc&#x2F;kubernetes&#x2F;pki&#39;</span><br><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<h3 id="安装k8s文件"><a href="#安装k8s文件" class="headerlink" title="安装k8s文件"></a>安装k8s文件</h3><h4 id="在Master节点k8s的server文件"><a href="#在Master节点k8s的server文件" class="headerlink" title="在Master节点k8s的server文件"></a>在Master节点k8s的server文件</h4><blockquote>
<p>在Master节点<code>ray01</code>上运行以下命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载文件</span><br><span class="line"># 需要翻墙，如果不能翻墙使用如下链接下载</span><br><span class="line"># 链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1OI9Q4BRp7jNJUmsA8IAkbA 密码：tnx5</span><br><span class="line">cd &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">wget https:&#x2F;&#x2F;dl.k8s.io&#x2F;v1.11.0&#x2F;kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">tar xf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">cd kubernetes&#x2F;server&#x2F;bin</span><br><span class="line">mkdir -pv &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0&#x2F;bin</span><br><span class="line">cp kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0&#x2F;bin</span><br><span class="line">ln -sv &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0 &#x2F;usr&#x2F;local&#x2F;kubernetes</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl</span><br><span class="line">kubectl version</span><br><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<h4 id="在其他node节点安装k8s的node文件"><a href="#在其他node节点安装k8s的node文件" class="headerlink" title="在其他node节点安装k8s的node文件"></a>在其他node节点安装k8s的node文件</h4><blockquote>
<p>在<code>ray02</code>和<code>ray03</code>节点上运行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">wget https:&#x2F;&#x2F;dl.k8s.io&#x2F;v1.11.0&#x2F;kubernetes-node-linux-amd64.tar.gz</span><br><span class="line">tar xf kubernetes-node-linux-amd64.tar.gz</span><br><span class="line">cd kubernetes&#x2F;server&#x2F;bin</span><br><span class="line">mkdir -pv &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0&#x2F;bin</span><br><span class="line">cp kube-proxy kubelet kubectl &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0&#x2F;bin</span><br><span class="line">ln -sv &#x2F;usr&#x2F;local&#x2F;kubernetes-v1.11.0 &#x2F;usr&#x2F;local&#x2F;kubernetes</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl</span><br><span class="line">kubectl version</span><br><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<h3 id="生成kubeconfig"><a href="#生成kubeconfig" class="headerlink" title="生成kubeconfig"></a>生成kubeconfig</h3><blockquote>
<p>在Master节点<code>ray01</code>上运行，最后把 kube-proxy.conf 复制到其他节点（<code>ray02</code>和<code>ray03</code>）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 TLS Bootstrapping </span><br><span class="line">export BOOTSTRAP_TOKEN&#x3D;$(head -c 16 &#x2F;dev&#x2F;urandom | od -An -t x | tr -d &#39; &#39;)</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;kubernetes&#x2F;token.csv &lt;&lt;EOF</span><br><span class="line">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 创建 kubelet bootstrapping kubeconfig</span><br><span class="line">cd &#x2F;etc&#x2F;kubernetes</span><br><span class="line">export KUBE_APISERVER&#x3D;&quot;https:&#x2F;&#x2F;172.16.242.129:6443&quot;</span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig&#x3D;kubelet-bootstrap.conf</span><br><span class="line">kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">  --token&#x3D;$&#123;BOOTSTRAP_TOKEN&#125; \</span><br><span class="line">  --kubeconfig&#x3D;kubelet-bootstrap.conf</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;kubelet-bootstrap \</span><br><span class="line">  --kubeconfig&#x3D;kubelet-bootstrap.conf</span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;kubelet-bootstrap.conf</span><br><span class="line"></span><br><span class="line"># 创建 kube-controller-manager kubeconfig</span><br><span class="line">export KUBE_APISERVER&#x3D;&quot;https:&#x2F;&#x2F;172.16.242.129:6443&quot;</span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig&#x3D;kube-controller-manager.conf</span><br><span class="line">kubectl config set-credentials kube-controller-manager \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-controller-manager.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;kube-controller-manager.conf</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;kube-controller-manager \</span><br><span class="line">  --kubeconfig&#x3D;kube-controller-manager.conf</span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;kube-controller-manager.conf</span><br><span class="line"></span><br><span class="line"># 创建 kube-scheduler kubeconfig</span><br><span class="line">export KUBE_APISERVER&#x3D;&quot;https:&#x2F;&#x2F;172.16.242.129:6443&quot;</span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig&#x3D;kube-scheduler.conf</span><br><span class="line">kubectl config set-credentials kube-scheduler \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-scheduler.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;kube-scheduler.conf</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;kube-scheduler \</span><br><span class="line">  --kubeconfig&#x3D;kube-scheduler.conf</span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;kube-scheduler.conf</span><br><span class="line"></span><br><span class="line"># 创建 kube-proxy kubeconfig</span><br><span class="line">export KUBE_APISERVER&#x3D;&quot;https:&#x2F;&#x2F;172.16.242.129:6443&quot;</span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.conf</span><br><span class="line">kubectl config set-credentials kube-proxy \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-proxy.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-proxy-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.conf</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;kube-proxy \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.conf</span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;kube-proxy.conf</span><br><span class="line"></span><br><span class="line"># 创建 admin kubeconfig</span><br><span class="line">export KUBE_APISERVER&#x3D;&quot;https:&#x2F;&#x2F;172.16.242.129:6443&quot;</span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig&#x3D;admin.conf</span><br><span class="line">kubectl config set-credentials admin \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;admin.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;admin-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;admin.conf</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;admin \</span><br><span class="line">  --kubeconfig&#x3D;admin.conf</span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;admin.conf</span><br><span class="line"></span><br><span class="line"># 把 kube-proxy.conf 复制到其他节点</span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf ray02:&#x2F;etc&#x2F;kubernetes</span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf ray03:&#x2F;etc&#x2F;kubernetes</span><br><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<h3 id="配置Master相关组件"><a href="#配置Master相关组件" class="headerlink" title="配置Master相关组件"></a>配置Master相关组件</h3><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<h4 id="配置启动kube-apiserver"><a href="#配置启动kube-apiserver" class="headerlink" title="配置启动kube-apiserver"></a>配置启动kube-apiserver</h4><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制 etcd ca</span><br><span class="line">mkdir -pv &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</span><br><span class="line">cd &#x2F;etc&#x2F;etcd&#x2F;ssl</span><br><span class="line">cp etcd-ca.pem etcd-key.pem etcd.pem &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</span><br><span class="line"></span><br><span class="line"># 生成 service account key</span><br><span class="line">openssl genrsa -out &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.key 2048</span><br><span class="line">openssl rsa -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.key -pubout -out &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.pub</span><br><span class="line">ls &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.*</span><br><span class="line">cd $HOME</span><br><span class="line"></span><br><span class="line"># 启动文件</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kube-apiserver.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Kubernetes API Service</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;config</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;apiserver</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kube-apiserver \\</span><br><span class="line">	    \$KUBE_LOGTOSTDERR \\</span><br><span class="line">	    \$KUBE_LOG_LEVEL \\</span><br><span class="line">	    \$KUBE_ETCD_ARGS \\</span><br><span class="line">	    \$KUBE_API_ADDRESS \\</span><br><span class="line">	    \$KUBE_SERVICE_ADDRESSES \\</span><br><span class="line">	    \$KUBE_ADMISSION_CONTROL \\</span><br><span class="line">	    \$KUBE_APISERVER_ARGS</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">Type&#x3D;notify</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 该配置文件同时被 kube-apiserver, kube-controller-manager</span><br><span class="line"># kube-scheduler, kubelet, kube-proxy 使用</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR&#x3D;&quot;--logtostderr&#x3D;true&quot;</span><br><span class="line">KUBE_LOG_LEVEL&#x3D;&quot;--v&#x3D;2&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;apiserver&lt;&lt;EOF</span><br><span class="line">KUBE_API_ADDRESS&#x3D;&quot;--advertise-address&#x3D;172.16.242.129&quot;</span><br><span class="line">KUBE_ETCD_ARGS&#x3D;&quot;--etcd-servers&#x3D;https:&#x2F;&#x2F;172.16.242.129:2379,https:&#x2F;&#x2F;172.16.242.130:2379,https:&#x2F;&#x2F;172.16.242.131:2379 --etcd-cafile&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd-ca.pem --etcd-certfile&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd.pem --etcd-keyfile&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd-key.pem&quot;</span><br><span class="line">KUBE_SERVICE_ADDRESSES&#x3D;&quot;--service-cluster-ip-range&#x3D;10.96.0.0&#x2F;12&quot;</span><br><span class="line">KUBE_ADMISSION_CONTROL&#x3D;&quot;--enable-admission-plugins&#x3D;NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota&quot;</span><br><span class="line">KUBE_APISERVER_ARGS&#x3D;&quot;--allow-privileged&#x3D;true --authorization-mode&#x3D;Node,RBAC --enable-bootstrap-token-auth&#x3D;true --token-auth-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;token.csv --service-node-port-range&#x3D;30000-32767 --tls-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-apiserver.pem --tls-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kube-apiserver-key.pem --client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem --service-account-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.pub --enable-swagger-ui&#x3D;true --secure-port&#x3D;6443 --kubelet-preferred-address-types&#x3D;InternalIP,ExternalIP,Hostname --anonymous-auth&#x3D;false --kubelet-client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;admin.pem --kubelet-client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;admin-key.pem&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br><span class="line"></span><br><span class="line"># 浏览器访问测试</span><br><span class="line">https:&#x2F;&#x2F;172.16.242.129:6443&#x2F;swaggerapi</span><br></pre></td></tr></table></figure>

<h4 id="配置启动kube-controller-manager"><a href="#配置启动kube-controller-manager" class="headerlink" title="配置启动kube-controller-manager"></a>配置启动kube-controller-manager</h4><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动文件</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kube-controller-manager.service&lt;&lt;EOF</span><br><span class="line">Description&#x3D;Kubernetes Controller Manager</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;config</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;controller-manager</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kube-controller-manager \\</span><br><span class="line">	    \$KUBE_LOGTOSTDERR \\</span><br><span class="line">	    \$KUBE_LOG_LEVEL \\</span><br><span class="line">	    \$KUBECONFIG \\</span><br><span class="line">	    \$KUBE_CONTROLLER_MANAGER_ARGS</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;controller-manager&lt;&lt;EOF</span><br><span class="line">KUBECONFIG&#x3D;&quot;--kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-controller-manager.conf&quot;</span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS&#x3D;&quot;--address&#x3D;127.0.0.1 --cluster-cidr&#x3D;10.244.0.0&#x2F;16 --cluster-name&#x3D;kubernetes --cluster-signing-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem --cluster-signing-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca-key.pem --service-account-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.key --root-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem --leader-elect&#x3D;true --use-service-account-credentials&#x3D;true --node-monitor-grace-period&#x3D;10s --pod-eviction-timeout&#x3D;10s --allocate-node-cidrs&#x3D;true --controllers&#x3D;*,bootstrapsigner,tokencleaner&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure>

<h4 id="配置启动kube-scheduler"><a href="#配置启动kube-scheduler" class="headerlink" title="配置启动kube-scheduler"></a>配置启动kube-scheduler</h4><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kube-scheduler.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Kubernetes Scheduler Plugin</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;config</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;scheduler</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kube-scheduler \\</span><br><span class="line">            \$KUBE_LOGTOSTDERR \\</span><br><span class="line">            \$KUBE_LOG_LEVEL \\</span><br><span class="line">            \$KUBECONFIG \\</span><br><span class="line">            \$KUBE_SCHEDULER_ARGS</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;scheduler&lt;&lt;EOF</span><br><span class="line">KUBECONFIG&#x3D;&quot;--kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-scheduler.conf&quot;</span><br><span class="line">KUBE_SCHEDULER_ARGS&#x3D;&quot;--leader-elect&#x3D;true --address&#x3D;127.0.0.1&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-scheduler</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure>

<h4 id="配置kubectl使用"><a href="#配置kubectl使用" class="headerlink" title="配置kubectl使用"></a>配置kubectl使用</h4><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf $HOME&#x2F;.kube</span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h5 id="查看组件状态"><a href="#查看组件状态" class="headerlink" title="查看组件状态"></a>查看组件状态</h5><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br><span class="line"></span><br><span class="line"># 运行结果</span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-1               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class="line">etcd-2               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置kubelet使用bootstrap"><a href="#配置kubelet使用bootstrap" class="headerlink" title="配置kubelet使用bootstrap"></a>配置kubelet使用bootstrap</h4><blockquote>
<p>在Master<code>ray01</code>节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色</span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">--clusterrole&#x3D;system:node-bootstrapper \</span><br><span class="line">--user&#x3D;kubelet-bootstrap</span><br></pre></td></tr></table></figure>

<h3 id="配置node相关组件"><a href="#配置node相关组件" class="headerlink" title="配置node相关组件"></a>配置node相关组件</h3><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<h4 id="安装cni"><a href="#安装cni" class="headerlink" title="安装cni"></a>安装cni</h4><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装 cni</span><br><span class="line"># 百度云链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1-PputObLs5jouXLnuBCI6Q 密码：tzqm</span><br><span class="line">cd &#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;containernetworking&#x2F;plugins&#x2F;releases&#x2F;download&#x2F;v0.7.1&#x2F;cni-plugins-amd64-v0.7.1.tgz</span><br><span class="line"></span><br><span class="line"># 注意</span><br><span class="line"># 下载完成后可以scp到其他节点</span><br><span class="line"># scp cni-plugins-amd64-v0.7.1.tgz ray02:&#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line"># scp cni-plugins-amd64-v0.7.1.tgz ray03:&#x2F;server&#x2F;software&#x2F;k8s</span><br><span class="line"></span><br><span class="line">mkdir -pv &#x2F;opt&#x2F;cni&#x2F;bin</span><br><span class="line">tar xf cni-plugins-amd64-v0.7.1.tgz -C &#x2F;opt&#x2F;cni&#x2F;bin</span><br><span class="line">ls -l &#x2F;opt&#x2F;cni&#x2F;bin</span><br><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<h4 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h4><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动文件</span><br><span class="line">mkdir -pv &#x2F;data&#x2F;kubelet</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Kubernetes Kubelet Server</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes</span><br><span class="line">After&#x3D;docker.service</span><br><span class="line">Requires&#x3D;docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;data&#x2F;kubelet</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;config</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;kubelet</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kubelet \\</span><br><span class="line">            \$KUBE_LOGTOSTDERR \\</span><br><span class="line">            \$KUBE_LOG_LEVEL \\</span><br><span class="line">            \$KUBELET_CONFIG \\</span><br><span class="line">            \$KUBELET_HOSTNAME \\</span><br><span class="line">            \$KUBELET_POD_INFRA_CONTAINER \\</span><br><span class="line">            \$KUBELET_ARGS</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR&#x3D;&quot;--logtostderr&#x3D;true&quot;</span><br><span class="line">KUBE_LOG_LEVEL&#x3D;&quot;--v&#x3D;2&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 注意修改相关ip</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_HOSTNAME&#x3D;&quot;--hostname-override&#x3D;172.16.242.129&quot;</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER&#x3D;&quot;--pod-infra-container-image&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause-amd64:3.1&quot;</span><br><span class="line">KUBELET_CONFIG&#x3D;&quot;--config&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet-config.yml&quot;</span><br><span class="line">KUBELET_ARGS&#x3D;&quot;--bootstrap-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet-bootstrap.conf --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf --cert-dir&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki --network-plugin&#x3D;cni --cni-bin-dir&#x3D;&#x2F;opt&#x2F;cni&#x2F;bin --cni-conf-dir&#x3D;&#x2F;etc&#x2F;cni&#x2F;net.d&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 注意修改相关ip</span><br><span class="line"># ray01 ray02 ray03 使用各自ip</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet-config.yml&lt;&lt;EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io&#x2F;v1beta1</span><br><span class="line">address: 172.16.242.129</span><br><span class="line">port: 10250</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS:</span><br><span class="line">  - 10.96.0.10</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">serializeImagePulls: false</span><br><span class="line">authentication:</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.pem</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure>

<h4 id="通过证书请求"><a href="#通过证书请求" class="headerlink" title="通过证书请求"></a>通过证书请求</h4><blockquote>
<p>如下操作在所有节点操作，即在配置了<code>kubectl</code>的节点上执行如下操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"># 通过</span><br><span class="line">kubectl certificate approve node-csr-Yiiv675wUCvQl3HH11jDr0cC9p3kbrXWrxvG3EjWGoE</span><br><span class="line"></span><br><span class="line"># 查看节点</span><br><span class="line"># 此时节点状态为 NotReady</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"># 在node节点查看生成的文件</span><br><span class="line">ls -l &#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf</span><br><span class="line">ls -l &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;kubelet*</span><br></pre></td></tr></table></figure>

<h4 id="配置启动kube-proxy"><a href="#配置启动kube-proxy" class="headerlink" title="配置启动kube-proxy"></a>配置启动kube-proxy</h4><blockquote>
<p>如下操作在所有节点操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yum install -y conntrack-tools</span><br><span class="line"></span><br><span class="line"># 启动文件</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kube-proxy.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;config</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;proxy</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;kubernetes&#x2F;bin&#x2F;kube-proxy \\</span><br><span class="line">	    \$KUBE_LOGTOSTDERR \\</span><br><span class="line">	    \$KUBE_LOG_LEVEL \\</span><br><span class="line">	    \$KUBECONFIG \\</span><br><span class="line">	    \$KUBE_PROXY_ARGS</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 注意修改相关ip</span><br><span class="line"># ray01 ray02 ray03 使用各自ip</span><br><span class="line"># 由于 1.11.0 ipvs 在centos7上有bug无法正常使用</span><br><span class="line"># 实验使用 iptables 模式</span><br><span class="line"># 以后版本可以使用 ipvs 模式</span><br><span class="line">cat &gt;&#x2F;etc&#x2F;kubernetes&#x2F;proxy&lt;&lt;EOF</span><br><span class="line">KUBECONFIG&#x3D;&quot;--kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-proxy.conf&quot;</span><br><span class="line">KUBE_PROXY_ARGS&#x3D;&quot;--bind-address&#x3D;172.16.242.129 --proxy-mode&#x3D;iptables --hostname-override&#x3D;172.16.242.129 --cluster-cidr&#x3D;10.244.0.0&#x2F;16&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure>

<h3 id="设置集群角色"><a href="#设置集群角色" class="headerlink" title="设置集群角色"></a>设置集群角色</h3><blockquote>
<p>在Master节点<code>ray01</code>运行以下命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置 ray01 为 master</span><br><span class="line">kubectl label nodes 172.16.242.129 node-role.kubernetes.io&#x2F;master&#x3D;</span><br><span class="line"></span><br><span class="line"># 设置 ray02 ray03 为 node</span><br><span class="line">kubectl label nodes 172.16.242.130 node-role.kubernetes.io&#x2F;node&#x3D;</span><br><span class="line">kubectl label nodes 172.16.242.131 node-role.kubernetes.io&#x2F;node&#x3D;</span><br><span class="line"></span><br><span class="line"># 设置 master 一般情况下不接受负载</span><br><span class="line">kubectl taint nodes 172.16.242.129 node-role.kubernetes.io&#x2F;master&#x3D;true:NoSchedule</span><br><span class="line"></span><br><span class="line"># 查看节点</span><br><span class="line"># 此时节点状态为 NotReady</span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure>

<h3 id="配置使用flannel网络"><a href="#配置使用flannel网络" class="headerlink" title="配置使用flannel网络"></a>配置使用flannel网络</h3><blockquote>
<p>在Master节点<code>ray01</code>操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载配置</span><br><span class="line">mkdir flannel &amp;&amp; cd flannel</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;v0.10.0&#x2F;Documentation&#x2F;kube-flannel.yml</span><br><span class="line"></span><br><span class="line"># 修改配置</span><br><span class="line"># 此处的ip配置要与上面kubeadm的pod-network一致</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;,</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># 修改镜像</span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com&#x2F;gcr-k8s&#x2F;flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"># 如果Node有多个网卡的话，参考flannel issues 39701，</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues&#x2F;39701</span><br><span class="line"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span><br><span class="line"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span><br><span class="line"># flanneld启动参数加上--iface&#x3D;&lt;iface-name&gt;</span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com&#x2F;gcr-k8s&#x2F;flannel:v0.10.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - &#x2F;opt&#x2F;bin&#x2F;flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface&#x3D;eth1</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"># 查看节点状态</span><br><span class="line"># 当 flannel pod 全部启动之后，节点状态为 Ready</span><br><span class="line">kubectl get no</span><br><span class="line"></span><br><span class="line"># 运行结果</span><br><span class="line">NAME             STATUS    ROLES     AGE       VERSION</span><br><span class="line">172.16.242.129   Ready     master    5h        v1.11.0</span><br><span class="line">172.16.242.130   Ready     node      4h        v1.11.0</span><br><span class="line">172.16.242.131   Ready     node      4h        v1.11.0</span><br></pre></td></tr></table></figure>

<h3 id="配置使用coredns"><a href="#配置使用coredns" class="headerlink" title="配置使用coredns"></a>配置使用coredns</h3><blockquote>
<p>在Master节点<code>ray01</code>操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line"># 10.96.0.10 kubelet中配置的dns</span><br><span class="line">cd $HOME &amp;&amp; mkdir coredns &amp;&amp; cd coredns</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coredns&#x2F;deployment&#x2F;master&#x2F;kubernetes&#x2F;coredns.yaml.sed</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coredns&#x2F;deployment&#x2F;master&#x2F;kubernetes&#x2F;deploy.sh</span><br><span class="line">chmod +x deploy.sh</span><br><span class="line">.&#x2F;deploy.sh -i 10.96.0.10 &gt; coredns.yml</span><br><span class="line">kubectl apply -f coredns.yml</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl run nginx --replicas&#x3D;2 --image&#x3D;nginx:alpine --port&#x3D;80</span><br><span class="line">kubectl expose deployment nginx --type&#x3D;NodePort --name&#x3D;example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name&#x3D;example-service</span><br><span class="line">kubectl scale --replicas&#x3D;3 deployment&#x2F;nginx</span><br></pre></td></tr></table></figure>

<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get deploy -o wide</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure>

<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl run curl --image&#x3D;radial&#x2F;busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure>

<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 10.96.59.56 为查看svc时获取到的clusterip</span><br><span class="line">curl &quot;10.107.91.153:80&quot;</span><br><span class="line"></span><br><span class="line"># 32223 为查看svc时获取到的 nodeport</span><br><span class="line">http:&#x2F;&#x2F;172.16.242.129:32223&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;172.16.242.130:32223&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;172.16.242.131:32223&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5b45cea9f265da0f652370ce#heading-25" target="_blank" rel="noopener external nofollow noreferrer">centos7纯手动安装kubernetes-v1.11版本</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ命令行</title>
    <url>/articles/2898763363.html</url>
    <content><![CDATA[<h2 id="Docker运行RabbitMQ"><a href="#Docker运行RabbitMQ" class="headerlink" title="Docker运行RabbitMQ"></a>Docker运行RabbitMQ</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -v $PWD&#x2F;:&#x2F;var&#x2F;lib&#x2F;rabbitmq --hostname my-rabbit -p 5672:5672 -p 4369:4369 -p 8181:15672 rabbitmq:3-management</span><br><span class="line">guest:guest</span><br></pre></td></tr></table></figure>

<ul>
<li>docker exec -ti <rabbitmq> /bin/bash</li>
<li>rabbitmqctl trace_on</li>
<li>rabbitmq-plugins enable rabbitmq_tracing</li>
<li>exit</li>
</ul>
<a id="more"></a>

<h2 id="RabbitMQ命令"><a href="#RabbitMQ命令" class="headerlink" title="RabbitMQ命令"></a>RabbitMQ命令</h2><p><a href="https://gitee.com/wisecloud/xing/blob/master/doc/starting_cn.md" target="_blank" rel="noopener external nofollow noreferrer">wise2c链接</a></p>
<h3 id="查看所有队列"><a href="#查看所有队列" class="headerlink" title="查看所有队列"></a>查看所有队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctrl list_queues</span><br></pre></td></tr></table></figure>

<h3 id="清除命令"><a href="#清除命令" class="headerlink" title="清除命令"></a>清除命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>

<h3 id="添加用户，给权限"><a href="#添加用户，给权限" class="headerlink" title="添加用户，给权限"></a>添加用户，给权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line">rabbitmqctl set_permissions -p &quot;&#x2F;&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">raabitmqctl list_users</span><br></pre></td></tr></table></figure>

<h3 id="Install-rabbitmqadmin"><a href="#Install-rabbitmqadmin" class="headerlink" title="Install rabbitmqadmin"></a>Install rabbitmqadmin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -a &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@my-rabbit-plugins-expand&#x2F;rabbitmq_management-3.6.12&#x2F;priv&#x2F;www&#x2F;cli&#x2F;rabbitmqadmin &#x2F;usr&#x2F;sbin&#x2F;rabbitmqadmin</span><br><span class="line">chmod +x &#x2F;usr&#x2F;sbin&#x2F;rabbitmqadmin</span><br><span class="line">apt-get  update &amp;&amp; apt-get install python -y</span><br></pre></td></tr></table></figure>

<h3 id="删除指定的mq"><a href="#删除指定的mq" class="headerlink" title="删除指定的mq"></a>删除指定的mq</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqadmin  list queues | grep ingress | awk &#39;&#123;print $2&#125;&#39; | xargs -I qn rabbitmqadmin delete queue name&#x3D;qn</span><br><span class="line">rabbitmqadmin  list queues</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Pip使用</title>
    <url>/articles/4136195967.html</url>
    <content><![CDATA[<h2 id="Pip-安装"><a href="#Pip-安装" class="headerlink" title="Pip 安装"></a>Pip 安装</h2><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装epel扩展源</span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line"># 然后再安装pip</span><br><span class="line">yum -y install python-pip</span><br><span class="line"></span><br><span class="line"># 更新pip</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Pip更换国内镜像源"><a href="#Pip更换国内镜像源" class="headerlink" title="Pip更换国内镜像源"></a>Pip更换国内镜像源</h2><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener external nofollow noreferrer">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener external nofollow noreferrer">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener external nofollow noreferrer">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener external nofollow noreferrer">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener external nofollow noreferrer">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<h3 id="Pip源配置文件存放路径"><a href="#Pip源配置文件存放路径" class="headerlink" title="Pip源配置文件存放路径"></a>Pip源配置文件存放路径</h3><p>不同系统的配置路径可能不同</p>
<h4 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux/Unix"></a>Linux/Unix</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;pip.con</span><br><span class="line">~&#x2F;.pip&#x2F;pip.conf  （每一个我都找了都没有，所以我是在这个文件夹中创建的pip.conf文件）</span><br><span class="line">~&#x2F;.config&#x2F;pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>

<h4 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;Library&#x2F;Application Support&#x2F;pip&#x2F;pip.conf</span><br><span class="line">~&#x2F;.pip&#x2F;pip.conf</span><br><span class="line">&#x2F;Library&#x2F;Application Support&#x2F;pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>

<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%APPDATA%\pip\pip.ini</span><br><span class="line">%HOME%\pip\pip.ini</span><br><span class="line">C:\Documents and Settings\All Users\Application Data\PyPA\pip\pip.conf (Windows XP)</span><br><span class="line">C:\ProgramData\PyPA\pip\pip.conf (Windows 7及以后)</span><br></pre></td></tr></table></figure>



<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><p>可以在使用pip的时候在后面加上-i参数，指定pip源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install scrapy -i &lt;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&gt;</span><br></pre></td></tr></table></figure>



<h4 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h4><p>如果没有需要自己创建一个，一般使用该路径<code>~/.pip/pip.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; #豆瓣源，可以换成其他的源         </span><br><span class="line">disable-pip-version-check &#x3D; false          #如果为true则取消pip版本检查，排除每次都报最新的pip</span><br><span class="line">timeout &#x3D; 120</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com	#添加豆瓣源为可信主机，要不然可能报错</span><br></pre></td></tr></table></figure>



<h2 id="Pip使用详解"><a href="#Pip使用详解" class="headerlink" title="Pip使用详解"></a>Pip使用详解</h2><h3 id="Pip安装包"><a href="#Pip安装包" class="headerlink" title="Pip安装包"></a>Pip安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip install SomePackage</span><br><span class="line">  [...]</span><br><span class="line">  Successfully installed SomePackage</span><br></pre></td></tr></table></figure>



<h3 id="Pip查看已安装的包"><a href="#Pip查看已安装的包" class="headerlink" title="Pip查看已安装的包"></a>Pip查看已安装的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip show --files SomePackage</span><br><span class="line">  Name: SomePackage</span><br><span class="line">  Version: 1.0</span><br><span class="line">  Location: &#x2F;my&#x2F;env&#x2F;lib&#x2F;pythonx.x&#x2F;site-packages</span><br><span class="line">  Files:</span><br><span class="line">   ..&#x2F;somepackage&#x2F;__init__.py</span><br><span class="line">   [...]</span><br></pre></td></tr></table></figure>



<h3 id="Pip检查哪些包需要更新"><a href="#Pip检查哪些包需要更新" class="headerlink" title="Pip检查哪些包需要更新"></a>Pip检查哪些包需要更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip list --outdated</span><br><span class="line">  SomePackage (Current: 1.0 Latest: 2.0)</span><br></pre></td></tr></table></figure>



<h3 id="Pip升级包"><a href="#Pip升级包" class="headerlink" title="Pip升级包"></a>Pip升级包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip install --upgrade SomePackage</span><br><span class="line">  [...]</span><br><span class="line">  Found existing installation: SomePackage 1.0</span><br><span class="line">  Uninstalling SomePackage:</span><br><span class="line">  Successfully uninstalled SomePackage</span><br><span class="line">  Running setup.py install for SomePackage</span><br><span class="line">  Successfully installed SomePackage</span><br></pre></td></tr></table></figure>



<h3 id="Pip卸载包"><a href="#Pip卸载包" class="headerlink" title="Pip卸载包"></a>Pip卸载包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip uninstall SomePackage</span><br><span class="line">  Uninstalling SomePackage:</span><br><span class="line">    &#x2F;my&#x2F;env&#x2F;lib&#x2F;pythonx.x&#x2F;site-packages&#x2F;somepackage</span><br><span class="line">  Proceed (y&#x2F;n)? y</span><br><span class="line">  Successfully uninstalled SomePackage</span><br></pre></td></tr></table></figure>



<h3 id="Pip参数解释"><a href="#Pip参数解释" class="headerlink" title="Pip参数解释"></a>Pip参数解释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip --help</span><br><span class="line"> </span><br><span class="line">Usage:   </span><br><span class="line">  pip &lt;command&gt; [options]</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line">  install                     安装包.</span><br><span class="line">  uninstall                   卸载包.</span><br><span class="line">  freeze                      按着一定格式输出已安装包列表</span><br><span class="line">  list                        列出已安装包.</span><br><span class="line">  show                        显示包详细信息.</span><br><span class="line">  search                      搜索包，类似yum里的search.</span><br><span class="line">  wheel                       Build wheels from your requirements.</span><br><span class="line">  zip                         不推荐. Zip individual packages.</span><br><span class="line">  unzip                       不推荐. Unzip individual packages.</span><br><span class="line">  bundle                      不推荐. Create pybundles.</span><br><span class="line">  help                        当前帮助.</span><br><span class="line"> </span><br><span class="line">General Options:</span><br><span class="line">  -h, --help                  显示帮助.</span><br><span class="line">  -v, --verbose               更多的输出，最多可以使用3次</span><br><span class="line">  -V, --version               现实版本信息然后退出.</span><br><span class="line">  -q, --quiet                 最少的输出.</span><br><span class="line">  --log-file &lt;path&gt;           覆盖的方式记录verbose错误日志，默认文件：&#x2F;root&#x2F;.pip&#x2F;pip.log</span><br><span class="line">  --log &lt;path&gt;                不覆盖记录verbose输出的日志.</span><br><span class="line">  --proxy &lt;proxy&gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.</span><br><span class="line">  --timeout &lt;sec&gt;             连接超时时间 (默认15秒).</span><br><span class="line">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup.</span><br><span class="line">  --cert &lt;path&gt;               证书.</span><br></pre></td></tr></table></figure>



<h3 id="需求文件requirements-txt的创建及使用"><a href="#需求文件requirements-txt的创建及使用" class="headerlink" title="需求文件requirements.txt的创建及使用"></a>需求文件requirements.txt的创建及使用</h3><p><strong>参考：<a href="https://blog.csdn.net/loyachen/article/details/52028825" target="_blank" rel="noopener external nofollow noreferrer">python笔记—需求文件requirements.txt的创建及使用</a></strong></p>
<p>python项目中必须包含一个 requirements.txt 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。</p>
<h4 id="在环境中生成requirements-txt"><a href="#在环境中生成requirements-txt" class="headerlink" title="在环境中生成requirements.txt"></a>在环境中生成requirements.txt</h4><p>安装或升级包后，最好更新这个文件，可以弄个虚拟环境来搞。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>

<h4 id="在环境中使用requirements-txt"><a href="#在环境中使用requirements-txt" class="headerlink" title="在环境中使用requirements.txt"></a>在环境中使用requirements.txt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/u013066730/article/details/54580789" target="_blank" rel="noopener external nofollow noreferrer">python pip源配置,pip配置文件存放位置</a></p>
<p><a href="https://blog.csdn.net/chenghuikai/article/details/55258957" target="_blank" rel="noopener external nofollow noreferrer">更换pip源到国内镜像</a></p>
<p><a href="https://blog.csdn.net/u013066730/article/details/54580863" target="_blank" rel="noopener external nofollow noreferrer">pip安装使用详解</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中环境变量的查看与添加</title>
    <url>/articles/422075899.html</url>
    <content><![CDATA[<h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.sys.path)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><h4 id="临时添加，在一个shell窗口中"><a href="#临时添加，在一个shell窗口中" class="headerlink" title="临时添加，在一个shell窗口中"></a>临时添加，在一个shell窗口中</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(path)</span><br></pre></td></tr></table></figure>

<p>但退出该shell窗口，即失效</p>
<h4 id="使用pth文件永久添加"><a href="#使用pth文件永久添加" class="headerlink" title="使用pth文件永久添加"></a>使用pth文件永久添加</h4><p>使用pth文件，在 site-packages 文件中创建 .pth文件，将模块的路径写进去，一行一个路径，以下是一个示例，pth文件也可以使用注释：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .pth file for the  my project(这行是注释)</span></span><br><span class="line">E:\DjangoWord</span><br><span class="line">E:\DjangoWord\mysite</span><br><span class="line">E:\DjangoWord\mysite\polls</span><br></pre></td></tr></table></figure>

<p>这个不失为一个好的方法，但存在管理上的问题，而且不能在不同的python版本中共享 </p>
<h4 id="使用PYTHONPATH环境变量"><a href="#使用PYTHONPATH环境变量" class="headerlink" title="使用PYTHONPATH环境变量"></a>使用PYTHONPATH环境变量</h4><p>使用PYTHONPATH环境变量，在这个环境变量中输入相关的路径，不同的路径之间用逗号（英文的！)分开，如果PYTHONPATH 变量还不存在，可以创建它！</p>
<p>路径会自动加入到sys.path中，而且可以在不同的python版本中共享，应该是一样较为方便的方法</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/GODYCA/archive/2013/05/31/3110410.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/GODYCA/archive/2013/05/31/3110410.html</a></p>
<p><a href="https://www.cnblogs.com/huchong/p/7349894.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/huchong/p/7349894.html</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中__file__ 与argv[0]使用</title>
    <url>/articles/2941891741.html</url>
    <content><![CDATA[<p>在python下，获取当前执行主脚本的方法有两个：sys.argv[0]和__file__</p>
<h2 id="sys-argv-0"><a href="#sys-argv-0" class="headerlink" title="sys.argv[0]"></a>sys.argv[0]</h2><p>获取主执行文件路径的最佳方法是用sys.argv[0]，它可能是一个相对路径，所以再取一下abspath是保险的做法，像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os,sys</span><br><span class="line">dirname, filename &#x3D; os.path.split(os.path.abspath(sys.argv[0]))</span><br><span class="line">print &quot;running from&quot;, dirname</span><br><span class="line">print &quot;file is&quot;, filename</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">running from &#x2F;root</span><br><span class="line">file is test.py</span><br></pre></td></tr></table></figure>

<h3 id="sys-path-0-，os-getcwd-，sys-argv-0"><a href="#sys-path-0-，os-getcwd-，sys-argv-0" class="headerlink" title="sys.path[0]，os.getcwd()，sys.argv[0]"></a>sys.path[0]，os.getcwd()，sys.argv[0]</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;3&quot;,sys.path[0] </span><br><span class="line">print &quot;4&quot;,sys.argv[0]</span><br><span class="line">print &quot;5&quot;,os.getcwd()</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 &#x2F;devcode&#x2F;user&#x2F;bin&#x2F;dw_clsfd #运行脚本目录</span><br><span class="line">4 &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd&#x2F;test.py #当前脚本的目录</span><br><span class="line">5 &#x2F;devcode&#x2F;user&#x2F;bin&#x2F;dw_clsfd #运行脚本目录</span><br></pre></td></tr></table></figure>

<p><strong>通过sys.path[0],os.getcwd()获得的是执行脚本的目录</strong></p>
<h2 id="file"><a href="#file" class="headerlink" title="__file__"></a>__file__</h2><p>_<em>file_</em> 是用来获得模块所在的路径的，这可能得到的是一个相对路径，比如在脚本test.py中写入：</p>
<p>#!/usr/bin/env python<br>print _<em>file_</em></p>
<ul>
<li>按相对路径./test.py来执行，则打印得到的是相对路径，</li>
<li>按绝对路径执行则得到的是绝对路径。</li>
<li>而按用户目录来执行（~/practice/test.py），则得到的也是绝对路径（~被展开）</li>
<li>所以为了得到绝对路径，我们需要 os.path.realpath(_<em>file_</em>)。</li>
</ul>
<p>而在Python控制台下，直接使用print __file__是会导致  name ‘__file__’ is not defined错误的，因为这时没有在任何一个脚本下执行，自然没有 __file__的定义了。</p>
<h3 id="python中os-path-dirname-file"><a href="#python中os-path-dirname-file" class="headerlink" title="python中os.path.dirname(_file_)"></a>python中os.path.dirname(_<em>file_</em>)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;7&quot;,os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">(1).当&quot;print os.path.dirname(__file__)&quot;所在脚本是以完整路径被运行的， 那么将输出该脚本所在的完整路径，比如：</span><br><span class="line">python &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd&#x2F;test.py </span><br><span class="line">7 &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd #当前脚本所在的目录</span><br><span class="line"></span><br><span class="line">(2).当&quot;print os.path.dirname(__file__)&quot;所在脚本是以相对路径被运行的， 那么将输出空目录，比如：</span><br><span class="line">python test.py</span><br><span class="line">那么将输出空字符串</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;6&quot;,__file__</span><br><span class="line">print &quot;7&quot;,os.path.realpath(__file__)</span><br><span class="line">print &quot;8&quot;,os.path.abspath(__file__)</span><br><span class="line">print &quot;9&quot;,os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">print &quot;10&quot;,os.path.dirname(os.path.abspath(__file__))</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd&#x2F;test.py</span><br><span class="line">7 &#x2F;devcode&#x2F;user&#x2F;bin&#x2F;dw_clsfd&#x2F;test.py #脚本运行目录</span><br><span class="line">8 &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd&#x2F;test.py</span><br><span class="line">9 &#x2F;devcode&#x2F;user&#x2F;bin&#x2F;dw_clsfd  #脚本运行目录</span><br><span class="line">10 &#x2F;dw&#x2F;etl&#x2F;home&#x2F;dev&#x2F;bin&#x2F;dw_clsfd</span><br></pre></td></tr></table></figure>



<h2 id="file-和argv-0-差异"><a href="#file-和argv-0-差异" class="headerlink" title="__file__和argv[0]差异"></a>__file__和argv[0]差异</h2><p>在主执行文件中时，两者没什么差异，不过要是在不同的文件下，就不同了，下面示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\junk\so&gt;type \junk\so\scriptpath\script1.py</span><br><span class="line">import sys, os</span><br><span class="line">print &quot;script: sys.argv[0] is&quot;, repr(sys.argv[0])</span><br><span class="line">print &quot;script: __file__ is&quot;, repr(__file__)</span><br><span class="line">print &quot;script: cwd is&quot;, repr(os.getcwd())</span><br><span class="line">import whereutils</span><br><span class="line">whereutils.show_where()</span><br><span class="line"> </span><br><span class="line">C:\junk\so&gt;type \python26\lib\site-packages\whereutils.py</span><br><span class="line">import sys, os</span><br><span class="line">def show_where():</span><br><span class="line">    print &quot;show_where: sys.argv[0] is&quot;, repr(sys.argv[0])</span><br><span class="line">    print &quot;show_where: __file__ is&quot;, repr(__file__)</span><br><span class="line">    print &quot;show_where: cwd is&quot;, repr(os.getcwd())</span><br><span class="line"> </span><br><span class="line">C:\junk\so&gt;\python26\python scriptpath\script1.py</span><br><span class="line">script: sys.argv[0] is &#39;scriptpath\\script1.py&#39;</span><br><span class="line">script: __file__ is &#39;scriptpath\\script1.py&#39;</span><br><span class="line">script: cwd is &#39;C:\\junk\\so&#39;</span><br><span class="line">show_where: sys.argv[0] is &#39;scriptpath\\script1.py&#39;</span><br><span class="line">show_where: __file__ is &#39;C:\\python26\\lib\\site-packages\\whereutils.pyc&#39;</span><br><span class="line">show_where: cwd is &#39;C:\\junk\\so&#39;</span><br></pre></td></tr></table></figure>

<p><strong>所以一般来说，argv[0]要更可靠些</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_37746272/article/details/78980259" target="_blank" rel="noopener external nofollow noreferrer">python _<em>file_</em> 与argv[0]</a></p>
<p><a href="https://www.cnblogs.com/rrxc/p/3973136.html" target="_blank" rel="noopener external nofollow noreferrer">python解惑之 _<em>file_</em> 与argv[0]</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python报错问题解决办法收集</title>
    <url>/articles/3158725388.html</url>
    <content><![CDATA[<h2 id="Python-异常总结"><a href="#Python-异常总结" class="headerlink" title="Python 异常总结"></a>Python 异常总结</h2><h3 id="coercing-to-Unicode-need-string-or-buffer-xxxxx"><a href="#coercing-to-Unicode-need-string-or-buffer-xxxxx" class="headerlink" title="coercing to Unicode: need string or buffer, xxxxx"></a>coercing to Unicode: need string or buffer, xxxxx</h3><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><p>字符串用<code>+</code>拼接时，如果非字符串类型（比如：None，tuple，list等）会产生该错误，比如以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_str1 &#x3D; &quot;test11&quot; + None</span><br><span class="line">test_str2 &#x3D; &quot;test22&quot; + [1,2]</span><br><span class="line">test_str3 &#x3D; &quot;test33&quot; + (1,2)</span><br></pre></td></tr></table></figure>

<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>改用%操作符格式化输出，如以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_str1 &#x3D; &quot;test11 %s &quot; % None</span><br><span class="line">test_str2 &#x3D; &quot;test22 %s&quot; % [1,2]</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<h3 id="忘记在-if-elif-else-for-while-class-def-声明末尾添加-：（导致-“SyntaxError-：invalid-syntax”）"><a href="#忘记在-if-elif-else-for-while-class-def-声明末尾添加-：（导致-“SyntaxError-：invalid-syntax”）" class="headerlink" title="忘记在 if , elif , else , for , while , class ,def 声明末尾添加 ：（导致 “SyntaxError ：invalid syntax”）"></a>忘记在 if , elif , else , for , while , class ,def 声明末尾添加 ：（导致 “SyntaxError ：invalid syntax”）</h3><p>该错误将发生在类似如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if spam &#x3D;&#x3D; 42</span><br><span class="line"> print(&#39;Hello!&#39;)</span><br></pre></td></tr></table></figure>



<h3 id="使用-而不是-（导致“SyntaxError-invalid-syntax”）"><a href="#使用-而不是-（导致“SyntaxError-invalid-syntax”）" class="headerlink" title="使用 = 而不是 ==（导致“SyntaxError: invalid syntax”）"></a>使用 = 而不是 ==（导致“SyntaxError: invalid syntax”）</h3><p>= 是赋值操作符而 == 是等于比较操作。该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if spam &#x3D; 42:</span><br><span class="line"> print(&#39;Hello!&#39;)</span><br></pre></td></tr></table></figure>



<h3 id="错误的使用缩进量。（导致“IndentationError：unexpected-indent”、“IndentationError：unindent-does-not-match-any-outer-indetation-level”以及“IndentationError：expected-an-indented-block”）"><a href="#错误的使用缩进量。（导致“IndentationError：unexpected-indent”、“IndentationError：unindent-does-not-match-any-outer-indetation-level”以及“IndentationError：expected-an-indented-block”）" class="headerlink" title="错误的使用缩进量。（导致“IndentationError：unexpected indent”、“IndentationError：unindent does not match any outer indetation level”以及“IndentationError：expected an indented block”）"></a>错误的使用缩进量。（导致“IndentationError：unexpected indent”、“IndentationError：unindent does not match any outer indetation level”以及“IndentationError：expected an indented block”）</h3><p>记住缩进增加只用在以：结束的语句之后，而之后必须恢复到之前的缩进格式。该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;Hello!&#39;)</span><br><span class="line"> print(&#39;Howdy!&#39;)</span><br><span class="line"> </span><br><span class="line">或者：</span><br><span class="line"> </span><br><span class="line">if spam &#x3D;&#x3D; 42:</span><br><span class="line"> print(&#39;Hello!&#39;)</span><br><span class="line"> print(&#39;Howdy!&#39;)</span><br><span class="line"> </span><br><span class="line">或者：</span><br><span class="line"> </span><br><span class="line">if spam &#x3D;&#x3D; 42:</span><br><span class="line">print(&#39;Hello!&#39;)</span><br></pre></td></tr></table></figure>



<h3 id="在-for-循环语句中忘记调用-len-导致“TypeError-‘list’-object-cannot-be-interpreted-as-an-integer”"><a href="#在-for-循环语句中忘记调用-len-导致“TypeError-‘list’-object-cannot-be-interpreted-as-an-integer”" class="headerlink" title="在 for 循环语句中忘记调用 len() (导致“TypeError: ‘list’ object cannot be interpreted as an integer”)"></a>在 for 循环语句中忘记调用 len() (导致“TypeError: ‘list’ object cannot be interpreted as an integer”)</h3><p>通常你想要通过索引来迭代一个list或者string的元素，这需要调用 range() 函数。要记得返回len 值而不是返回这个列表。</p>
<p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; [&#39;cat&#39;, &#39;dog&#39;, &#39;mouse&#39;]</span><br><span class="line">for i in range(spam):</span><br><span class="line"> print(spam[i])</span><br></pre></td></tr></table></figure>



<h3 id="尝试修改string的值（导致“TypeError-‘str’-object-does-not-support-item-assignment”）"><a href="#尝试修改string的值（导致“TypeError-‘str’-object-does-not-support-item-assignment”）" class="headerlink" title="尝试修改string的值（导致“TypeError: ‘str’ object does not support item assignment”）"></a>尝试修改string的值（导致“TypeError: ‘str’ object does not support item assignment”）</h3><p>string是一种不可变的数据类型，该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; &#39;I have a pet cat.&#39;</span><br><span class="line">spam[13] &#x3D; &#39;r&#39;</span><br><span class="line">print(spam)</span><br></pre></td></tr></table></figure>

<p>而你实际想要这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; &#39;I have a pet cat.&#39;</span><br><span class="line">spam &#x3D; spam[:13] + &#39;r&#39; + spam[14:]</span><br><span class="line">print(spam)</span><br></pre></td></tr></table></figure>



<h3 id="尝试连接非字符串值与字符串（导致-“TypeError-Can’t-convert-‘int’-object-to-str-implicitly”）"><a href="#尝试连接非字符串值与字符串（导致-“TypeError-Can’t-convert-‘int’-object-to-str-implicitly”）" class="headerlink" title="尝试连接非字符串值与字符串（导致 “TypeError: Can’t convert ‘int’ object to str implicitly”）"></a>尝试连接非字符串值与字符串（导致 “TypeError: Can’t convert ‘int’ object to str implicitly”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numEggs &#x3D; 12</span><br><span class="line">print(&#39;I have &#39; + numEggs + &#39; eggs.&#39;)</span><br></pre></td></tr></table></figure>

<p>而你实际想要这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numEggs &#x3D; 12</span><br><span class="line">print(&#39;I have &#39; + str(numEggs) + &#39; eggs.&#39;)</span><br><span class="line"> </span><br><span class="line">或者：</span><br><span class="line"> </span><br><span class="line">numEggs &#x3D; 12</span><br><span class="line">print(&#39;I have %s eggs.&#39; % (numEggs))</span><br></pre></td></tr></table></figure>



<h3 id="在字符串首尾忘记加引号（导致“SyntaxError-EOL-while-scanning-string-literal”）"><a href="#在字符串首尾忘记加引号（导致“SyntaxError-EOL-while-scanning-string-literal”）" class="headerlink" title="在字符串首尾忘记加引号（导致“SyntaxError: EOL while scanning string literal”）"></a>在字符串首尾忘记加引号（导致“SyntaxError: EOL while scanning string literal”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(Hello!&#39;)</span><br><span class="line">或者:</span><br><span class="line">print(&#39;Hello!)</span><br><span class="line"> </span><br><span class="line">或者:</span><br><span class="line"> </span><br><span class="line">myName &#x3D; &#39;Al&#39;</span><br><span class="line">print(&#39;My name is &#39; + myName + . How are you?&#39;)</span><br></pre></td></tr></table></figure>



<h3 id="变量或者函数名拼写错误（导致“NameError-name-‘fooba’-is-not-defined”）"><a href="#变量或者函数名拼写错误（导致“NameError-name-‘fooba’-is-not-defined”）" class="headerlink" title="变量或者函数名拼写错误（导致“NameError: name ‘fooba’ is not defined”）"></a>变量或者函数名拼写错误（导致“NameError: name ‘fooba’ is not defined”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foobar &#x3D; &#39;Al&#39;</span><br><span class="line">print(&#39;My name is &#39; + fooba)</span><br><span class="line"> </span><br><span class="line">或者:</span><br><span class="line"> </span><br><span class="line">spam &#x3D; ruond(4.2)</span><br><span class="line"> </span><br><span class="line">或者:</span><br><span class="line"> </span><br><span class="line">spam &#x3D; Round(4.2)</span><br></pre></td></tr></table></figure>



<h3 id="方法名拼写错误（导致-“AttributeError-‘str’-object-has-no-attribute-‘lowerr’”）"><a href="#方法名拼写错误（导致-“AttributeError-‘str’-object-has-no-attribute-‘lowerr’”）" class="headerlink" title="方法名拼写错误（导致 “AttributeError: ‘str’ object has no attribute ‘lowerr’”）"></a>方法名拼写错误（导致 “AttributeError: ‘str’ object has no attribute ‘lowerr’”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; &#39;THIS IS IN LOWERCASE.&#39;</span><br><span class="line">spam &#x3D; spam.lowerr()</span><br></pre></td></tr></table></figure>



<h3 id="引用超过list最大索引（导致“IndexError-list-index-out-of-range”）"><a href="#引用超过list最大索引（导致“IndexError-list-index-out-of-range”）" class="headerlink" title="引用超过list最大索引（导致“IndexError: list index out of range”）"></a>引用超过list最大索引（导致“IndexError: list index out of range”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; [&#39;cat&#39;, &#39;dog&#39;, &#39;mouse&#39;]</span><br><span class="line">print(spam[6])</span><br></pre></td></tr></table></figure>



<h3 id="使用不存在的字典键值（导致“KeyError：‘spam’”）"><a href="#使用不存在的字典键值（导致“KeyError：‘spam’”）" class="headerlink" title="使用不存在的字典键值（导致“KeyError：‘spam’”）"></a>使用不存在的字典键值（导致“KeyError：‘spam’”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; &#123;&#39;cat&#39;: &#39;Zophie&#39;, &#39;dog&#39;: &#39;Basil&#39;, &#39;mouse&#39;: &#39;Whiskers&#39;&#125;</span><br><span class="line">print(&#39;The name of my pet zebra is &#39; + spam[&#39;zebra&#39;])</span><br></pre></td></tr></table></figure>



<h3 id="尝试使用Python关键字作为变量名（导致“SyntaxError：invalid-syntax”）"><a href="#尝试使用Python关键字作为变量名（导致“SyntaxError：invalid-syntax”）" class="headerlink" title="尝试使用Python关键字作为变量名（导致“SyntaxError：invalid syntax”）"></a>尝试使用Python关键字作为变量名（导致“SyntaxError：invalid syntax”）</h3><p>Python关键不能用作变量名，该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class &#x3D; &#39;algebra&#39;</span><br></pre></td></tr></table></figure>

<p>Python3的关键字有：and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, None, nonlocal, not, or, pass, raise, return, True, try, while, with, yield</p>
<h3 id="在一个定义新变量中使用增值操作符（导致“NameError-name-‘foobar’-is-not-defined”）"><a href="#在一个定义新变量中使用增值操作符（导致“NameError-name-‘foobar’-is-not-defined”）" class="headerlink" title="在一个定义新变量中使用增值操作符（导致“NameError: name ‘foobar’ is not defined”）"></a>在一个定义新变量中使用增值操作符（导致“NameError: name ‘foobar’ is not defined”）</h3><p>不要在声明变量时使用0或者空字符串作为初始值，这样使用自增操作符的一句spam += 1等于spam = spam + 1，这意味着spam需要指定一个有效的初始值。</p>
<p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; 0</span><br><span class="line">spam +&#x3D; 42</span><br><span class="line">eggs +&#x3D; 42</span><br></pre></td></tr></table></figure>



<h3 id="在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）（导致“UnboundLocalError-local-variable-‘foobar’-referenced-before-assignment”）"><a href="#在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）（导致“UnboundLocalError-local-variable-‘foobar’-referenced-before-assignment”）" class="headerlink" title="在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）（导致“UnboundLocalError: local variable ‘foobar’ referenced before assignment”）"></a>在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）（导致“UnboundLocalError: local variable ‘foobar’ referenced before assignment”）</h3><p>在函数中使用局部变来那个而同时又存在同名全局变量时是很复杂的，使用规则是：如果在函数中定义了任何东西，如果它只是在函数中使用那它就是局部的，反之就是全局变量。</p>
<p>这意味着你不能在定义它之前把它当全局变量在函数中使用。</p>
<p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">someVar &#x3D; 42</span><br><span class="line">def myFunction():</span><br><span class="line"> print(someVar)</span><br><span class="line"> someVar &#x3D; 100</span><br><span class="line">myFunction()</span><br></pre></td></tr></table></figure>



<h3 id="尝试使用-range-创建整数列表（导致“TypeError-‘range’-object-does-not-support-item-assignment”）"><a href="#尝试使用-range-创建整数列表（导致“TypeError-‘range’-object-does-not-support-item-assignment”）" class="headerlink" title="尝试使用 range()创建整数列表（导致“TypeError: ‘range’ object does not support item assignment”）"></a>尝试使用 range()创建整数列表（导致“TypeError: ‘range’ object does not support item assignment”）</h3><p>有时你想要得到一个有序的整数列表，所以 range() 看上去是生成此列表的不错方式。然而，你需要记住 range() 返回的是 “range object”，而不是实际的 list 值。</p>
<p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; range(10)</span><br><span class="line">spam[4] &#x3D; -1</span><br></pre></td></tr></table></figure>

<p>也许这才是你想做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; list(range(10))</span><br><span class="line">spam[4] &#x3D; -1</span><br></pre></td></tr></table></figure>

<p>（注意：在 Python 2 中 spam = range(10) 是能行的，因为在 Python 2 中 range() 返回的是list值，但是在 Python 3 中就会产生以上错误）</p>
<h3 id="不错在-或者-–-自增自减操作符。（导致“SyntaxError-invalid-syntax”）"><a href="#不错在-或者-–-自增自减操作符。（导致“SyntaxError-invalid-syntax”）" class="headerlink" title="不错在 ++ 或者 – 自增自减操作符。（导致“SyntaxError: invalid syntax”）"></a>不错在 ++ 或者 – 自增自减操作符。（导致“SyntaxError: invalid syntax”）</h3><p>如果你习惯于例如 C++ , Java , PHP 等其他的语言，也许你会想要尝试使用 ++ 或者 – 自增自减一个变量。在Python中是没有这样的操作符的。</p>
<p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; 1</span><br><span class="line">spam++</span><br></pre></td></tr></table></figure>

<p>也许这才是你想做的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; 1</span><br><span class="line">spam +&#x3D; 1</span><br></pre></td></tr></table></figure>



<h3 id="忘记为方法的第一个参数添加self参数（导致“TypeError-myMethod-takes-no-arguments-1-given-”）"><a href="#忘记为方法的第一个参数添加self参数（导致“TypeError-myMethod-takes-no-arguments-1-given-”）" class="headerlink" title="忘记为方法的第一个参数添加self参数（导致“TypeError: myMethod() takes no arguments (1 given)”）"></a>忘记为方法的第一个参数添加self参数（导致“TypeError: myMethod() takes no arguments (1 given)”）</h3><p>该错误发生在如下代码中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo():</span><br><span class="line"> def myMethod():</span><br><span class="line"> print(&#39;Hello!&#39;)</span><br><span class="line">a &#x3D; Foo()</span><br><span class="line">a.myMethod()</span><br></pre></td></tr></table></figure>

<p>小编推荐大家可以加我的python官方部落群,点击加入<a href="https://jq.qq.com/?_wv=1027&k=5usjEmy" target="_blank" rel="noopener external nofollow noreferrer">python运维</a>，里面有新手资料，不失为是一个学习的好地方，欢迎你的到来。一起交流学习！共同进步！！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://buluo.qq.com/p/detail.html?bid=358270&pid=6026267-1541667700&from=" target="_blank" rel="noopener external nofollow noreferrer">17个Python运行时错误，你经历过几个</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Sublime Text3 插件</title>
    <url>/articles/3957282742.html</url>
    <content><![CDATA[<h3 id="安装插件步骤"><a href="#安装插件步骤" class="headerlink" title="安装插件步骤"></a>安装插件步骤</h3><ul>
<li><p><span id="jump01">Sublime Text3</span> 中使用快捷键<code>command+shift+p</code>，在弹框中输入<code>install</code>后选择<code>Package Control: Intall Package</code></p>
<a id="more"></a>
<p><img src="https://image.ritboy.com/markdown/202004/85eb259e6dd8c48e73c9ab164c14d90c.jpg" alt="image01"></p>
</li>
<li><p>输入安装的插件名称，比如：<code>SublimeTmpl</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/873865818f67bda26d52d3ae87c133e7.jpg" alt="image002"></p>
</li>
</ul>
<h3 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a>SublimeTmpl</h3><p>新建文件模板插件，可以支持多种语言例如Python、PHP等</p>
<ul>
<li><p>安装参考<a href="#jump01">安装插件步骤</a></p>
</li>
<li><p>配置模板<code>python</code>为例，<code>Sublime Text--&gt;Preferences--&gt;Browse Packages</code>找到<code>SublimeTmpl</code>下<code>templates</code>中<code>python.tmpl</code>文件进行编辑</p>
<p><img src="https://image.ritboy.com/markdown/202004/33977b0fc97fa0478ee78a121b5062a4.jpg" alt="Screen Shot 2018-03-06 at 15.25.56"></p>
</li>
<li><p>修改新建模板热键，在<code>Sublime Text--&gt;Preferences--&gt;Package Settings--&gt;SublimeTmpl--&gt;Key Bingdings -User</code>添加热键配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"keys"</span>: [<span class="string">"control+option+p"</span>], <span class="attr">"command"</span>: <span class="string">"sublime_tmpl"</span>, <span class="comment">// windows key: "ctrl+alt+p"</span></span><br><span class="line">        <span class="attr">"args"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"python"</span>&#125;, <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"sublime_tmpl.python"</span>&#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.ritboy.com/markdown/202004/37a9bdf6d6520558f58cc6bd169665ff.jpg" alt="Screen Shot 2018-03-06 at 15.45.29"></p>
</li>
</ul>
<h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>自动匹配关键字等实用功能，有效提高开发效率</p>
<ul>
<li>安装参考<a href="#jump01">安装插件步骤</a></li>
</ul>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><ul>
<li><p>Build时报错<strong>UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-2: ordinal not in range(128)</strong><a href="https://stackoverflow.com/questions/15166076/sublime-text-2-encoding-error-with-python3-build/15174760#15174760" target="_blank" rel="noopener external nofollow noreferrer">网上链接</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$file"</span>],</span><br><span class="line">    <span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line">    <span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line">    <span class="attr">"env"</span>: &#123;<span class="attr">"LANG"</span>: <span class="string">"en_US.UTF-8"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://lib.csdn.net/article/python/63800" target="_blank" rel="noopener external nofollow noreferrer">将Sublime Text 3设置为Python全栈开发环境</a></p>
<p><a href="http://www.cnblogs.com/honkly/p/6599642.html" target="_blank" rel="noopener external nofollow noreferrer">Sublime text 3 + python配置，完整搭建及常用插件安装</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Sublime Text3</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本语法小结</title>
    <url>/articles/774295979.html</url>
    <content><![CDATA[<h3 id="Shell中-if-else以及大于、小于、等于逻辑表达式介绍"><a href="#Shell中-if-else以及大于、小于、等于逻辑表达式介绍" class="headerlink" title="Shell中 if else以及大于、小于、等于逻辑表达式介绍"></a>Shell中 if else以及大于、小于、等于逻辑表达式介绍</h3><ul>
<li><p><strong>条件测试的表达式：</strong></p>
<ul>
<li>[ expression ]  括号两端必须要有空格</li>
<li>[[ expression ]] 括号两端必须要有空格<a id="more"></a></li>
</ul>
</li>
<li><p><strong>整数比较：</strong></p>
<ul>
<li><p>-eq 测试两个整数是否相等</p>
</li>
<li><p>-ne 测试两个整数是否不等</p>
</li>
<li><p>-gt 测试一个数是否大于另一个数</p>
</li>
<li><p>-lt 测试一个数是否小于另一个数</p>
</li>
<li><p>-ge 大于或等于</p>
</li>
<li><p>-le 小于或等于</p>
</li>
<li><p><strong>命令间的逻辑关系</strong></p>
<ul>
<li>逻辑与：&amp;&amp;</li>
</ul>
<p>​        第一个条件为假 第二个条件不用在判断，最总结果已经有</p>
<pre><code>第一个条件为真，第二个条件必须得判断</code></pre><ul>
<li>逻辑或：||</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>字符串比较</strong></p>
<ul>
<li>== 等于  两边要有空格</li>
<li>!= 不等</li>
<li>&gt;  大于</li>
<li>&lt;  小于</li>
</ul>
</li>
<li><p><strong>文件测试</strong></p>
<ul>
<li>-z string 测试指定字符是否为空，空着真，非空为假</li>
<li>-n string 测试指定字符串是否为不空，空为假 非空为真</li>
<li>-e FILE 测试文件是否存在</li>
<li>-f file 测试文件是否为普通文件</li>
<li>-d file 测试指定路径是否为目录</li>
<li>-r file 测试文件对当前用户是否可读</li>
<li>-w file 测试文件对当前用户是否可写</li>
<li>-x file 测试文件对当前用户是都可执行</li>
<li>-z  是否为空  为空则为真</li>
<li>-a  是否不空</li>
</ul>
</li>
<li><p><strong>if语法</strong></p>
<p>if 判断条件 0为真 其他都为假</p>
<ul>
<li>单分支if语句</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if 判断条件；then</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br><span class="line">    .......</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<ul>
<li>双分支的if语句：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if 判断条件；then</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br><span class="line">    .....</span><br><span class="line">    else</span><br><span class="line">    statement3</span><br><span class="line">    statement4</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<pre><code>if语句进行判断是否为空` [ &quot;$name” = &quot;&quot; ] `等同于`[ ! &quot;$name&quot; ]`或者`[ -z &quot;$name&quot; ]`</code></pre><p>​</p>
</li>
<li><p><strong>例子</strong></p>
<p>示例脚本（写一段脚本，输入一个测验成绩，根据下面的标准，输出他的评分成绩（A-F）</p>
<p>A: 90–100</p>
<p>B: 80–89</p>
<p>C: 70–79</p>
<p>D: 60–69</p>
<p>F: &lt;60 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x2F;bin&#x2F;bash</span><br><span class="line">#Verson:0.1</span><br><span class="line">#Auther:lovelace</span><br><span class="line">#Pragram:This pragram is calculation your grade</span><br><span class="line">#import an argument</span><br><span class="line">read -p &quot;Please input your grade:&quot; x</span><br><span class="line">declare -i x</span><br><span class="line">#jugemet $x value is none or not</span><br><span class="line">if [ &quot;$x&quot; &#x3D;&#x3D; &quot;&quot; ];then</span><br><span class="line">    echo &quot;You don&#39;t input your grade....&quot;</span><br><span class="line">    exit 5</span><br><span class="line">fi</span><br><span class="line">#jugement the gread level</span><br><span class="line">if [[ &quot;$x&quot; -ge &quot;90&quot; &amp;&amp; &quot;$x&quot; -le &quot;100&quot; ]];then</span><br><span class="line">    echo &quot;Congratulation,Your grade is A.&quot;</span><br><span class="line">elif [[ &quot;$x&quot; -ge &quot;80&quot; &amp;&amp; &quot;$x&quot; -le &quot;89&quot; ]];then</span><br><span class="line">    echo &quot;Good,Your grade is B.&quot;</span><br><span class="line">elif [[ &quot;$x&quot; -ge &quot;70&quot; &amp;&amp; &quot;$x&quot; -le &quot;79&quot; ]];then</span><br><span class="line">    echo &quot;Ok.Your grade is C.&quot;</span><br><span class="line">elif [[ &quot;$x&quot; -ge &quot;60&quot; &amp;&amp; &quot;$x&quot; -le &quot;69&quot; ]];then</span><br><span class="line">    echo &quot;Yeah,Your grade is D.&quot;</span><br><span class="line">elif [[ &quot;$x&quot; -lt &quot;60&quot; ]];then</span><br><span class="line">    echo &quot;Right,Your grade is F.&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Unknow argument....&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h3 id="Shell中for循环的几个常用写法"><a href="#Shell中for循环的几个常用写法" class="headerlink" title="Shell中for循环的几个常用写法"></a><a href="https://blog.csdn.net/BabyFish13/article/details/52981110" target="_blank" rel="noopener external nofollow noreferrer">Shell中for循环的几个常用写法</a></h3>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>RobotFramework-Docker制作</title>
    <url>/articles/1592056819.html</url>
    <content><![CDATA[<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><ul>
<li>安装<code>Git</code>和运行RobotFramework测试用例需要的库</li>
<li><code>unic.py</code>文件主要添加了RobotFramework运行输出中文乱码的问题</li>
<li><code>send_robot_result_email.py</code>文件是解析RobotFramework运行结果中<code>output.xml</code>文件，然后把解析的结果整理成<code>html</code>格式通过邮件发送出来</li>
<li><code>run_robotframework.sh</code>文件是运行RobotFramework测试用例，然后运行<code>send_robot_result_email.py</code>脚本</li>
<li>配置定时执行脚本<code>send_robot_result_email.py</code>任务<a id="more"></a>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"leicj &lt;leicj@wise2c.com&gt;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 安装git，配置git的name和email</span></span><br><span class="line"><span class="comment"># 配置时区：Asia/Shanghai</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --update add git tzdata &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git config --global user.email <span class="string">"leicj@wise2c.com"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git config --global user.name <span class="string">"TestGroup"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del tzdata</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 安装wise2c需要的robotframework库：selenium2library</span></span><br><span class="line"><span class="comment">#    requests,databaselibrary</span></span><br><span class="line"><span class="comment"># 其中pymysql是databaselibrary需要的插件</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -U \</span></span><br><span class="line"><span class="bash">    pip \</span></span><br><span class="line"><span class="bash">    pymysql \</span></span><br><span class="line"><span class="bash">    robotframework \</span></span><br><span class="line"><span class="bash">    robotframework-requests \</span></span><br><span class="line"><span class="bash">    robotframework-selenium2library \</span></span><br><span class="line"><span class="bash">    robotframework-databaselibrary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 拷贝unic.py，解决输出结果又中文乱码，添加utf-8编码</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> unic.py	/usr/<span class="built_in">local</span>/lib/python2.7/site-packages/robot/utils/unic.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 拷贝send_robot_result_email.py，主要用于解析运行结果并发送邮件</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> robotframework.py /send_robot_result_email.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 拷贝run_robotframework.sh，运行wise2c UI自动化case，然后发出邮件</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> robot.sh   /run_robotframework.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /run_robotframework.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment"># 配置定时执行运行脚本run_robotframework.sh</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="keyword">ENV</span> CRONJOB=<span class="string">"0	3	*	*	*"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;CRONJOB&#125;</span>	sh /run_robotframework.sh"</span> &gt;&gt; /etc/crontabs/root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> EMAIL_TO_LIST=leicj@wise2c.com,liaoxb@wise2c.com,weiht@wise2c.com,leji.chen@wise2c.com</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/automationtest"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"crond -f"</span>]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Docker运行"><a href="#Docker运行" class="headerlink" title="Docker运行"></a>Docker运行</h3><ul>
<li>运行以下<code>shell</code>命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name chrome-browser -v &#x2F;dev&#x2F;shm:&#x2F;dev&#x2F;shm selenium&#x2F;standalone-chrome</span><br><span class="line">docker run -d --name wise2c-auto --link chrome-browser:web registry.cn-hangzhou.aliyuncs.com&#x2F;xiaoyaoray&#x2F;robotframework-wise2c # 可以加上 -v xxxx:&#x2F;automationtest automationtest主要存放RobotFramework需要运行的Case</span><br><span class="line">sh &#x2F;run_robotframework.sh #进入到容器wise2c-auto中执行该脚本</span><br></pre></td></tr></table></figure>

<ul>
<li><code>robotframework-wise2c</code>镜像中映射卷<code>/automationtest</code>存放RobotFramework需要运行的Case，执行脚本<code>/run_robotframework.sh</code>就是执行<code>/automationtest</code>目录下的测试用例</li>
<li>环境变量<code>CRONJOB</code>定时执行脚本<code>/run_robotframework.sh</code>表达式</li>
<li>环境变量<code>EMAIL_TO_LIST</code>收到邮件的人信息，不同邮箱间用<code>逗号</code>分开</li>
<li><strong>PS:</strong>默认情况下每天凌晨3点会执行脚本<code>/run_robotframework.sh</code></li>
</ul>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul>
<li><p><code>run_robotframework.sh</code>脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;wise2c_leicj:qwer1234@gitee.com&#x2F;wisecloud&#x2F;automationtest.git &#x2F;home&#x2F;wise2c</span><br><span class="line">cp -r &#x2F;home&#x2F;wise2c&#x2F;* &#x2F;automationtest</span><br><span class="line">cd &#x2F;home&#x2F;wise2c</span><br><span class="line">git checkout log</span><br><span class="line">outputdir&#x3D;&#96;date +%Y%m%d-%H:%M:%S&#96;</span><br><span class="line">web_ip&#x3D;&#96;env | grep &quot;PORT_4444_TCP_ADDR&quot; | awk -F &#x3D; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">robot -v REMOTE_URL:http:&#x2F;&#x2F;$web_ip:4444&#x2F;wd&#x2F;hub -s ui -d &#x2F;home&#x2F;wise2c&#x2F;$outputdir &#x2F;automationtest</span><br><span class="line">cd &#x2F;home&#x2F;wise2c</span><br><span class="line">dirs&#x3D;&#96;ls -l &#x2F;home&#x2F;wise2c | grep &quot;^d&quot; | awk &#39;&#123;print $9&#125;&#39;| sort -r&#96;</span><br><span class="line">i&#x3D;0</span><br><span class="line">for name in $dirs</span><br><span class="line">do</span><br><span class="line">    let i&#x3D;i+1</span><br><span class="line">    if [ i -ge 30];then</span><br><span class="line">        rm -rf $name</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">git add .</span><br><span class="line">git commit -m $outputdir</span><br><span class="line">git push origin log</span><br><span class="line">python &#x2F;send_robot_result_email.py &#x2F;home&#x2F;wise2c&#x2F;$outputdir $EMAIL_TO_LIST</span><br><span class="line">rm -rf &#x2F;home&#x2F;wise2c</span><br><span class="line">rm -rf &#x2F;automationtest&#x2F;*</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>send_robot_result_email.py</code>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib, datetime, sys</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_test_result_mail</span><span class="params">(receiver, robot_result, sender=None, password=None)</span>:</span></span><br><span class="line">    <span class="string">"""发送测试结果到邮箱</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sender:</span><br><span class="line">        sender = <span class="string">"leicj@wise2c.com"</span></span><br><span class="line">        password = <span class="string">"N5SEnQz39AgHFibr"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"密码为空，请重试！"</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    mail_subject = <span class="string">"Automation Test Report"</span></span><br><span class="line">    mail_smtpserver = <span class="string">"smtp.exmail.qq.com"</span></span><br><span class="line">    mail_username = <span class="string">"leicj@wise2c.com"</span></span><br><span class="line">    mail_password = <span class="string">"N5SEnQz39AgHFibr"</span></span><br><span class="line">    mail_to_addrs = receiver.split(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">    msg = MIMEText(robot_result, _subtype=<span class="string">"html"</span>, _charset=<span class="string">"utf-8"</span>)</span><br><span class="line">    msg[<span class="string">"Subject"</span>] = Header(mail_subject, <span class="string">"utf-8"</span>)</span><br><span class="line">    msg[<span class="string">"From"</span>] = <span class="string">"Wise2c-TestGroup"</span></span><br><span class="line">    msg[<span class="string">"To"</span>] = msg[<span class="string">"To"</span>] = <span class="string">","</span>.join(mail_to_addrs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtp = smtplib.SMTP_SSL()</span><br><span class="line">        smtp.connect(mail_smtpserver, port=<span class="number">465</span>)</span><br><span class="line">        smtp.login(mail_username, mail_password)</span><br><span class="line">        smtp.sendmail(mail_username, mail_to_addrs, msg.as_string())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"邮件发送失败！请检查配置，然后重试！"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"邮件发送成功！注意查收！"</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        smtp.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_to_str</span><span class="params">(unicode_or_str)</span>:</span></span><br><span class="line">    <span class="string">"""将unicode字符串转换为str类型</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(unicode_or_str, unicode):</span><br><span class="line">        value = unicode_or_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = unicode_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_excdate</span><span class="params">(elment)</span>:</span></span><br><span class="line">    start = elment.attrib.get(<span class="string">"starttime"</span>)</span><br><span class="line">    end = elment.attrib.get(<span class="string">"endtime"</span>)</span><br><span class="line">    start = datetime.datetime.strptime(start, <span class="string">"%Y%m%d %H:%M:%S.%f"</span>)</span><br><span class="line">    end = datetime.datetime.strptime(end, <span class="string">"%Y%m%d %H:%M:%S.%f"</span>)</span><br><span class="line">    m, s = divmod((end - start).seconds, <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">if</span> int(m) == <span class="number">0</span>:</span><br><span class="line">        excdate = <span class="string">"%s秒"</span> % s</span><br><span class="line">    <span class="keyword">elif</span> int(s) == <span class="number">0</span>:</span><br><span class="line">        excdate = <span class="string">"%s分"</span> % m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        excdate = <span class="string">"%s分%s秒"</span> % (m, s)</span><br><span class="line">    <span class="keyword">return</span> excdate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_results_xml</span><span class="params">(xml_path)</span>:</span></span><br><span class="line">    <span class="string">"""RobotFramework运行自动化测试用例结果解析</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    tree = ElementTree.parse(xml_path)</span><br><span class="line">    results = &#123;&#125;</span><br><span class="line">    fail_cases = []</span><br><span class="line"></span><br><span class="line">    root = tree.getroot().attrib[<span class="string">"generated"</span>]</span><br><span class="line">    run_date = datetime.datetime.strptime(root, <span class="string">"%Y%m%d %H:%M:%S.%f"</span>)</span><br><span class="line">    run_date = datetime.datetime.strftime(run_date, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    results[<span class="string">"run_date"</span>] = run_date</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> tree.findall(<span class="string">"suite"</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> n.findall(<span class="string">"status"</span>):</span><br><span class="line">            results[<span class="string">"suite_date"</span>] = _get_excdate(y)</span><br><span class="line">            <span class="keyword">if</span> y.attrib[<span class="string">"status"</span>] == <span class="string">"pass"</span>:</span><br><span class="line">                results[<span class="string">"status"</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                results[<span class="string">"status"</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tree.getiterator(<span class="string">"total"</span>):</span><br><span class="line">        results[<span class="string">"fail_num"</span>] = int(i.find(<span class="string">"stat"</span>).attrib.get(<span class="string">"fail"</span>))</span><br><span class="line">        results[<span class="string">"pass_num"</span>] = int(i.find(<span class="string">"stat"</span>).attrib.get(<span class="string">"pass"</span>))</span><br><span class="line">        results[<span class="string">"total_num"</span>] = results[<span class="string">"fail_num"</span>] + results[<span class="string">"pass_num"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> results[<span class="string">"status"</span>]:</span><br><span class="line">        <span class="keyword">for</span> test <span class="keyword">in</span> tree.getiterator(<span class="string">"test"</span>):</span><br><span class="line">            <span class="keyword">if</span> test.find(<span class="string">"status"</span>).attrib.get(<span class="string">"status"</span>) == <span class="string">"FAIL"</span>:</span><br><span class="line">                test_info = test.attrib</span><br><span class="line">                test_info[<span class="string">"excDate"</span>] = _get_excdate(test.find(<span class="string">"status"</span>))</span><br><span class="line">                fail_cases.append(test_info)</span><br><span class="line">        results[<span class="string">"fail_cases"</span>] = fail_cases</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output_xml = sys.argv[<span class="number">1</span>]</span><br><span class="line">url = <span class="string">"http://wisecloud.gitee.io/automationtest/"</span> + output_xml[<span class="number">13</span>:]</span><br><span class="line">res = _parse_results_xml(output_xml + <span class="string">"/output.xml"</span>)</span><br><span class="line"></span><br><span class="line">base_styles = <span class="string">"""</span></span><br><span class="line"><span class="string">/*base css*/</span></span><br><span class="line"><span class="string">a&#123;color:#4a72af&#125;</span></span><br><span class="line"><span class="string">body&#123;background-color:#e4e4e4&#125;</span></span><br><span class="line"><span class="string">body,p&#123;margin:0;padding:0&#125;</span></span><br><span class="line"><span class="string">img&#123;display:block&#125;</span></span><br><span class="line"><span class="string">h1,h2,h3,h4,h5,h6&#123;margin:0 0 .8em 0&#125;</span></span><br><span class="line"><span class="string">h3&#123;font-size:28px;color:#444!important;font-family:Arial,Helvetica,sans-serif&#125;</span></span><br><span class="line"><span class="string">h4&#123;font-size:22px;color:#4a72af!important;font-family:Arial,Helvetica,sans-serif&#125;</span></span><br><span class="line"><span class="string">h5&#123;font-size:18px;color:#444!important;font-family:Arial,Helvetica,sans-serif&#125;</span></span><br><span class="line"><span class="string">p&#123;font-size:12px;color:#444!important;font-family:"Lucida Grande","Lucida Sans","Lucida Sans Unicode",sans-serif;line-height:1.5&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">table.robotstat &#123;</span></span><br><span class="line"><span class="string">  border: 1px solid black;</span></span><br><span class="line"><span class="string">  border-collapse: collapse;</span></span><br><span class="line"><span class="string">  empty-cells: show;</span></span><br><span class="line"><span class="string">  margin: 0px 1px;</span></span><br><span class="line"><span class="string">  table-layout: fixed;</span></span><br><span class="line"><span class="string">  word-wrap: break-word;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  width:100%;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">table.robotstat td&#123;</span></span><br><span class="line"><span class="string">    border: 1px solid #ddd;</span></span><br><span class="line"><span class="string">    padding: 4px;</span></span><br><span class="line"><span class="string">    line-height: 1.42857143;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tr.test_column_robot &#123;</span></span><br><span class="line"><span class="string">  background-color：#C6C6C6;</span></span><br><span class="line"><span class="string">  border: 1px solid black;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ol li img&#123;display:inline;height:20px&#125;"""</span></span><br><span class="line"></span><br><span class="line">div_styles = <span class="string">"""</span></span><br><span class="line"><span class="string">/*div styles*/</span></span><br><span class="line"><span class="string">.news&#123;text-align:center;padding-top:15px;&#125;</span></span><br><span class="line"><span class="string">.content&#123;width:720px;margin:0 auto;background-color:white&#125;</span></span><br><span class="line"><span class="string">.round_border&#123;margin-bottom:5px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;margin-top:0;font-size:14px;padding:6px;border:1px solid #ccc&#125;</span></span><br><span class="line"><span class="string">.status .info&#123;color:white!important;text-shadow:0 -1px 0 rgba(0,0,0,0.3);font-size:32px;line-height:36px;padding:8px 0&#125;</span></span><br><span class="line"><span class="string">.main img&#123;width:38px;margin-right:16px;height:38px&#125;</span></span><br><span class="line"><span class="string">.main table&#123;font-size:14px;&#125;</span></span><br><span class="line"><span class="string">.main table th&#123;text-align:right;&#125;</span></span><br><span class="line"><span class="string">.bottom-message&#123;width:720px;cellpadding:5px;cellspacing:0px&#125;</span></span><br><span class="line"><span class="string">.bottom-message .message&#123;font-size:13px;color:#aaa;line-height:18px;text-align:center&#125;</span></span><br><span class="line"><span class="string">.bottom-message .designed&#123;font-size:13px;color:#aaa;line-height:18px;font-style: italic;text-align:right&#125;</span></span><br><span class="line"><span class="string">img.cartoon &#123;width: 36px; display:inline&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> res[<span class="string">"status"</span>]:</span><br><span class="line">    build_status_color = <span class="string">"green"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    build_status_color = <span class="string">"red"</span></span><br><span class="line">div_styles += <span class="string">".status&#123;background-color:%s;font-size:28px;font-weight:bold;color:white;width:720px;height:52px;margin-bottom:18px;text-align:center;vertical-align:middle;border-collapse:collapse;background-repeat:no-repeat&#125;"</span> % build_status_color</span><br><span class="line"></span><br><span class="line">msg_styles = <span class="string">"&lt;STYLE&gt;"</span> + base_styles + div_styles + <span class="string">"&lt;/STYLE&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msg_body = <span class="string">"""&lt;DIV class="content round_border"&gt;</span></span><br><span class="line"><span class="string">&lt;DIV class="status"&gt;"""</span></span><br><span class="line"><span class="keyword">if</span> res[<span class="string">"status"</span>]:</span><br><span class="line">    test_res = <span class="string">"成功"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    test_res = <span class="string">"失败"</span></span><br><span class="line">msg_body += <span class="string">"""&lt;h4 class="info"&gt;测试结果:%s&lt;/h4&gt;"""</span> % test_res</span><br><span class="line"></span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;/DIV&gt;</span></span><br><span class="line"><span class="string">&lt;TABLE&gt;</span></span><br><span class="line"><span class="string">  &lt;TR&gt;&lt;TD&gt;Project:&lt;/TD&gt;&lt;TD&gt;WiseCloud自动化测试&lt;/TD&gt;&lt;/TR&gt;"""</span></span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">  &lt;TR&gt;&lt;TD&gt;Date of run:&lt;/TD&gt;&lt;TD&gt;%s&lt;/TD&gt;&lt;/TR&gt;"""</span> % res[<span class="string">"run_date"</span>]</span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">  &lt;TR&gt;&lt;TD&gt;Test duration:&lt;/TD&gt;&lt;TD&gt;%s&lt;/TD&gt;&lt;/TR&gt; """</span> % res[<span class="string">"suite_date"</span>]</span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">  &lt;TR&gt;&lt;TD&gt;Test report:&lt;/TD&gt;&lt;TD&gt;&lt;A href="%s/report.html"&gt;Open report.html&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;"""</span> % url</span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">  &lt;TR&gt;&lt;TD&gt;Test log:&lt;/TD&gt;&lt;TD&gt;&lt;A href="%s/log.html"&gt;Open log.html&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;"""</span> % url</span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;/TABLE&gt;</span></span><br><span class="line"><span class="string">&lt;/DIV&gt;</span></span><br><span class="line"><span class="string">&lt;BR/&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;!-- Robot Framework Results --&gt;</span></span><br><span class="line"><span class="string">&lt;DIV class="content round_border"&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;h4&gt;Robot Framework Results&lt;/h4&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;table class="robotstat"&gt;</span></span><br><span class="line"><span class="string">        &lt;thead&gt;</span></span><br><span class="line"><span class="string">          &lt;tr class="test_column_robot"&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;&lt;b&gt;Total&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;&lt;b&gt;Passed&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;&lt;b&gt;Failed&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;&lt;b&gt;Pass %&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;/thead&gt;</span></span><br><span class="line"><span class="string">        &lt;tbody&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">msg_body += <span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % res[<span class="string">"total_num"</span>]</span><br><span class="line">msg_body += <span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % res[<span class="string">"pass_num"</span>]</span><br><span class="line">msg_body += <span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % res[<span class="string">"fail_num"</span>]</span><br><span class="line">percent = float(res[<span class="string">"pass_num"</span>]) * <span class="number">100</span> / float(res[<span class="string">"total_num"</span>])</span><br><span class="line">msg_body += <span class="string">"&lt;td&gt;%0.2f&lt;/td&gt;"</span> % percent</span><br><span class="line"></span><br><span class="line">msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;/tbody&gt;</span></span><br><span class="line"><span class="string">      &lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/DIV&gt;</span></span><br><span class="line"><span class="string">&lt;BR/&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> res[<span class="string">"status"</span>]:</span><br><span class="line">    msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;DIV class="content round_border"&gt;</span></span><br><span class="line"><span class="string">    &lt;h4&gt;No Robot Framework test results found.&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/DIV&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res[<span class="string">"status"</span>]:</span><br><span class="line">    msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;DIV class="content round_border"&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;h4&gt;Robot Framework Error Cases&lt;/h4&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;table class="robotstat"&gt;</span></span><br><span class="line"><span class="string">    &lt;thead&gt;</span></span><br><span class="line"><span class="string">    &lt;tr class="test_column_robot"&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;&lt;b&gt;Test Name&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;&lt;b&gt;Status&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;&lt;b&gt;Execution Datetime&lt;/b&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;/thead&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;tbody&gt;"""</span></span><br><span class="line">    <span class="keyword">for</span> case <span class="keyword">in</span> res[<span class="string">"fail_cases"</span>]:</span><br><span class="line">        case_name = _to_str(case[<span class="string">"name"</span>])</span><br><span class="line">        <span class="comment"># msg_body += """</span></span><br><span class="line">        <span class="comment"># &lt;tr&gt;&lt;td colspan="3"&gt;&lt;b&gt;%s&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;""" % case_name</span></span><br><span class="line">        msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;tr&gt;"""</span></span><br><span class="line">        msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;td&gt;&lt;a href="%s/log.html#%s"&gt;%s&lt;/a&gt;&lt;/td&gt;"""</span> % (url, case[<span class="string">"id"</span>], case_name)</span><br><span class="line">        msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;td style="color: #FF3333"&gt;Fail&lt;/td&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;td&gt;%s&lt;/td&gt;"""</span> % case[<span class="string">"excDate"</span>]</span><br><span class="line">        msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;"""</span></span><br><span class="line">    msg_body += <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;/tbody&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">msg_body = <span class="string">"&lt;BODY&gt;"</span> + msg_body + <span class="string">"&lt;/BODY&gt;"</span></span><br><span class="line">msg_head = <span class="string">"""&lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;"""</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">"""&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;"""</span></span><br><span class="line">msg = msg + msg_head + msg_styles + msg_body + <span class="string">"&lt;/html&gt;"</span></span><br><span class="line"></span><br><span class="line">send_test_result_mail(sys.argv[<span class="number">2</span>], msg)</span><br><span class="line"><span class="comment"># with open("~/Desktop/robot_result.html", "w") as f:</span></span><br><span class="line"><span class="comment">#     f.write(msg)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#send_robotframework_mail("leicj@wise2c.com", msg)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>unic.py</code>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Copyright 2008-2015 Nokia Networks</span></span><br><span class="line"><span class="comment">#  Copyright 2016-     Robot Framework Foundation</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">#  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">#  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">#  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">#  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">#  limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> PrettyPrinter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .platform <span class="keyword">import</span> IRONPYTHON, JYTHON, PY2</span><br><span class="line"><span class="keyword">from</span> .robottypes <span class="keyword">import</span> is_bytes, is_unicode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> PY2:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unic</span><span class="params">(item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, unicode):</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, (bytes, bytearray)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#return item.decode('ASCII')</span></span><br><span class="line">                <span class="keyword">return</span> item.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="keyword">except</span> UnicodeError:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">u''</span>.join(chr(b) <span class="keyword">if</span> b &lt; <span class="number">128</span> <span class="keyword">else</span> <span class="string">'\\x%x'</span> % b</span><br><span class="line">                                <span class="keyword">for</span> b <span class="keyword">in</span> bytearray(item))</span><br><span class="line">	<span class="keyword">if</span> isinstance(item, (list, dict, tuple)):</span><br><span class="line">	     <span class="keyword">try</span>:</span><br><span class="line">		item = json.dumps(item, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">'cp936'</span>)</span><br><span class="line">             <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">	         <span class="keyword">try</span>:</span><br><span class="line">		     item = json.dumps(item, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">'cp936'</span>)</span><br><span class="line">	         <span class="keyword">except</span>:</span><br><span class="line">		     	<span class="keyword">pass</span></span><br><span class="line">	     <span class="keyword">except</span>:</span><br><span class="line">		 	<span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 添加部分</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> unicode(item)</span><br><span class="line">            <span class="keyword">except</span> UnicodeError:</span><br><span class="line">                <span class="keyword">return</span> unic(str(item))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> _unrepresentable_object(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unic</span><span class="params">(item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, str):</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, (bytes, bytearray)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#return item.decode('ASCII')</span></span><br><span class="line">                <span class="keyword">return</span> item.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="keyword">except</span> UnicodeError:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span>.join(chr(b) <span class="keyword">if</span> b &lt; <span class="number">128</span> <span class="keyword">else</span> <span class="string">'\\x%x'</span> % b</span><br><span class="line">                               <span class="keyword">for</span> b <span class="keyword">in</span> item)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> str(item)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> _unrepresentable_object(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># JVM and .NET seem to handle Unicode normalization automatically. Importing</span></span><br><span class="line"><span class="comment"># unicodedata on Jython also takes some time so it's better to avoid it.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (JYTHON <span class="keyword">or</span> IRONPYTHON):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> unicodedata <span class="keyword">import</span> normalize</span><br><span class="line">    _unic = unic</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unic</span><span class="params">(item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> normalize(<span class="string">'NFC'</span>, _unic(item))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepr</span><span class="params">(item, width=<span class="number">400</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> unic(PrettyRepr(width=width).pformat(item))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyRepr</span><span class="params">(PrettyPrinter)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format</span><span class="params">(self, object, context, maxlevels, level)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> is_unicode(object):</span><br><span class="line">                <span class="keyword">return</span> repr(object).lstrip(<span class="string">'u'</span>), <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> is_bytes(object):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'b'</span> + repr(object).lstrip(<span class="string">'b'</span>), <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> PrettyPrinter.format(self, object, context, maxlevels, level)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> _unrepresentable_object(object), <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_unrepresentable_object</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> .error <span class="keyword">import</span> get_error_message</span><br><span class="line">    <span class="keyword">return</span> <span class="string">u"&lt;Unrepresentable object %s. Error: %s&gt;"</span> \</span><br><span class="line">           % (item.__class__.__name__, get_error_message())</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Wise2c</tag>
        <tag>RobotFramework</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上安装Robotframework-RIDE</title>
    <url>/articles/2076826458.html</url>
    <content><![CDATA[<h3 id="拷贝pth文件到指定目录"><a href="#拷贝pth文件到指定目录" class="headerlink" title="拷贝pth文件到指定目录"></a>拷贝pth文件到指定目录</h3><ul>
<li><p><a href="https://pan.baidu.com/s/1Ud2oGuTIdrj01z_SZZJkUg" target="_blank" rel="noopener external nofollow noreferrer">文件百度云链接</a>，从百度云下载文件到目录<code>Downloads</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp ~&#x2F;Downloads&#x2F;wxredirect.pth &#x2F;Library&#x2F;Python&#x2F;2.7&#x2F;site-packages&#x2F;</span><br></pre></td></tr></table></figure>

<p>​</p>
<a id="more"></a>
<h3 id="拷贝wxPython目录到指定目录"><a href="#拷贝wxPython目录到指定目录" class="headerlink" title="拷贝wxPython目录到指定目录"></a>拷贝wxPython目录到指定目录</h3></li>
<li><p>在执行命令之前，请先确保你的/usr/local/lib目录是存在的，如果lib目录没有请自己创建一个:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;usr&#x2F;local&#x2F;lib</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>如果已经有lib目录就不用创建目录了，直接执行下面的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r ~&#x2F;Downloads&#x2F;wxPython-unicode-2.8.12.1&#x2F; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;wxPython-unicode-2.8.12.1&#x2F;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>拷贝完成后，确保/usr/local/lib/wxPython-unicode-2.8.12.1/目录下是bin、include、lib、share四个目录。</p>
<p>这样就完成了wxPython的安装了，然后请自行完成ride的安装</p>
</li>
</ul>
<h3 id="安装Robotframework-RIED"><a href="#安装Robotframework-RIED" class="headerlink" title="安装Robotframework-RIED"></a>安装Robotframework-RIED</h3><ul>
<li><p>执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install robotframework-ride</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到ride.py文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># which ride.py</span><br><span class="line">&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;2.7&#x2F;bin&#x2F;ride.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令启动RIDE，主要是wxPython2.8.12.1需要32位的python2.7才能运行（<code>可以把命令写成shell脚本</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2.7-32 &#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;2.7&#x2F;bin&#x2F;ride.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>PS：简单用一个命令处理一下，在终端运行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.versioner.python Prefer-32-Bit -bool yes</span><br><span class="line">ride.py</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTA3MDgyNg==&mid=2656981250&idx=1&sn=81e3df021485c663055deb963268e269&mpshare=1&scene=23&srcid=0419HYAgfYZogU41vorKxNOs%23rd" target="_blank" rel="noopener external nofollow noreferrer">RF环境安装-mac-osx10.11-基础环境-安装指南</a></li>
<li><a href="https://stackoverflow.com/questions/33134896/install-wxpython-2-8-for-ride-on-osx-el-capitan" target="_blank" rel="noopener external nofollow noreferrer">Install wxPython 2.8 (For Ride) on OSX “El Capitan”</a></li>
<li><a href="https://stackoverflow.com/questions/4798759/cant-import-wxpython-on-mac-os-x" target="_blank" rel="noopener external nofollow noreferrer">Can’t import wx(Python) on Mac OS X</a></li>
<li><a href="https://codeday.me/bug/20180319/146126.html" target="_blank" rel="noopener external nofollow noreferrer">如何在Mac OS X上安装wxPython？</a></li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>测试</tag>
        <tag>Robotframework</tag>
      </tags>
  </entry>
  <entry>
    <title>V2Ray的安装使用</title>
    <url>/articles/4021449867.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用Docker方式安装"><a href="#使用Docker方式安装" class="headerlink" title="使用Docker方式安装"></a>使用Docker方式安装</h3><ul>
<li><p>Docker具体安装请见：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener external nofollow noreferrer">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</li>
<li><p>新建运行目录，比如：<code>makir v2ray</code></p>
</li>
<li><p>进入到<code>v2ray</code>目录新建一个文件<code>config.json</code>，可以在<a href="https://intmainreturn0.com/v2ray-config-gen/#" target="_blank" rel="noopener external nofollow noreferrer">V2Ray生成配置网站</a>生成。填写所需的端口，然后复制配置到文件<code>config.json</code></p>
<a id="more"></a>

<p><img src="https://image.ritboy.com/markdown/202004/441a8a78107f585488350d2eb3b821ed.jpg" alt="image-20190125144154593"></p>
</li>
<li><p>进入到<code>v2ray</code>目录新建一个<code>Makefile</code>文件，主要文件中的使用<code>tab</code>键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.PHONY: run clear</span><br><span class="line">run: clear</span><br><span class="line">	docker run -d --privileged&#x3D;true --name v2ray -v $(PWD):&#x2F;etc&#x2F;v2ray --network&#x3D;host  v2ray&#x2F;official</span><br><span class="line"></span><br><span class="line">clear:</span><br><span class="line">	-docker rm -f v2ray</span><br></pre></td></tr></table></figure>
</li>
<li><p>在目录<code>v2ray</code>中运行命令：<code>make run</code></p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://www.v2ray.com/ui_client/osx.html" target="_blank" rel="noopener external nofollow noreferrer">使用文档</a></p>
<h3 id="生成客户端配置文件"><a href="#生成客户端配置文件" class="headerlink" title="生成客户端配置文件"></a>生成客户端配置文件</h3><p>在<a href="https://intmainreturn0.com/v2ray-config-gen/#" target="_blank" rel="noopener external nofollow noreferrer">V2Ray生成配置网站</a>生成，需要填写服务端地址，本地socket使用端口，用户，服务端端口。然后点击复制配置，保存为<code>client-config.json</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/1ac3329b5de36ab3f91cb35b0a2309e1.jpg" alt="image-20190125144746186"></p>
<h3 id="MacOS-连接"><a href="#MacOS-连接" class="headerlink" title="MacOS 连接"></a>MacOS 连接</h3><ul>
<li>下载<a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener external nofollow noreferrer">V2Ray</a>，并安装</li>
</ul>
<h4 id="添加客户端配置文件"><a href="#添加客户端配置文件" class="headerlink" title="添加客户端配置文件"></a>添加客户端配置文件</h4><ul>
<li><p>选择Configure选项</p>
<p><img src="https://image.ritboy.com/markdown/202004/1fda9dedcb1a38dde1e3fd0a5059f8ed.jpg" alt="image-20190125145222467"></p>
</li>
<li><p>选择<code>Advanced</code></p>
<p><img src="https://image.ritboy.com/markdown/202004/13542451298531dc3106726f4ef19f79.jpg" alt="image-20190125145508688"></p>
</li>
<li><p>选择<code>configs</code>，并添加前面准备好的客户端配置文件，即配置文件的路径（比如：<code>client-config.json</code>)</p>
<p><img src="https://image.ritboy.com/markdown/202004/8d0a0cbcb8f90983f07efea62f08f64a.jpg" alt="image-20190125145657548"></p>
</li>
</ul>
<h4 id="启动V2Ray代理"><a href="#启动V2Ray代理" class="headerlink" title="启动V2Ray代理"></a>启动V2Ray代理</h4><ul>
<li><p>选择添加好的服务</p>
<p><img src="https://image.ritboy.com/markdown/202004/9d52a3af672b785f6ad667efb3639892.jpg" alt="image-20190125150217787"></p>
</li>
<li><p>选择启动模式，<strong>注意：PAC模式请修改<code>pac.js</code>中socket的端口(默认为1081）</strong></p>
<p><img src="https://image.ritboy.com/markdown/202004/813c1c927a5316a432c06532328ebcea.jpg" alt="image-20190125150311751"></p>
</li>
<li><p>启动V2Ray</p>
<p><img src="https://image.ritboy.com/markdown/202004/8aa00b3cae0fade55e3f8afd1ab6cc4b.jpg" alt="image-20190125150648887"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker安装Testlink</title>
    <url>/articles/1132432202.html</url>
    <content><![CDATA[<h3 id="Docker-compose安装"><a href="#Docker-compose安装" class="headerlink" title="Docker-compose安装"></a>Docker-compose安装</h3><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v2/" target="_blank" rel="noopener external nofollow noreferrer">docker-compose官网地址</a></p>
<h4 id="docker-compose-yaml文件"><a href="#docker-compose-yaml文件" class="headerlink" title="docker-compose.yaml文件"></a>docker-compose.yaml文件</h4><a id="more"></a>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mariadb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'bitnami/mariadb:latest'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MARIADB_USER=bn_testlink</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MARIADB_DATABASE=bitnami_testlink</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'mariadb_data:/bitnami'</span></span><br><span class="line">  <span class="attr">testlink:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'bitnami/testlink:latest'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10080:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10443:443'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'testlink_data:/bitnami'</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MARIADB_HOST=mariadb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MARIADB_PORT_NUMBER=3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_DATABASE_USER=bn_testlink</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_DATABASE_NAME=bitnami_testlink</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_USERNAME=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_PASSWORD=wise2c2018</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_EMAIL=admin@wise2c.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TESTLINK_LANGUAGE=zh_CN</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mariadb_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">testlink_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose重新安装"><a href="#docker-compose重新安装" class="headerlink" title="docker-compose重新安装"></a>docker-compose重新安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker volume list</span><br><span class="line"></span><br><span class="line"># 删除testlink的两个数据卷</span><br><span class="line">docker volume rm &lt;testlink_mariadb_data testlink_testlink_data&gt;</span><br></pre></td></tr></table></figure>

<h3 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h3><p><a href="https://github.com/XiaoyaoRay/testlink" target="_blank" rel="noopener external nofollow noreferrer">Github链接</a></p>
<h4 id="清空原有数据"><a href="#清空原有数据" class="headerlink" title="清空原有数据"></a>清空原有数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker volume list</span><br><span class="line"></span><br><span class="line"># 删除testlink的两个数据卷</span><br><span class="line">docker volume rm &lt;testlink_mariadb_data testlink_testlink_data&gt;</span><br></pre></td></tr></table></figure>

<h4 id="docker-comose-yaml-文件"><a href="#docker-comose-yaml-文件" class="headerlink" title="docker-comose.yaml 文件"></a>docker-comose.yaml 文件</h4><p>其中服务<code>backup</code>将在第一次运行时从七牛上下载最新的备份数据，并且每天凌晨3点开始打包备份数据库的数据，然后上传到七牛。如果需要指定恢复数据，请配置<code>backup</code>服务环境变量<code>MARIADB_FILE</code>的值（”七牛上备份文件的名字”）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mariadb:</span><br><span class="line">    image: &#39;bitnami&#x2F;mariadb:latest&#39;</span><br><span class="line">    environment:</span><br><span class="line">      - ALLOW_EMPTY_PASSWORD&#x3D;yes</span><br><span class="line">      - MARIADB_USER&#x3D;bn_testlink</span><br><span class="line">      - MARIADB_DATABASE&#x3D;bitnami_testlink</span><br><span class="line">    volumes_from:</span><br><span class="line">      - backup</span><br><span class="line">    restart: always</span><br><span class="line">  testlink:</span><br><span class="line">    image: &#39;bitnami&#x2F;testlink:latest&#39;</span><br><span class="line">    ports:</span><br><span class="line">      - &#39;10080:80&#39;</span><br><span class="line">      - &#39;10443:443&#39;</span><br><span class="line">    volumes:</span><br><span class="line">      - &#39;testlink_data:&#x2F;bitnami&#39;</span><br><span class="line">    depends_on:</span><br><span class="line">      - mariadb</span><br><span class="line">    environment:</span><br><span class="line">      - MARIADB_HOST&#x3D;mariadb</span><br><span class="line">      - MARIADB_PORT_NUMBER&#x3D;3306</span><br><span class="line">      - TESTLINK_DATABASE_USER&#x3D;bn_testlink</span><br><span class="line">      - TESTLINK_DATABASE_NAME&#x3D;bitnami_testlink</span><br><span class="line">      - ALLOW_EMPTY_PASSWORD&#x3D;yes</span><br><span class="line">      - TESTLINK_USERNAME&#x3D;admin</span><br><span class="line">      - TESTLINK_PASSWORD&#x3D;wise2c2018</span><br><span class="line">      - TESTLINK_EMAIL&#x3D;admin@wise2c.com</span><br><span class="line">      - TESTLINK_LANGUAGE&#x3D;zh_CN</span><br><span class="line">  backup:</span><br><span class="line">    image: &#39;registry.cn-hangzhou.aliyuncs.com&#x2F;imagess&#x2F;testlink-backup&#39;</span><br><span class="line">    environment:</span><br><span class="line">      - MARIADB_FILE&#x3D;</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - mariadb_data:&#x2F;bitnami</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mariadb_data:</span><br><span class="line">    driver: local</span><br><span class="line">  testlink_data:</span><br><span class="line">    driver: loca</span><br></pre></td></tr></table></figure>

<h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure>



<h3 id="直接用docker安装"><a href="#直接用docker安装" class="headerlink" title="直接用docker安装"></a>直接用docker安装</h3><h4 id="创建testlink的docker网络"><a href="#创建testlink的docker网络" class="headerlink" title="创建testlink的docker网络"></a>创建testlink的docker网络</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create testlink-tier</span><br></pre></td></tr></table></figure>

<h4 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name mariadb \</span><br><span class="line">--net testlink-tier \</span><br><span class="line">-e ALLOW_EMPTY_PASSWORD&#x3D;yes \</span><br><span class="line">-e MARIADB_USER&#x3D;bn_testlink \</span><br><span class="line">-e MARIADB_DATABASE&#x3D;bitnami_testlink \</span><br><span class="line">--volume ~&#x2F;testlink&#x2F;mariadb_data:&#x2F;bitnami \</span><br><span class="line">bitnami&#x2F;mariadb:latest</span><br></pre></td></tr></table></figure>

<h4 id="安装Testlink"><a href="#安装Testlink" class="headerlink" title="安装Testlink"></a>安装Testlink</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 18000:80 -p 18443:443 --name testlink \</span><br><span class="line">-e ALLOW_EMPTY_PASSWORD&#x3D;yes \</span><br><span class="line">-e MARIADB_USER&#x3D;bn_testlink \</span><br><span class="line">-e MARIADB_DATABASE&#x3D;bitnami_testlink \</span><br><span class="line">--net testlink-tier \</span><br><span class="line">--volume ~&#x2F;testlink&#x2F;testlink_data:&#x2F;bitnami \</span><br><span class="line">bitnami&#x2F;testlink:latest</span><br></pre></td></tr></table></figure>

<p><strong>PS</strong>:网页登录的默认密码：<code>user/bitnami</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/bitnami/bitnami-docker-testlink" target="_blank" rel="noopener external nofollow noreferrer">Testlink官网地址</a></p>
]]></content>
      <tags>
        <tag>Testlink</tag>
      </tags>
  </entry>
  <entry>
    <title>WatchGuard-firebox-tranining</title>
    <url>/articles/1535224408.html</url>
    <content><![CDATA[<h1 id="FireBox-Training"><a href="#FireBox-Training" class="headerlink" title="FireBox Training"></a>FireBox Training</h1><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>SN,PN,KVM均为自动化准备的</p>
<h3 id="SN"><a href="#SN" class="headerlink" title="SN"></a>SN</h3><p>Serial over IP deice</p>
<ul>
<li>17个端口：一个提供给用户访问SN设备，其余16个端口为网络接口(管理不同设备的串口)</li>
</ul>
<a id="more"></a>

<h3 id="PN"><a href="#PN" class="headerlink" title="PN"></a>PN</h3><p>Power over IP deice</p>
<ul>
<li>类似SN管理工具，主要是控制设备的电源</li>
</ul>
<h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p>多台设备连接一个显示器即显示器可以切换到不同的设备</p>
<h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><ul>
<li>使用需要在本机安装驱动（USB转串口） </li>
<li>设备波特率：115200 </li>
<li>稳定可靠</li>
</ul>
<h3 id="Hardware-Platform："><a href="#Hardware-Platform：" class="headerlink" title="Hardware Platform："></a>Hardware Platform：</h3><p><a href="https://confluence.watchguard.com/pages/viewpage.action?spaceKey=WGQA&title=Hardware+Platform" target="_blank" rel="noopener external nofollow noreferrer">Confluence上地址</a></p>
<p>XTM系列已经不再维护，被T,M,FirefoxV替换，FirefoxV软件(类似虚拟机)。设备型号中-W 带无线，-D DSL猫拨号，-F带光纤（没有F也有可能带光纤）</p>
<ul>
<li>RTM： 出厂时第一次版本号（同型号设备可能不同）</li>
<li>X86 vs PPC： CPU平台，比如：PPC 64，x86 64</li>
<li>POE：网络连接或者供电(即某个插口同时又网络功能和供电功能)</li>
<li>Crypto： 加密芯片，比如：internal，CCK8903</li>
<li>T开头的型号：小盒子</li>
<li>M开头的型号：大盒子</li>
</ul>
<h3 id="测试软件："><a href="#测试软件：" class="headerlink" title="测试软件："></a>测试软件：</h3><h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><ul>
<li><p>WebUI</p>
<p><a href="https://172.23.0.233:8080" target="_blank" rel="noopener external nofollow noreferrer">https://172.23.0.233:8080</a></p>
</li>
<li><p>CLI</p>
</li>
<li><p>WSM</p>
<p>只能去西雅图的image server下载: <a href="http://cmimages.wgti.net/" target="_blank" rel="noopener external nofollow noreferrer">http://cmimages.wgti.net/</a></p>
<p>用于管理Firebox的client端</p>
<p>其中PM: 能管理配置文件和License，修改需要保存才能生效，也可以修改多处后再保存</p>
</li>
<li><p>UTM</p>
</li>
</ul>
<h4 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h4><ul>
<li><p>status: readonly</p>
<p>只有读取权限</p>
</li>
<li><p>admin: readwrite</p>
<p>可读可写</p>
</li>
<li><p>root</p>
<p>debug版本能进入root账户（非默认开启），在admin用户下执行：diagnose enable readwrite(密码，可以自定义)</p>
</li>
</ul>
<h4 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h4><ul>
<li>测试使用release版本，不推荐使用debug版本，sysa.dl升级经常使用</li>
<li>Firebox中有两套操作系统，sysb系统不需要最新的（需要保持稳定）</li>
<li>release版本到debug版本：在链接申请访问权限，或者使用package升级。</li>
</ul>
<h3 id="敏捷与瀑布开发"><a href="#敏捷与瀑布开发" class="headerlink" title="敏捷与瀑布开发"></a>敏捷与瀑布开发</h3><h4 id="瀑布"><a href="#瀑布" class="headerlink" title="瀑布"></a>瀑布</h4><ul>
<li>按计划一整套来做（设计，开发，测试）&lt;– Firebox开发，所有功能都有联系不能很好拆分</li>
<li>mainline的开发主线（开发工具：perforce即p4，每次有chagelist即CL）</li>
<li>其他自动化开发工具：git</li>
</ul>
<h4 id="敏捷"><a href="#敏捷" class="headerlink" title="敏捷"></a>敏捷</h4><ul>
<li>切成小任务，更快速，更灵活</li>
</ul>
<h4 id="Perforce-即p4"><a href="#Perforce-即p4" class="headerlink" title="Perforce(即p4)"></a>Perforce(即p4)</h4><ul>
<li>拉取Branch，image server的文件夹对应perforce的不同分支</li>
<li>task branch: 开发单独的功能，image server的文件夹名最后带字母的</li>
</ul>
<h4 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h4><ul>
<li>needmeage，需要在mainline和v1 release两个分支上验证</li>
<li>JIRA 上查看fix version</li>
<li>changelist的位置是否大于fix branch： 大于且不再fix branch上需要验证多个分支的</li>
</ul>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>  每一个平台，每一种型号都有对应的定义，一个设备一个License，<a href="https://wgt.sharepoint.com/engineering/Engineering%20Document%20Library/Forms/AllItems.aspx?RootFolder=%2Fengineering%2FEngineering%20Document%20Library%2F_LICENSE%20SPECS&FolderCTID=0x01200016762C401C4A2642B6F0EDAD8DEC76CA&View=%7BB9CC7568-B695-4BE2-AD86-AA2D4E4D4A8F%7D" target="_blank" rel="noopener external nofollow noreferrer">LICENSE SPECS</a></p>
<h4 id="License-存放位置"><a href="#License-存放位置" class="headerlink" title="License 存放位置"></a>License 存放位置</h4><ul>
<li>/etc/wg/license: Activation License</li>
<li>/etc/license: Default License</li>
</ul>
<h4 id="License-说明"><a href="#License-说明" class="headerlink" title="License 说明"></a>License 说明</h4><ul>
<li>Feature: 时间或者数量，即按时间和数量收费。数量是指接入设备允许使用的个数（比如：VPN的用户使用个数）</li>
<li>Signature: 验证有效性</li>
<li>Pro: 套餐，与其他License取最大</li>
<li>DevKey: 使用默认值，除非很清楚修改内容（比如性能测试）</li>
</ul>
<h4 id="LIVESECURITY-升级"><a href="#LIVESECURITY-升级" class="headerlink" title="LIVESECURITY: 升级"></a>LIVESECURITY: 升级</h4><ul>
<li>升级需要转换配置文件</li>
<li>build中release-date与LIVESECURITY对比，过期</li>
<li>releaseDate: 发布时间，测试的时候还未发布，是我们定义的时间</li>
<li>客户的License：根据SN 和 SKU生成，在官网查看</li>
</ul>
<h4 id="SKU"><a href="#SKU" class="headerlink" title="SKU"></a>SKU</h4><ul>
<li>最小可售单元</li>
<li><code>FB</code>或者<code>FB+L</code>或者<code>L</code> (FB: Firebox，L: License)</li>
</ul>
<h4 id="MSSP"><a href="#MSSP" class="headerlink" title="MSSP"></a>MSSP</h4><ul>
<li>用户可自己配置，根据账号余额来使用</li>
<li>Standard Support： 基本网络功能</li>
</ul>
<h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><ul>
<li>以保存了以前配置，出厂恢复</li>
<li>官方不支持降级</li>
</ul>
<h4 id="恢复FireBox"><a href="#恢复FireBox" class="headerlink" title="恢复FireBox"></a>恢复FireBox</h4><ul>
<li>Restore factory-default 清除配置文件</li>
<li>Restore factory-default all 清除所有的用户数据：管理员密码，配置文件（设备上reset按键等同）</li>
<li>Forgot password： 进入到 Boot info safe mode –&gt; QSW 设备直连（相同网段），使用root账号或admin账号恢复密码</li>
</ul>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul>
<li>TCP/IP协议卷一/二</li>
<li>IPTables NetFilter架构</li>
<li>鸟哥的私房菜</li>
</ul>
<h3 id="连接FireBox工具"><a href="#连接FireBox工具" class="headerlink" title="连接FireBox工具"></a>连接FireBox工具</h3><ul>
<li>PuTTY</li>
<li>mPuTTY</li>
<li>SN管理设备: Telnet方式连接，自定义端口（在SN上配置）</li>
<li>SSH: 4118端口</li>
<li>WEB: 8080端口</li>
</ul>
<h3 id="FireBox中文件"><a href="#FireBox中文件" class="headerlink" title="FireBox中文件"></a>FireBox中文件</h3><ul>
<li>/etc/wg: 配置文件，Firebox以及其他配置文件</li>
<li>config.xml: 压缩文件(PE头决定文件真正格式), 备份 gzip解压 修改   </li>
<li>certs: 存放证书</li>
<li>backup: 对系统备份，恢复系统到某个时间点</li>
<li>upgrade.txt: 对版本升级操作记录</li>
<li>/var/log: 系统log</li>
<li>/tmp/debug: 进程的log</li>
<li>查看log： logread -f 或者 tail -f</li>
</ul>
<h3 id="wgcmd-命令"><a href="#wgcmd-命令" class="headerlink" title="wgcmd 命令"></a>wgcmd 命令</h3><ul>
<li>发给wgagent进程，使用xpath来区别</li>
<li>wgcmd status /system/info 查看系统信息 –&gt; 相当于进程wgagent –&gt; 相当于进程system</li>
<li>wgcmd status /authentication/list 获取当前登录用户</li>
<li>wgcmd action /authentication/logoff type=99 剔除当前登录用户，不剔除root账户（剔除status，admin账号）</li>
<li>wgcmd status /network –&gt; 获取帮助</li>
<li>中间状态使用wgcmd来模拟</li>
</ul>
<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h4><ul>
<li>二层</li>
<li>有mac <ul>
<li>根据mac来转发 –&gt; mac table</li>
<li>src mac:  mac table中没有将会记录下来 </li>
<li>dst mac:  查看mac table</li>
</ul>
</li>
</ul>
<h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><ul>
<li>三层</li>
<li>有IP <ul>
<li>根据IP来转发 –&gt; routing table</li>
<li>路由查询最为关键，每条均会路由查询</li>
<li>0.0.0.0/0: 默认路由</li>
<li>每一个端口对应一个IP地址</li>
<li>子网掩码： 区分网络段和主机段，根据IP地址来区分</li>
<li>src ip: routing table中没有将会记录下来 </li>
<li>dst ip:  查看routing table –&gt; 先最精确匹配（范围最小），再metrc(开销)最小，精确匹配优先级更高–&gt; C直连路由</li>
</ul>
</li>
</ul>
<h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><ul>
<li>Mixed Routing Mode == 3 层 90%客户</li>
<li>Bridage Mode == transparent mode 2层 –&gt; 已有Router，添加防火墙且不影响原有网络（添加安全策略）</li>
<li>Drop In Mode == 2或者3层</li>
</ul>
<h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p> 网络地址转换</p>
<ul>
<li>DNAT: 公司 dgnamic NAT –&gt; src NAT –&gt; 转化源IP地址 –&gt; 多对一</li>
<li>SNAT: 公司 static NAT –&gt; dst NAT –&gt; 转化目的IP地址 –&gt; 一对一</li>
<li>1-to-1 NAT: src NAT + dst NAT –&gt; 内部的IP地址与外部IP地址绑定 –&gt; 双向的</li>
<li>Server load balance(SLB): dst NAT –&gt; 多台目的服务 –&gt; 多个目的IP地址 –&gt; 一对多</li>
</ul>
<h4 id="发送："><a href="#发送：" class="headerlink" title="发送："></a>发送：</h4><ul>
<li>目的IP不变</li>
<li>在路由表中查看下一跳的目的MAC，封装src mac，dst mac</li>
<li>第一次发送时创建Comutrack或者Session表第一次发送时创建Comutrack或者Session表</li>
</ul>
<h4 id="回包"><a href="#回包" class="headerlink" title="回包"></a>回包</h4><ul>
<li>回来的使用Session表,不查policy</li>
</ul>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul>
<li>Session查询最为关键，先查Session表，在查policy：即第一条数据包查policy，其余的均Session表。查policy及其费性能</li>
<li>防火墙默认不允许任何网络通关，添加策略通过某些网络</li>
<li>策略：配置才生效，如果没有勾选没有意义<ul>
<li>来源： 目的端口，源用户，源ip，源域名，源网络段等等</li>
<li>顺序匹配: 匹配到第一条，后面的不关心 – 顺序自定义或系统自动匹配（越精确越往上放即顺序越靠前）</li>
</ul>
</li>
<li>所做的两类事件<ul>
<li>检测数据包（单个，一个链接，某个IP地址，端口，协议等）</li>
<li>检测到后做某些动作（进一步检测等）</li>
</ul>
</li>
<li>认证（Authenlication）:  把IP地址与人结合起来，然后对不同的人对不同的操作</li>
</ul>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><ul>
<li>专用虚拟网络</li>
<li>local与remote要对等（证书，密码一样）</li>
<li>IKE/IPSEC: <code>BoVPN</code>和<code>BoVPNVIF</code>，端口：500/4500</li>
<li>TLS-SSL:  <code>BoVPNVIF</code> ，端口 ：443 ，必须由client端发起建立连接</li>
</ul>
<h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><ul>
<li>master</li>
<li>backupmaster</li>
<li>ActivePassive：使用虚MAC，把master与backupmaster的MAC改为一样，让一个IP对应一个MAC地址</li>
</ul>
<h3 id="Proxy-amp-Packet-Filtters："><a href="#Proxy-amp-Packet-Filtters：" class="headerlink" title="Proxy&amp;Packet Filtters："></a>Proxy&amp;Packet Filtters：</h3><p>流扫描，会缓存进行扫描，配置扫描范围，绝大部分病毒都在数据包前面字段</p>
<h3 id="EICAR-病毒引擎检测字段"><a href="#EICAR-病毒引擎检测字段" class="headerlink" title="EICAR 病毒引擎检测字段"></a>EICAR 病毒引擎检测字段</h3>]]></content>
      <categories>
        <category>WatchGuard</category>
        <category>Firebox</category>
      </categories>
      <tags>
        <tag>Firebox</tag>
      </tags>
  </entry>
  <entry>
    <title>测试流程</title>
    <url>/articles/1592904657.html</url>
    <content><![CDATA[<h3 id="产品-开发-测试流程"><a href="#产品-开发-测试流程" class="headerlink" title="产品-开发-测试流程"></a>产品-开发-测试流程</h3><ul>
<li><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p> 需求分析由产品人员制定，细化每一个功能的细节，每一个按钮的位置，对于稍大或复杂一点的需求进行建模。  </p>
<a id="more"></a></li>
<li><h4 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h4><p>这里会叫上所有参与项目人员进行，开发人员、测试人员。测试人员提出需求，开发人员考虑功能实现的方案 与可行性、当然开发负责也是要参与的。测试人员主要是对需求的理解提出疑问，以便才能根据需求写用例。</p>
</li>
<li><h4 id="开发人员制定开发计划："><a href="#开发人员制定开发计划：" class="headerlink" title="开发人员制定开发计划："></a>开发人员制定开发计划：</h4><p>开发人员需求根据需求功能点进行排期。然后将开计划转交给测试人员。  </p>
</li>
<li><h4 id="测试计划制定测试计划："><a href="#测试计划制定测试计划：" class="headerlink" title="测试计划制定测试计划："></a>测试计划制定测试计划：</h4><p> 测试人员根据开发计划，对测试具体测试时间，也就是开发功能完成后的时间，进行几轮测试等。然后，把项 目的开发与测试计划提交到Teambiton进行任务管理。</p>
</li>
<li><h4 id="编写测试用例："><a href="#编写测试用例：" class="headerlink" title="编写测试用例："></a>编写测试用例：</h4><p>根据详细的需求文档，开始进行用例的编写。  </p>
</li>
<li><h4 id="用例评审："><a href="#用例评审：" class="headerlink" title="用例评审："></a>用例评审：</h4><p>在用例进行评审之间，先以邮件形式将用例发送给相关人员，以便他们事先了解用例对哪些功能进行验证以及 验证的细节。  然后，测试人员组进行用例评审，开发人员对用例与实际功能不符合有哪些，产品人员对会通过用例对功能的 具体实现进行把握等等。  </p>
</li>
<li><h4 id="提交代码："><a href="#提交代码：" class="headerlink" title="提交代码："></a>提交代码：</h4><p>开发人员完成所有功能后，会对自己的功能进行一个自测。自测完成后提交测试人员进行测试。  </p>
</li>
<li><h4 id="具体测试流程："><a href="#具体测试流程：" class="headerlink" title="具体测试流程："></a>具体测试流程：</h4><p> 开发人员对于提测的功能进行测式，发现的问题通过缺陷管理工具进行反馈，开发人员对问题进行修复，然 后，准备第二轮测试。  测试人员完成第一轮测试后，需要写测试结论，发到相关人员。然后进行第二轮测试，并且对第一轮中发现的 问题进行重点回归。  </p>
</li>
<li><h4 id="测试通过："><a href="#测试通过：" class="headerlink" title="测试通过："></a>测试通过：</h4><p>经过两到三轮或四轮的测试后，直到没发现新的问题，或暂时无法解决，或不紧急的问题。通过上级确认，可 以通过。编写测试报告与验收方案。  </p>
</li>
</ul>
<h3 id="测试方法与流程"><a href="#测试方法与流程" class="headerlink" title="测试方法与流程"></a>测试方法与流程</h3><ul>
<li><h4 id="冒烟测试："><a href="#冒烟测试：" class="headerlink" title="冒烟测试："></a>冒烟测试：</h4><p>是指在对一个新版本进行系统大规模的测试之前，先验证一下软件的基本功能是否实现，是否具备可测性。  引入到软件测试中，就是指测试小组在正规测试一个新版本之前，先投入较少的人力和时间验证一个软件 的 主要功能，如果主要功能都没有实现，则打回开发组重新开发。这样做的好处是可以节省大量的时间成本和人力成本。  </p>
</li>
<li><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><p>功能测试检查实际的功能是否符合用户的需求。测试的大部分工作也是围绕软件的功能进行，设计软件的目的也 就是满足客户对其功能的需求。  功能测试又可可以细分为很多种：界面测试、逻辑功能测试、易用性测试、安装测试、兼容性测试等。  </p>
</li>
<li><h4 id="界面测试："><a href="#界面测试：" class="headerlink" title="界面测试："></a>界面测试：</h4><p>确保产品UI符合产品经理和设计师的界面设计，并且文案正确。  逻辑功能测试：根据需求文档与测试用例，测试产品的逻辑，确保逻辑正确。  </p>
</li>
<li><h4 id="兼容性测试："><a href="#兼容性测试：" class="headerlink" title="兼容性测试："></a>兼容性测试：</h4><p>原有功能优化后在新旧版本上的兼容测试；服务号、PC Web、组织号与APP之间相互功能的交互与 兼容测试。  </p>
</li>
<li><h4 id="回归测试："><a href="#回归测试：" class="headerlink" title="回归测试："></a>回归测试：</h4><p>回归测试是指修改了旧代码后，重新实行测试以确认修改后没有引入新的错误或导致其他代码产生错误。  原有功能在新版本上进行回归测试，保证运行准确。目前APP回归测试上测试主要基于底部导航Tab，对报名吧首 页、通讯录、发布、发现、我四个tab下的主要功能进行回归测试。服务号和pc web会进行发布-报名-签到整一个 业务流程进行回归测试。组织号是进行组织的申请-资料编辑-审核会员-审核组织的业务流程进行测试。   第一轮功能测试中发现的bug得到修复后，对该功能进行第二轮测试。回归也是一个循环的过程，如果回归的问题 通不过，则需要开发人员修改后再次进行回归，直到通过为止。  </p>
</li>
<li><h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><p>验收测试是部署软件之前的最后一个测试操作。一般是对产品功能、用户界面、性能、业务关联性的全局测试， 确保产品达到产品经理的需求，没有阻碍产品使用的大bug。  </p>
</li>
<li><h4 id="升级测试"><a href="#升级测试" class="headerlink" title="升级测试"></a>升级测试</h4><p>从历史版本升级到当前新版本的测试，确保升级后，软件可以正常使用，重点对升级后的新功能进行测试。 </p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://bbs.51testing.com/thread-1173775-1-1.html" target="_blank" rel="noopener external nofollow noreferrer">论坛</a></li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
